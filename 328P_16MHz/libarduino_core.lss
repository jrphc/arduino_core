In archive libarduino_core.a:

malloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008e8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000df3  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 0000024e  00000000  00000000  0000170f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.__malloc_heap_end 00000002  00000000  00000000  0000195d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.__malloc_heap_start 00000002  00000000  00000000  0000195f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.__malloc_margin 00000002  00000000  00000000  00001961  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY

Disassembly of section .text.avr-libc:

00000000 <malloc>:
struct __freelist *__flp;

ATTRIBUTE_CLIB_SECTION
void *
malloc(size_t len)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
   4:	82 30       	cpi	r24, 0x02	; 2
   6:	91 05       	cpc	r25, r1
   8:	00 f4       	brcc	.+0      	; 0xa <malloc+0xa>
		len = sizeof(struct __freelist) - sizeof(size_t);
   a:	82 e0       	ldi	r24, 0x02	; 2
   c:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
   e:	e0 91 00 00 	lds	r30, 0x0000
  12:	f0 91 00 00 	lds	r31, 0x0000
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	a0 e0       	ldi	r26, 0x00	; 0
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	30 97       	sbiw	r30, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <malloc+0x22>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
  22:	40 81       	ld	r20, Z
  24:	51 81       	ldd	r21, Z+1	; 0x01
  26:	48 17       	cp	r20, r24
  28:	59 07       	cpc	r21, r25
  2a:	00 f0       	brcs	.+0      	; 0x2c <malloc+0x2c>
			continue;
		if (fp1->sz == len) {
  2c:	48 17       	cp	r20, r24
  2e:	59 07       	cpc	r21, r25
  30:	01 f4       	brne	.+0      	; 0x32 <malloc+0x32>
  32:	82 81       	ldd	r24, Z+2	; 0x02
  34:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
  36:	10 97       	sbiw	r26, 0x00	; 0
  38:	01 f0       	breq	.+0      	; 0x3a <malloc+0x3a>
				fp2->nx = fp1->nx;
  3a:	13 96       	adiw	r26, 0x03	; 3
  3c:	9c 93       	st	X, r25
  3e:	8e 93       	st	-X, r24
  40:	12 97       	sbiw	r26, 0x02	; 2
  42:	00 c0       	rjmp	.+0      	; 0x44 <malloc+0x44>
			else
				__flp = fp1->nx;
  44:	90 93 00 00 	sts	0x0000, r25
  48:	80 93 00 00 	sts	0x0000, r24
  4c:	00 c0       	rjmp	.+0      	; 0x4e <malloc+0x4e>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
  4e:	21 15       	cp	r18, r1
  50:	31 05       	cpc	r19, r1
  52:	01 f0       	breq	.+0      	; 0x54 <malloc+0x54>
  54:	42 17       	cp	r20, r18
  56:	53 07       	cpc	r21, r19
  58:	00 f0       	brcs	.+0      	; 0x5a <malloc+0x5a>
  5a:	a9 01       	movw	r20, r18
  5c:	db 01       	movw	r26, r22
  5e:	00 c0       	rjmp	.+0      	; 0x60 <malloc+0x60>
  60:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
  62:	9a 01       	movw	r18, r20
  64:	bd 01       	movw	r22, r26
  66:	df 01       	movw	r26, r30
  68:	02 80       	ldd	r0, Z+2	; 0x02
  6a:	f3 81       	ldd	r31, Z+3	; 0x03
  6c:	e0 2d       	mov	r30, r0
  6e:	00 c0       	rjmp	.+0      	; 0x70 <malloc+0x70>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
  70:	21 15       	cp	r18, r1
  72:	31 05       	cpc	r19, r1
  74:	01 f0       	breq	.+0      	; 0x76 <malloc+0x76>
		if (s - len < sizeof(struct __freelist)) {
  76:	28 1b       	sub	r18, r24
  78:	39 0b       	sbc	r19, r25
  7a:	24 30       	cpi	r18, 0x04	; 4
  7c:	31 05       	cpc	r19, r1
  7e:	00 f4       	brcc	.+0      	; 0x80 <malloc+0x80>
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
  84:	61 15       	cp	r22, r1
  86:	71 05       	cpc	r23, r1
  88:	01 f0       	breq	.+0      	; 0x8a <malloc+0x8a>
				sfp2->nx = sfp1->nx;
  8a:	fb 01       	movw	r30, r22
  8c:	93 83       	std	Z+3, r25	; 0x03
  8e:	82 83       	std	Z+2, r24	; 0x02
  90:	00 c0       	rjmp	.+0      	; 0x92 <malloc+0x92>
			else
				__flp = sfp1->nx;
  92:	90 93 00 00 	sts	0x0000, r25
  96:	80 93 00 00 	sts	0x0000, r24
			return &(sfp1->nx);
  9a:	fe 01       	movw	r30, r28
  9c:	32 96       	adiw	r30, 0x02	; 2
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <malloc+0xa0>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
  a0:	fe 01       	movw	r30, r28
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	81 93       	st	Z+, r24
  a8:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
  aa:	22 50       	subi	r18, 0x02	; 2
  ac:	31 09       	sbc	r19, r1
  ae:	39 83       	std	Y+1, r19	; 0x01
  b0:	28 83       	st	Y, r18
		return &(sfp2->nx);
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <malloc+0xb4>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
  b4:	20 91 00 00 	lds	r18, 0x0000
  b8:	30 91 00 00 	lds	r19, 0x0000
  bc:	23 2b       	or	r18, r19
  be:	01 f4       	brne	.+0      	; 0xc0 <malloc+0xc0>
		__brkval = __malloc_heap_start;
  c0:	20 91 00 00 	lds	r18, 0x0000
  c4:	30 91 00 00 	lds	r19, 0x0000
  c8:	30 93 00 00 	sts	0x0000, r19
  cc:	20 93 00 00 	sts	0x0000, r18
	cp = __malloc_heap_end;
  d0:	20 91 00 00 	lds	r18, 0x0000
  d4:	30 91 00 00 	lds	r19, 0x0000
	if (cp == 0)
  d8:	21 15       	cp	r18, r1
  da:	31 05       	cpc	r19, r1
  dc:	01 f4       	brne	.+0      	; 0xde <malloc+0xde>
		cp = STACK_POINTER() - __malloc_margin;
  de:	2d b7       	in	r18, 0x3d	; 61
  e0:	3e b7       	in	r19, 0x3e	; 62
  e2:	40 91 00 00 	lds	r20, 0x0000
  e6:	50 91 00 00 	lds	r21, 0x0000
  ea:	24 1b       	sub	r18, r20
  ec:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
  ee:	e0 91 00 00 	lds	r30, 0x0000
  f2:	f0 91 00 00 	lds	r31, 0x0000
  f6:	e2 17       	cp	r30, r18
  f8:	f3 07       	cpc	r31, r19
  fa:	00 f4       	brcc	.+0      	; 0xfc <malloc+0xfc>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
  fc:	2e 1b       	sub	r18, r30
  fe:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	00 f0       	brcs	.+0      	; 0x106 <malloc+0x106>
 106:	ac 01       	movw	r20, r24
 108:	4e 5f       	subi	r20, 0xFE	; 254
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	24 17       	cp	r18, r20
 10e:	35 07       	cpc	r19, r21
 110:	00 f0       	brcs	.+0      	; 0x112 <malloc+0x112>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
 112:	4e 0f       	add	r20, r30
 114:	5f 1f       	adc	r21, r31
 116:	50 93 00 00 	sts	0x0000, r21
 11a:	40 93 00 00 	sts	0x0000, r20
		fp1->sz = len;
 11e:	81 93       	st	Z+, r24
 120:	91 93       	st	Z+, r25
		return &(fp1->nx);
 122:	00 c0       	rjmp	.+0      	; 0x124 <malloc+0x124>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
 128:	cf 01       	movw	r24, r30
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <free>:


ATTRIBUTE_CLIB_SECTION
void
free(void *p)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	01 f4       	brne	.+0      	; 0x138 <free+0x8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <free+0xa>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
 13a:	fc 01       	movw	r30, r24
 13c:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
 13e:	13 82       	std	Z+3, r1	; 0x03
 140:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 142:	c0 91 00 00 	lds	r28, 0x0000
 146:	d0 91 00 00 	lds	r29, 0x0000
 14a:	20 97       	sbiw	r28, 0x00	; 0
 14c:	01 f4       	brne	.+0      	; 0x14e <free+0x1e>
		if ((char *)p + fpnew->sz == __brkval)
 14e:	20 81       	ld	r18, Z
 150:	31 81       	ldd	r19, Z+1	; 0x01
 152:	28 0f       	add	r18, r24
 154:	39 1f       	adc	r19, r25
 156:	80 91 00 00 	lds	r24, 0x0000
 15a:	90 91 00 00 	lds	r25, 0x0000
 15e:	82 17       	cp	r24, r18
 160:	93 07       	cpc	r25, r19
 162:	01 f4       	brne	.+0      	; 0x164 <free+0x34>
			__brkval = cpnew;
 164:	f0 93 00 00 	sts	0x0000, r31
 168:	e0 93 00 00 	sts	0x0000, r30
 16c:	00 c0       	rjmp	.+0      	; 0x16e <free+0x3e>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 16e:	de 01       	movw	r26, r28
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
 174:	ae 17       	cp	r26, r30
 176:	bf 07       	cpc	r27, r31
 178:	00 f4       	brcc	.+0      	; 0x17a <free+0x4a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 17a:	12 96       	adiw	r26, 0x02	; 2
 17c:	4d 91       	ld	r20, X+
 17e:	5c 91       	ld	r21, X
 180:	13 97       	sbiw	r26, 0x03	; 3
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
 182:	9d 01       	movw	r18, r26
 184:	41 15       	cp	r20, r1
 186:	51 05       	cpc	r21, r1
 188:	01 f0       	breq	.+0      	; 0x18a <free+0x5a>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 18a:	da 01       	movw	r26, r20
 18c:	00 c0       	rjmp	.+0      	; 0x18e <free+0x5e>
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
 18e:	b3 83       	std	Z+3, r27	; 0x03
 190:	a2 83       	std	Z+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
 192:	40 81       	ld	r20, Z
 194:	51 81       	ldd	r21, Z+1	; 0x01
 196:	84 0f       	add	r24, r20
 198:	95 1f       	adc	r25, r21
 19a:	8a 17       	cp	r24, r26
 19c:	9b 07       	cpc	r25, r27
 19e:	01 f4       	brne	.+0      	; 0x1a0 <free+0x70>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
 1a0:	8d 91       	ld	r24, X+
 1a2:	9c 91       	ld	r25, X
 1a4:	11 97       	sbiw	r26, 0x01	; 1
 1a6:	84 0f       	add	r24, r20
 1a8:	95 1f       	adc	r25, r21
 1aa:	02 96       	adiw	r24, 0x02	; 2
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
			fpnew->nx = fp1->nx;
 1b0:	12 96       	adiw	r26, 0x02	; 2
 1b2:	8d 91       	ld	r24, X+
 1b4:	9c 91       	ld	r25, X
 1b6:	13 97       	sbiw	r26, 0x03	; 3
 1b8:	93 83       	std	Z+3, r25	; 0x03
 1ba:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
 1bc:	21 15       	cp	r18, r1
 1be:	31 05       	cpc	r19, r1
 1c0:	01 f4       	brne	.+0      	; 0x1c2 <free+0x92>
			/* new head of freelist */
			__flp = fpnew;
 1c2:	f0 93 00 00 	sts	0x0000, r31
 1c6:	e0 93 00 00 	sts	0x0000, r30
			return;
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <free+0x9c>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
 1cc:	d9 01       	movw	r26, r18
 1ce:	13 96       	adiw	r26, 0x03	; 3
 1d0:	fc 93       	st	X, r31
 1d2:	ee 93       	st	-X, r30
 1d4:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
 1d6:	4d 91       	ld	r20, X+
 1d8:	5d 91       	ld	r21, X+
 1da:	a4 0f       	add	r26, r20
 1dc:	b5 1f       	adc	r27, r21
 1de:	ea 17       	cp	r30, r26
 1e0:	fb 07       	cpc	r31, r27
 1e2:	01 f4       	brne	.+0      	; 0x1e4 <free+0xb4>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	84 0f       	add	r24, r20
 1ea:	95 1f       	adc	r25, r21
 1ec:	02 96       	adiw	r24, 0x02	; 2
 1ee:	d9 01       	movw	r26, r18
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	9c 93       	st	X, r25
 1f4:	8e 93       	st	-X, r24
		fp2->nx = fpnew->nx;
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	93 81       	ldd	r25, Z+3	; 0x03
 1fa:	13 96       	adiw	r26, 0x03	; 3
 1fc:	9c 93       	st	X, r25
 1fe:	8e 93       	st	-X, r24
 200:	12 97       	sbiw	r26, 0x02	; 2
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f0 e0       	ldi	r31, 0x00	; 0
	     fp1->nx != 0;
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	9b 81       	ldd	r25, Y+3	; 0x03
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	01 f0       	breq	.+0      	; 0x20e <free+0xde>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
 20e:	fe 01       	movw	r30, r28
 210:	ec 01       	movw	r28, r24
 212:	00 c0       	rjmp	.+0      	; 0x214 <free+0xe4>
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
 214:	ce 01       	movw	r24, r28
 216:	02 96       	adiw	r24, 0x02	; 2
	if (cp2 + fp1->sz == __brkval) {
 218:	28 81       	ld	r18, Y
 21a:	39 81       	ldd	r19, Y+1	; 0x01
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	20 91 00 00 	lds	r18, 0x0000
 224:	30 91 00 00 	lds	r19, 0x0000
 228:	28 17       	cp	r18, r24
 22a:	39 07       	cpc	r19, r25
 22c:	01 f4       	brne	.+0      	; 0x22e <free+0xfe>
		if (fp2 == NULL)
 22e:	30 97       	sbiw	r30, 0x00	; 0
 230:	01 f4       	brne	.+0      	; 0x232 <free+0x102>
			/* Freelist is empty now. */
			__flp = NULL;
 232:	10 92 00 00 	sts	0x0000, r1
 236:	10 92 00 00 	sts	0x0000, r1
 23a:	00 c0       	rjmp	.+0      	; 0x23c <free+0x10c>
		else
			fp2->nx = NULL;
 23c:	13 82       	std	Z+3, r1	; 0x03
 23e:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
 240:	d0 93 00 00 	sts	0x0000, r29
 244:	c0 93 00 00 	sts	0x0000, r28
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

realloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000744  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d73  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 000001d2  00000000  00000000  000014eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY

Disassembly of section .text.avr-libc:

00000000 <realloc>:
#include <avr/io.h>

ATTRIBUTE_CLIB_SECTION
void *
realloc(void *ptr, size_t len)
{
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	cb 01       	movw	r24, r22
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
  20:	20 97       	sbiw	r28, 0x00	; 0
  22:	01 f4       	brne	.+0      	; 0x24 <realloc+0x24>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	ff 90       	pop	r15
  2e:	ef 90       	pop	r14
  30:	df 90       	pop	r13
  32:	cf 90       	pop	r12
  34:	bf 90       	pop	r11
  36:	af 90       	pop	r10
  38:	9f 90       	pop	r9
  3a:	8f 90       	pop	r8
  3c:	7f 90       	pop	r7
  3e:	6f 90       	pop	r6
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
  40:	0c 94 00 00 	jmp	0	; 0x0 <realloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  44:	fe 01       	movw	r30, r28
  46:	e6 0f       	add	r30, r22
  48:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  4a:	9e 01       	movw	r18, r28
  4c:	22 50       	subi	r18, 0x02	; 2
  4e:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
  50:	e2 17       	cp	r30, r18
  52:	f3 07       	cpc	r31, r19
  54:	00 f4       	brcc	.+0      	; 0x56 <realloc+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <realloc+0x58>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  58:	d9 01       	movw	r26, r18
  5a:	0d 91       	ld	r16, X+
  5c:	1c 91       	ld	r17, X
  5e:	11 97       	sbiw	r26, 0x01	; 1
  60:	06 17       	cp	r16, r22
  62:	17 07       	cpc	r17, r23
  64:	00 f0       	brcs	.+0      	; 0x66 <realloc+0x66>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  66:	05 30       	cpi	r16, 0x05	; 5
  68:	11 05       	cpc	r17, r1
  6a:	00 f4       	brcc	.+0      	; 0x6c <realloc+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <realloc+0x6e>
		    len > fp1->sz - sizeof(struct __freelist))
  6e:	a8 01       	movw	r20, r16
  70:	44 50       	subi	r20, 0x04	; 4
  72:	51 09       	sbc	r21, r1
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  74:	46 17       	cp	r20, r22
  76:	57 07       	cpc	r21, r23
  78:	00 f4       	brcc	.+0      	; 0x7a <realloc+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <realloc+0x7c>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  7c:	02 50       	subi	r16, 0x02	; 2
  7e:	11 09       	sbc	r17, r1
  80:	06 1b       	sub	r16, r22
  82:	17 0b       	sbc	r17, r23
  84:	01 93       	st	Z+, r16
  86:	11 93       	st	Z+, r17
		fp1->sz = len;
  88:	6d 93       	st	X+, r22
  8a:	7c 93       	st	X, r23
		free(&(fp2->nx));
  8c:	cf 01       	movw	r24, r30
  8e:	0e 94 00 00 	call	0	; 0x0 <realloc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <realloc+0x94>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  94:	5b 01       	movw	r10, r22
  96:	a0 1a       	sub	r10, r16
  98:	b1 0a       	sbc	r11, r17
	cp = (char *)ptr + fp1->sz;
  9a:	4e 01       	movw	r8, r28
  9c:	80 0e       	add	r8, r16
  9e:	91 1e       	adc	r9, r17
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  a0:	a0 91 00 00 	lds	r26, 0x0000
  a4:	b0 91 00 00 	lds	r27, 0x0000
  a8:	61 2c       	mov	r6, r1
  aa:	71 2c       	mov	r7, r1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	10 97       	sbiw	r26, 0x00	; 0
  b2:	01 f4       	brne	.+0      	; 0xb4 <realloc+0xb4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <realloc+0xb6>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  b6:	a8 15       	cp	r26, r8
  b8:	b9 05       	cpc	r27, r9
  ba:	01 f4       	brne	.+0      	; 0xbc <realloc+0xbc>
  bc:	ed 90       	ld	r14, X+
  be:	fc 90       	ld	r15, X
  c0:	11 97       	sbiw	r26, 0x01	; 1
  c2:	67 01       	movw	r12, r14
  c4:	42 e0       	ldi	r20, 0x02	; 2
  c6:	c4 0e       	add	r12, r20
  c8:	d1 1c       	adc	r13, r1
  ca:	ca 14       	cp	r12, r10
  cc:	db 04       	cpc	r13, r11
  ce:	00 f0       	brcs	.+0      	; 0xd0 <realloc+0xd0>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  d0:	47 01       	movw	r8, r14
  d2:	8a 18       	sub	r8, r10
  d4:	9b 08       	sbc	r9, r11
  d6:	64 01       	movw	r12, r8
  d8:	42 e0       	ldi	r20, 0x02	; 2
  da:	c4 0e       	add	r12, r20
  dc:	d1 1c       	adc	r13, r1
  de:	12 96       	adiw	r26, 0x02	; 2
  e0:	bc 90       	ld	r11, X
  e2:	12 97       	sbiw	r26, 0x02	; 2
  e4:	13 96       	adiw	r26, 0x03	; 3
  e6:	ac 91       	ld	r26, X
  e8:	b5 e0       	ldi	r27, 0x05	; 5
  ea:	cb 16       	cp	r12, r27
  ec:	d1 04       	cpc	r13, r1
  ee:	00 f0       	brcs	.+0      	; 0xf0 <realloc+0xf0>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
  f0:	b2 82       	std	Z+2, r11	; 0x02
  f2:	a3 83       	std	Z+3, r26	; 0x03
				fp2->sz = fp3->sz - incr;
  f4:	91 82       	std	Z+1, r9	; 0x01
  f6:	80 82       	st	Z, r8
				fp1->sz = len;
  f8:	d9 01       	movw	r26, r18
  fa:	8d 93       	st	X+, r24
  fc:	9c 93       	st	X, r25
  fe:	00 c0       	rjmp	.+0      	; 0x100 <realloc+0x100>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
 100:	0e 5f       	subi	r16, 0xFE	; 254
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	0e 0d       	add	r16, r14
 106:	1f 1d       	adc	r17, r15
 108:	f9 01       	movw	r30, r18
 10a:	11 83       	std	Z+1, r17	; 0x01
 10c:	00 83       	st	Z, r16
				fp2 = fp3->nx;
 10e:	eb 2d       	mov	r30, r11
 110:	fa 2f       	mov	r31, r26
			}
			if (ofp3)
 112:	61 15       	cp	r22, r1
 114:	71 05       	cpc	r23, r1
 116:	01 f0       	breq	.+0      	; 0x118 <realloc+0x118>
				ofp3->nx = fp2;
 118:	db 01       	movw	r26, r22
 11a:	13 96       	adiw	r26, 0x03	; 3
 11c:	fc 93       	st	X, r31
 11e:	ee 93       	st	-X, r30
 120:	12 97       	sbiw	r26, 0x02	; 2
 122:	00 c0       	rjmp	.+0      	; 0x124 <realloc+0x124>
			else
				__flp = fp2;
 124:	f0 93 00 00 	sts	0x0000, r31
 128:	e0 93 00 00 	sts	0x0000, r30
 12c:	00 c0       	rjmp	.+0      	; 0x12e <realloc+0x12e>
		}
		/*
		 * Find the largest chunk on the freelist while
		 * walking it.
		 */
		if (fp3->sz > s)
 12e:	6d 91       	ld	r22, X+
 130:	7c 91       	ld	r23, X
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	66 16       	cp	r6, r22
 136:	77 06       	cpc	r7, r23
 138:	00 f4       	brcc	.+0      	; 0x13a <realloc+0x13a>
 13a:	3b 01       	movw	r6, r22
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
 13c:	bd 01       	movw	r22, r26
 13e:	12 96       	adiw	r26, 0x02	; 2
 140:	0d 90       	ld	r0, X+
 142:	bc 91       	ld	r27, X
 144:	a0 2d       	mov	r26, r0
 146:	00 c0       	rjmp	.+0      	; 0x148 <realloc+0x148>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
 148:	60 91 00 00 	lds	r22, 0x0000
 14c:	70 91 00 00 	lds	r23, 0x0000
 150:	68 15       	cp	r22, r8
 152:	79 05       	cpc	r23, r9
 154:	01 f4       	brne	.+0      	; 0x156 <realloc+0x156>
 156:	68 16       	cp	r6, r24
 158:	79 06       	cpc	r7, r25
 15a:	00 f4       	brcc	.+0      	; 0x15c <realloc+0x15c>
		cp1 = __malloc_heap_end;
 15c:	40 91 00 00 	lds	r20, 0x0000
 160:	50 91 00 00 	lds	r21, 0x0000
		cp = (char *)ptr + len;
		if (cp1 == 0)
 164:	41 15       	cp	r20, r1
 166:	51 05       	cpc	r21, r1
 168:	01 f4       	brne	.+0      	; 0x16a <realloc+0x16a>
			cp1 = STACK_POINTER() - __malloc_margin;
 16a:	4d b7       	in	r20, 0x3d	; 61
 16c:	5e b7       	in	r21, 0x3e	; 62
 16e:	60 91 00 00 	lds	r22, 0x0000
 172:	70 91 00 00 	lds	r23, 0x0000
 176:	46 1b       	sub	r20, r22
 178:	57 0b       	sbc	r21, r23
		if (cp < cp1) {
 17a:	e4 17       	cp	r30, r20
 17c:	f5 07       	cpc	r31, r21
 17e:	00 f4       	brcc	.+0      	; 0x180 <realloc+0x180>
			__brkval = cp;
 180:	f0 93 00 00 	sts	0x0000, r31
 184:	e0 93 00 00 	sts	0x0000, r30
			fp1->sz = len;
 188:	f9 01       	movw	r30, r18
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	80 83       	st	Z, r24
 18e:	00 c0       	rjmp	.+0      	; 0x190 <realloc+0x190>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
 190:	0e 94 00 00 	call	0	; 0x0 <realloc>
 194:	7c 01       	movw	r14, r24
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	01 f0       	breq	.+0      	; 0x19a <realloc+0x19a>
		return 0;
	memcpy(memp, ptr, fp1->sz);
 19a:	a8 01       	movw	r20, r16
 19c:	be 01       	movw	r22, r28
 19e:	0e 94 00 00 	call	0	; 0x0 <realloc>
	free(ptr);
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 00 00 	call	0	; 0x0 <realloc>
	return memp;
 1a8:	c7 01       	movw	r24, r14
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <realloc+0x1ac>
 1ac:	ce 01       	movw	r24, r28
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <realloc+0x1b0>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	bf 90       	pop	r11
 1c6:	af 90       	pop	r10
 1c8:	9f 90       	pop	r9
 1ca:	8f 90       	pop	r8
 1cc:	7f 90       	pop	r7
 1ce:	6f 90       	pop	r6
 1d0:	08 95       	ret

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010a7  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001753  2**0
                  CONTENTS, READONLY

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010a7  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001753  2**0
                  CONTENTS, READONLY

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         00001008  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      00001783  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN14HardwareSerial9availableEv 00000020  00000000  00000000  000027cf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN14HardwareSerial4peekEv 00000032  00000000  00000000  000027ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14HardwareSerial4readEv 00000040  00000000  00000000  00002821  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14HardwareSerial5flushEv 00000016  00000000  00000000  00002861  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerial5writeEh 0000007a  00000000  00000000  00002877  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Z11serialEventv 00000002  00000000  00000000  000028f1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.__vector_18 00000074  00000000  00000000  000028f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._Z14serialEventRunv 00000012  00000000  00000000  00002967  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.__vector_19 00000076  00000000  00000000  00002979  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 00000088  00000000  00000000  000029ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14HardwareSerial5beginEm 00000102  00000000  00000000  00002a77  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14HardwareSerial5beginEmh 0000010c  00000000  00000000  00002b79  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14HardwareSerial3endEv 000000aa  00000000  00000000  00002c85  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14HardwareSerialcvbEv 00000004  00000000  00000000  00002d2f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.startup._GLOBAL__sub_I_rx_buffer 000000ac  00000000  00000000  00002d33  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .ctors        00000002  00000000  00000000  00002de0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .rodata._ZTV6Stream 00000010  00000000  00000000  00002de2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 24 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  00002df2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 25 .bss.Serial   00000022  00000000  00000000  00002e02  2**0
                  ALLOC
 26 .bss.tx_buffer 00000044  00000000  00000000  00002e02  2**0
                  ALLOC
 27 .bss.rx_buffer 00000044  00000000  00000000  00002e02  2**0
                  ALLOC
 28 .comment      00000012  00000000  00000000  00002e02  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	fc 01       	movw	r30, r24
   2:	24 85       	ldd	r18, Z+12	; 0x0c
   4:	35 85       	ldd	r19, Z+13	; 0x0d
   6:	f9 01       	movw	r30, r18
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	32 96       	adiw	r30, 0x02	; 2
  12:	20 81       	ld	r18, Z
  14:	31 81       	ldd	r19, Z+1	; 0x01
  16:	82 1b       	sub	r24, r18
  18:	93 0b       	sbc	r25, r19
  1a:	8f 73       	andi	r24, 0x3F	; 63
  1c:	99 27       	eor	r25, r25
  1e:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000020 <_ZN14HardwareSerial4peekEv>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	fc 01       	movw	r30, r24
  22:	84 85       	ldd	r24, Z+12	; 0x0c
  24:	95 85       	ldd	r25, Z+13	; 0x0d
  26:	fc 01       	movw	r30, r24
  28:	e0 5c       	subi	r30, 0xC0	; 192
  2a:	ff 4f       	sbci	r31, 0xFF	; 255
{
  _rx_buffer = rx_buffer;
  2c:	40 81       	ld	r20, Z
  2e:	51 81       	ldd	r21, Z+1	; 0x01
  30:	32 96       	adiw	r30, 0x02	; 2
  32:	20 81       	ld	r18, Z
  34:	31 81       	ldd	r19, Z+1	; 0x01
  36:	42 17       	cp	r20, r18
  _tx_buffer = tx_buffer;
  38:	53 07       	cpc	r21, r19
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN14HardwareSerial4peekEv+0x1c>
  3c:	01 90       	ld	r0, Z+
  3e:	f0 81       	ld	r31, Z
  40:	e0 2d       	mov	r30, r0
  42:	e8 0f       	add	r30, r24
  _ubrrh = ubrrh;
  44:	f9 1f       	adc	r31, r25
  46:	80 81       	ld	r24, Z
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	08 95       	ret
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	9f ef       	ldi	r25, 0xFF	; 255
  _ubrrl = ubrrl;
  50:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000072 <_ZN14HardwareSerial4readEv>:
  _ucsra = ucsra;
  _ucsrb = ucsrb;
  72:	fc 01       	movw	r30, r24
  _ucsrc = ucsrc;
  74:	84 85       	ldd	r24, Z+12	; 0x0c
  76:	95 85       	ldd	r25, Z+13	; 0x0d
  78:	fc 01       	movw	r30, r24
  7a:	e0 5c       	subi	r30, 0xC0	; 192
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	40 81       	ld	r20, Z
  _udr = udr;
  80:	51 81       	ldd	r21, Z+1	; 0x01
  82:	32 96       	adiw	r30, 0x02	; 2
  84:	20 81       	ld	r18, Z
  86:	31 81       	ldd	r19, Z+1	; 0x01
  88:	42 17       	cp	r20, r18
  8a:	53 07       	cpc	r21, r19
  _rxen = rxen;
  8c:	01 f0       	breq	.+0      	; 0x8e <_ZN14HardwareSerial4readEv+0x1c>
  8e:	a0 81       	ld	r26, Z
  90:	b1 81       	ldd	r27, Z+1	; 0x01
  _txen = txen;
  92:	a8 0f       	add	r26, r24
  94:	b9 1f       	adc	r27, r25
  96:	8c 91       	ld	r24, X
  _rxcie = rxcie;
  98:	20 81       	ld	r18, Z
  9a:	31 81       	ldd	r19, Z+1	; 0x01
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  _udrie = udrie;
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	2f 73       	andi	r18, 0x3F	; 63
  a2:	33 27       	eor	r19, r19
  _u2x = u2x;
  a4:	31 83       	std	Z+1, r19	; 0x01
  a6:	20 83       	st	Z, r18
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	9f ef       	ldi	r25, 0xFF	; 255
  b0:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000124 <_ZN14HardwareSerial5flushEv>:
 124:	fc 01       	movw	r30, r24
 126:	81 a1       	ldd	r24, Z+33	; 0x21
 128:	88 23       	and	r24, r24
 12a:	01 f0       	breq	.+0      	; 0x12c <_ZN14HardwareSerial5flushEv+0x8>
 12c:	a4 89       	ldd	r26, Z+20	; 0x14
 12e:	b5 89       	ldd	r27, Z+21	; 0x15
 130:	8c 91       	ld	r24, X
 132:	86 ff       	sbrs	r24, 6
 134:	00 c0       	rjmp	.+0      	; 0x136 <_ZN14HardwareSerial5flushEv+0x12>
 136:	11 a2       	std	Z+33, r1	; 0x21
 138:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

0000025e <_ZN14HardwareSerial5writeEh>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	fc 01       	movw	r30, r24
 264:	26 85       	ldd	r18, Z+14	; 0x0e
 266:	37 85       	ldd	r19, Z+15	; 0x0f
 268:	d9 01       	movw	r26, r18
 26a:	a0 5c       	subi	r26, 0xC0	; 192
 26c:	bf 4f       	sbci	r27, 0xFF	; 255
 26e:	8d 91       	ld	r24, X+
 270:	9c 91       	ld	r25, X
 272:	11 97       	sbiw	r26, 0x01	; 1
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	8f 73       	andi	r24, 0x3F	; 63
 278:	99 27       	eor	r25, r25
 27a:	e9 01       	movw	r28, r18
 27c:	ce 5b       	subi	r28, 0xBE	; 190
 27e:	df 4f       	sbci	r29, 0xFF	; 255
 280:	48 81       	ld	r20, Y
 282:	59 81       	ldd	r21, Y+1	; 0x01
 284:	84 17       	cp	r24, r20
 286:	95 07       	cpc	r25, r21
 288:	01 f0       	breq	.+0      	; 0x28a <_ZN14HardwareSerial5writeEh+0x2c>
 28a:	0d 90       	ld	r0, X+
 28c:	bc 91       	ld	r27, X
 28e:	a0 2d       	mov	r26, r0
 290:	a2 0f       	add	r26, r18
 292:	b3 1f       	adc	r27, r19
 294:	6c 93       	st	X, r22
 296:	a6 85       	ldd	r26, Z+14	; 0x0e
 298:	b7 85       	ldd	r27, Z+15	; 0x0f
 29a:	a0 5c       	subi	r26, 0xC0	; 192
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	11 96       	adiw	r26, 0x01	; 1
 2a0:	9c 93       	st	X, r25
 2a2:	8e 93       	st	-X, r24
 2a4:	a6 89       	ldd	r26, Z+22	; 0x16
 2a6:	b7 89       	ldd	r27, Z+23	; 0x17
 2a8:	2c 91       	ld	r18, X
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	07 8c       	ldd	r0, Z+31	; 0x1f
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <_ZN14HardwareSerial5writeEh+0x54>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	02 f4       	brpl	.+0      	; 0x2ba <_ZN14HardwareSerial5writeEh+0x5c>
 2ba:	28 2b       	or	r18, r24
 2bc:	2c 93       	st	X, r18
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	81 a3       	std	Z+33, r24	; 0x21
 2c2:	04 88       	ldd	r0, Z+20	; 0x14
 2c4:	f5 89       	ldd	r31, Z+21	; 0x15
 2c6:	e0 2d       	mov	r30, r0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

Disassembly of section .text._Z11serialEventv:

00000536 <_Z11serialEventv>:
 536:	08 95       	ret

Disassembly of section .text.__vector_18:

00000a6e <__vector_18>:
 a6e:	1f 92       	push	r1
 a70:	0f 92       	push	r0
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	0f 92       	push	r0
 a76:	11 24       	eor	r1, r1
 a78:	2f 93       	push	r18
 a7a:	3f 93       	push	r19
 a7c:	4f 93       	push	r20
 a7e:	8f 93       	push	r24
 a80:	9f 93       	push	r25
 a82:	ef 93       	push	r30
 a84:	ff 93       	push	r31
 a86:	80 91 c0 00 	lds	r24, 0x00C0
 a8a:	82 fd       	sbrc	r24, 2
 a8c:	00 c0       	rjmp	.+0      	; 0xa8e <__vector_18+0x20>
 a8e:	40 91 c6 00 	lds	r20, 0x00C6
 a92:	80 91 00 00 	lds	r24, 0x0000
 a96:	90 91 00 00 	lds	r25, 0x0000
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	8f 73       	andi	r24, 0x3F	; 63
 a9e:	99 27       	eor	r25, r25
 aa0:	20 91 00 00 	lds	r18, 0x0000
 aa4:	30 91 00 00 	lds	r19, 0x0000
 aa8:	82 17       	cp	r24, r18
 aaa:	93 07       	cpc	r25, r19
 aac:	01 f0       	breq	.+0      	; 0xaae <__vector_18+0x40>
 aae:	e0 91 00 00 	lds	r30, 0x0000
 ab2:	f0 91 00 00 	lds	r31, 0x0000
 ab6:	e0 50       	subi	r30, 0x00	; 0
 ab8:	f0 40       	sbci	r31, 0x00	; 0
 aba:	40 83       	st	Z, r20
 abc:	90 93 00 00 	sts	0x0000, r25
 ac0:	80 93 00 00 	sts	0x0000, r24
 ac4:	00 c0       	rjmp	.+0      	; 0xac6 <__vector_18+0x58>
 ac6:	80 91 c6 00 	lds	r24, 0x00C6
 aca:	ff 91       	pop	r31
 acc:	ef 91       	pop	r30
 ace:	9f 91       	pop	r25
 ad0:	8f 91       	pop	r24
 ad2:	4f 91       	pop	r20
 ad4:	3f 91       	pop	r19
 ad6:	2f 91       	pop	r18
 ad8:	0f 90       	pop	r0
 ada:	0f be       	out	0x3f, r0	; 63
 adc:	0f 90       	pop	r0
 ade:	1f 90       	pop	r1
 ae0:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00001550 <_Z14serialEventRunv>:
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1558:	89 2b       	or	r24, r25
    155a:	01 f0       	breq	.+0      	; 0x155c <_Z14serialEventRunv+0xc>
    155c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    1560:	08 95       	ret

Disassembly of section .text.__vector_19:

00002ab2 <__vector_19>:
    2ab2:	1f 92       	push	r1
    2ab4:	0f 92       	push	r0
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	0f 92       	push	r0
    2aba:	11 24       	eor	r1, r1
    2abc:	2f 93       	push	r18
    2abe:	3f 93       	push	r19
    2ac0:	8f 93       	push	r24
    2ac2:	9f 93       	push	r25
    2ac4:	ef 93       	push	r30
    2ac6:	ff 93       	push	r31
    2ac8:	20 91 00 00 	lds	r18, 0x0000
    2acc:	30 91 00 00 	lds	r19, 0x0000
    2ad0:	80 91 00 00 	lds	r24, 0x0000
    2ad4:	90 91 00 00 	lds	r25, 0x0000
    2ad8:	28 17       	cp	r18, r24
    2ada:	39 07       	cpc	r19, r25
    2adc:	01 f4       	brne	.+0      	; 0x2ade <__vector_19+0x2c>
    2ade:	80 91 c1 00 	lds	r24, 0x00C1
    2ae2:	8f 7d       	andi	r24, 0xDF	; 223
    2ae4:	80 93 c1 00 	sts	0x00C1, r24
    2ae8:	00 c0       	rjmp	.+0      	; 0x2aea <__vector_19+0x38>
    2aea:	e0 91 00 00 	lds	r30, 0x0000
    2aee:	f0 91 00 00 	lds	r31, 0x0000
    2af2:	e0 50       	subi	r30, 0x00	; 0
    2af4:	f0 40       	sbci	r31, 0x00	; 0
    2af6:	20 81       	ld	r18, Z
    2af8:	80 91 00 00 	lds	r24, 0x0000
    2afc:	90 91 00 00 	lds	r25, 0x0000
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	8f 73       	andi	r24, 0x3F	; 63
    2b04:	99 27       	eor	r25, r25
    2b06:	90 93 00 00 	sts	0x0000, r25
    2b0a:	80 93 00 00 	sts	0x0000, r24
    2b0e:	20 93 c6 00 	sts	0x00C6, r18
    2b12:	ff 91       	pop	r31
    2b14:	ef 91       	pop	r30
    2b16:	9f 91       	pop	r25
    2b18:	8f 91       	pop	r24
    2b1a:	3f 91       	pop	r19
    2b1c:	2f 91       	pop	r18
    2b1e:	0f 90       	pop	r0
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	0f 90       	pop	r0
    2b24:	1f 90       	pop	r1
    2b26:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

000055da <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    55da:	8f 92       	push	r8
    55dc:	9f 92       	push	r9
    55de:	af 92       	push	r10
    55e0:	bf 92       	push	r11
    55e2:	cf 92       	push	r12
    55e4:	df 92       	push	r13
    55e6:	ef 92       	push	r14
    55e8:	ff 92       	push	r15
    55ea:	0f 93       	push	r16
    55ec:	1f 93       	push	r17
    55ee:	cf 93       	push	r28
    55f0:	df 93       	push	r29
    55f2:	cd b7       	in	r28, 0x3d	; 61
    55f4:	de b7       	in	r29, 0x3e	; 62
    55f6:	fc 01       	movw	r30, r24
    55f8:	13 82       	std	Z+3, r1	; 0x03
    55fa:	12 82       	std	Z+2, r1	; 0x02
    55fc:	88 ee       	ldi	r24, 0xE8	; 232
    55fe:	93 e0       	ldi	r25, 0x03	; 3
    5600:	a0 e0       	ldi	r26, 0x00	; 0
    5602:	b0 e0       	ldi	r27, 0x00	; 0
    5604:	84 83       	std	Z+4, r24	; 0x04
    5606:	95 83       	std	Z+5, r25	; 0x05
    5608:	a6 83       	std	Z+6, r26	; 0x06
    560a:	b7 83       	std	Z+7, r27	; 0x07
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	91 83       	std	Z+1, r25	; 0x01
    5612:	80 83       	st	Z, r24
    5614:	75 87       	std	Z+13, r23	; 0x0d
    5616:	64 87       	std	Z+12, r22	; 0x0c
    5618:	57 87       	std	Z+15, r21	; 0x0f
    561a:	46 87       	std	Z+14, r20	; 0x0e
    561c:	31 8b       	std	Z+17, r19	; 0x11
    561e:	20 8b       	std	Z+16, r18	; 0x10
    5620:	13 8b       	std	Z+19, r17	; 0x13
    5622:	02 8b       	std	Z+18, r16	; 0x12
    5624:	f5 8a       	std	Z+21, r15	; 0x15
    5626:	e4 8a       	std	Z+20, r14	; 0x14
    5628:	d7 8a       	std	Z+23, r13	; 0x17
    562a:	c6 8a       	std	Z+22, r12	; 0x16
    562c:	b1 8e       	std	Z+25, r11	; 0x19
    562e:	a0 8e       	std	Z+24, r10	; 0x18
    5630:	93 8e       	std	Z+27, r9	; 0x1b
    5632:	82 8e       	std	Z+26, r8	; 0x1a
    5634:	8f 85       	ldd	r24, Y+15	; 0x0f
    5636:	84 8f       	std	Z+28, r24	; 0x1c
    5638:	88 89       	ldd	r24, Y+16	; 0x10
    563a:	85 8f       	std	Z+29, r24	; 0x1d
    563c:	89 89       	ldd	r24, Y+17	; 0x11
    563e:	86 8f       	std	Z+30, r24	; 0x1e
    5640:	8a 89       	ldd	r24, Y+18	; 0x12
    5642:	87 8f       	std	Z+31, r24	; 0x1f
    5644:	8b 89       	ldd	r24, Y+19	; 0x13
    5646:	80 a3       	std	Z+32, r24	; 0x20
    5648:	df 91       	pop	r29
    564a:	cf 91       	pop	r28
    564c:	1f 91       	pop	r17
    564e:	0f 91       	pop	r16
    5650:	ff 90       	pop	r15
    5652:	ef 90       	pop	r14
    5654:	df 90       	pop	r13
    5656:	cf 90       	pop	r12
    5658:	bf 90       	pop	r11
    565a:	af 90       	pop	r10
    565c:	9f 90       	pop	r9
    565e:	8f 90       	pop	r8
    5660:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

0000ac3c <_ZN14HardwareSerial5beginEm>:
    ac3c:	cf 92       	push	r12
    ac3e:	df 92       	push	r13
    ac40:	ef 92       	push	r14
    ac42:	ff 92       	push	r15
    ac44:	cf 93       	push	r28
    ac46:	df 93       	push	r29
    ac48:	ec 01       	movw	r28, r24
    ac4a:	6a 01       	movw	r12, r20
    ac4c:	7b 01       	movw	r14, r22
    ac4e:	41 15       	cp	r20, r1
    ac50:	81 ee       	ldi	r24, 0xE1	; 225
    ac52:	58 07       	cpc	r21, r24
    ac54:	61 05       	cpc	r22, r1
    ac56:	71 05       	cpc	r23, r1
    ac58:	01 f0       	breq	.+0      	; 0xac5a <_ZN14HardwareSerial5beginEm+0x1e>
    ac5a:	ec 89       	ldd	r30, Y+20	; 0x14
    ac5c:	fd 89       	ldd	r31, Y+21	; 0x15
    ac5e:	81 e0       	ldi	r24, 0x01	; 1
    ac60:	90 e0       	ldi	r25, 0x00	; 0
    ac62:	08 a0       	ldd	r0, Y+32	; 0x20
    ac64:	00 c0       	rjmp	.+0      	; 0xac66 <_ZN14HardwareSerial5beginEm+0x2a>
    ac66:	88 0f       	add	r24, r24
    ac68:	99 1f       	adc	r25, r25
    ac6a:	0a 94       	dec	r0
    ac6c:	02 f4       	brpl	.+0      	; 0xac6e <_ZN14HardwareSerial5beginEm+0x32>
    ac6e:	80 83       	st	Z, r24
    ac70:	60 e0       	ldi	r22, 0x00	; 0
    ac72:	79 e0       	ldi	r23, 0x09	; 9
    ac74:	8d e3       	ldi	r24, 0x3D	; 61
    ac76:	90 e0       	ldi	r25, 0x00	; 0
    ac78:	a7 01       	movw	r20, r14
    ac7a:	96 01       	movw	r18, r12
    ac7c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    ac80:	21 50       	subi	r18, 0x01	; 1
    ac82:	31 09       	sbc	r19, r1
    ac84:	41 09       	sbc	r20, r1
    ac86:	51 09       	sbc	r21, r1
    ac88:	56 95       	lsr	r21
    ac8a:	47 95       	ror	r20
    ac8c:	37 95       	ror	r19
    ac8e:	27 95       	ror	r18
    ac90:	21 15       	cp	r18, r1
    ac92:	80 e1       	ldi	r24, 0x10	; 16
    ac94:	38 07       	cpc	r19, r24
    ac96:	00 f0       	brcs	.+0      	; 0xac98 <_ZN14HardwareSerial5beginEm+0x5c>
    ac98:	ec 89       	ldd	r30, Y+20	; 0x14
    ac9a:	fd 89       	ldd	r31, Y+21	; 0x15
    ac9c:	10 82       	st	Z, r1
    ac9e:	60 e8       	ldi	r22, 0x80	; 128
    aca0:	74 e8       	ldi	r23, 0x84	; 132
    aca2:	8e e1       	ldi	r24, 0x1E	; 30
    aca4:	90 e0       	ldi	r25, 0x00	; 0
    aca6:	a7 01       	movw	r20, r14
    aca8:	96 01       	movw	r18, r12
    acaa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    acae:	21 50       	subi	r18, 0x01	; 1
    acb0:	31 09       	sbc	r19, r1
    acb2:	41 09       	sbc	r20, r1
    acb4:	51 09       	sbc	r21, r1
    acb6:	56 95       	lsr	r21
    acb8:	47 95       	ror	r20
    acba:	37 95       	ror	r19
    acbc:	27 95       	ror	r18
    acbe:	e8 89       	ldd	r30, Y+16	; 0x10
    acc0:	f9 89       	ldd	r31, Y+17	; 0x11
    acc2:	30 83       	st	Z, r19
    acc4:	ea 89       	ldd	r30, Y+18	; 0x12
    acc6:	fb 89       	ldd	r31, Y+19	; 0x13
    acc8:	20 83       	st	Z, r18
    acca:	19 a2       	std	Y+33, r1	; 0x21
    accc:	ee 89       	ldd	r30, Y+22	; 0x16
    acce:	ff 89       	ldd	r31, Y+23	; 0x17
    acd0:	40 81       	ld	r20, Z
    acd2:	81 e0       	ldi	r24, 0x01	; 1
    acd4:	90 e0       	ldi	r25, 0x00	; 0
    acd6:	9c 01       	movw	r18, r24
    acd8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    acda:	00 c0       	rjmp	.+0      	; 0xacdc <_ZN14HardwareSerial5beginEm+0xa0>
    acdc:	22 0f       	add	r18, r18
    acde:	33 1f       	adc	r19, r19
    ace0:	0a 94       	dec	r0
    ace2:	02 f4       	brpl	.+0      	; 0xace4 <_ZN14HardwareSerial5beginEm+0xa8>
    ace4:	42 2b       	or	r20, r18
    ace6:	40 83       	st	Z, r20
    ace8:	ee 89       	ldd	r30, Y+22	; 0x16
    acea:	ff 89       	ldd	r31, Y+23	; 0x17
    acec:	40 81       	ld	r20, Z
    acee:	9c 01       	movw	r18, r24
    acf0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    acf2:	00 c0       	rjmp	.+0      	; 0xacf4 <_ZN14HardwareSerial5beginEm+0xb8>
    acf4:	22 0f       	add	r18, r18
    acf6:	33 1f       	adc	r19, r19
    acf8:	0a 94       	dec	r0
    acfa:	02 f4       	brpl	.+0      	; 0xacfc <_ZN14HardwareSerial5beginEm+0xc0>
    acfc:	42 2b       	or	r20, r18
    acfe:	40 83       	st	Z, r20
    ad00:	ee 89       	ldd	r30, Y+22	; 0x16
    ad02:	ff 89       	ldd	r31, Y+23	; 0x17
    ad04:	40 81       	ld	r20, Z
    ad06:	9c 01       	movw	r18, r24
    ad08:	0e 8c       	ldd	r0, Y+30	; 0x1e
    ad0a:	00 c0       	rjmp	.+0      	; 0xad0c <_ZN14HardwareSerial5beginEm+0xd0>
    ad0c:	22 0f       	add	r18, r18
    ad0e:	33 1f       	adc	r19, r19
    ad10:	0a 94       	dec	r0
    ad12:	02 f4       	brpl	.+0      	; 0xad14 <_ZN14HardwareSerial5beginEm+0xd8>
    ad14:	42 2b       	or	r20, r18
    ad16:	40 83       	st	Z, r20
    ad18:	ee 89       	ldd	r30, Y+22	; 0x16
    ad1a:	ff 89       	ldd	r31, Y+23	; 0x17
    ad1c:	20 81       	ld	r18, Z
    ad1e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    ad20:	00 c0       	rjmp	.+0      	; 0xad22 <_ZN14HardwareSerial5beginEm+0xe6>
    ad22:	88 0f       	add	r24, r24
    ad24:	99 1f       	adc	r25, r25
    ad26:	0a 94       	dec	r0
    ad28:	02 f4       	brpl	.+0      	; 0xad2a <_ZN14HardwareSerial5beginEm+0xee>
    ad2a:	80 95       	com	r24
    ad2c:	82 23       	and	r24, r18
    ad2e:	80 83       	st	Z, r24
    ad30:	df 91       	pop	r29
    ad32:	cf 91       	pop	r28
    ad34:	ff 90       	pop	r15
    ad36:	ef 90       	pop	r14
    ad38:	df 90       	pop	r13
    ad3a:	cf 90       	pop	r12
    ad3c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEmh:

0001597a <_ZN14HardwareSerial5beginEmh>:
   1597a:	bf 92       	push	r11
   1597c:	cf 92       	push	r12
   1597e:	df 92       	push	r13
   15980:	ef 92       	push	r14
   15982:	ff 92       	push	r15
   15984:	cf 93       	push	r28
   15986:	df 93       	push	r29
   15988:	ec 01       	movw	r28, r24
   1598a:	6a 01       	movw	r12, r20
   1598c:	7b 01       	movw	r14, r22
   1598e:	b2 2e       	mov	r11, r18
   15990:	41 15       	cp	r20, r1
   15992:	81 ee       	ldi	r24, 0xE1	; 225
   15994:	58 07       	cpc	r21, r24
   15996:	61 05       	cpc	r22, r1
   15998:	71 05       	cpc	r23, r1
   1599a:	01 f0       	breq	.+0      	; 0x1599c <_ZN14HardwareSerial5beginEmh+0x22>
   1599c:	ec 89       	ldd	r30, Y+20	; 0x14
   1599e:	fd 89       	ldd	r31, Y+21	; 0x15
   159a0:	81 e0       	ldi	r24, 0x01	; 1
   159a2:	90 e0       	ldi	r25, 0x00	; 0
   159a4:	08 a0       	ldd	r0, Y+32	; 0x20
   159a6:	00 c0       	rjmp	.+0      	; 0x159a8 <_ZN14HardwareSerial5beginEmh+0x2e>
   159a8:	88 0f       	add	r24, r24
   159aa:	99 1f       	adc	r25, r25
   159ac:	0a 94       	dec	r0
   159ae:	02 f4       	brpl	.+0      	; 0x159b0 <_ZN14HardwareSerial5beginEmh+0x36>
   159b0:	80 83       	st	Z, r24
   159b2:	60 e0       	ldi	r22, 0x00	; 0
   159b4:	79 e0       	ldi	r23, 0x09	; 9
   159b6:	8d e3       	ldi	r24, 0x3D	; 61
   159b8:	90 e0       	ldi	r25, 0x00	; 0
   159ba:	a7 01       	movw	r20, r14
   159bc:	96 01       	movw	r18, r12
   159be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   159c2:	21 50       	subi	r18, 0x01	; 1
   159c4:	31 09       	sbc	r19, r1
   159c6:	41 09       	sbc	r20, r1
   159c8:	51 09       	sbc	r21, r1
   159ca:	56 95       	lsr	r21
   159cc:	47 95       	ror	r20
   159ce:	37 95       	ror	r19
   159d0:	27 95       	ror	r18
   159d2:	21 15       	cp	r18, r1
   159d4:	80 e1       	ldi	r24, 0x10	; 16
   159d6:	38 07       	cpc	r19, r24
   159d8:	00 f0       	brcs	.+0      	; 0x159da <_ZN14HardwareSerial5beginEmh+0x60>
   159da:	ec 89       	ldd	r30, Y+20	; 0x14
   159dc:	fd 89       	ldd	r31, Y+21	; 0x15
   159de:	10 82       	st	Z, r1
   159e0:	60 e8       	ldi	r22, 0x80	; 128
   159e2:	74 e8       	ldi	r23, 0x84	; 132
   159e4:	8e e1       	ldi	r24, 0x1E	; 30
   159e6:	90 e0       	ldi	r25, 0x00	; 0
   159e8:	a7 01       	movw	r20, r14
   159ea:	96 01       	movw	r18, r12
   159ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   159f0:	21 50       	subi	r18, 0x01	; 1
   159f2:	31 09       	sbc	r19, r1
   159f4:	41 09       	sbc	r20, r1
   159f6:	51 09       	sbc	r21, r1
   159f8:	56 95       	lsr	r21
   159fa:	47 95       	ror	r20
   159fc:	37 95       	ror	r19
   159fe:	27 95       	ror	r18
   15a00:	e8 89       	ldd	r30, Y+16	; 0x10
   15a02:	f9 89       	ldd	r31, Y+17	; 0x11
   15a04:	30 83       	st	Z, r19
   15a06:	ea 89       	ldd	r30, Y+18	; 0x12
   15a08:	fb 89       	ldd	r31, Y+19	; 0x13
   15a0a:	20 83       	st	Z, r18
   15a0c:	e8 8d       	ldd	r30, Y+24	; 0x18
   15a0e:	f9 8d       	ldd	r31, Y+25	; 0x19
   15a10:	b0 82       	st	Z, r11
   15a12:	ee 89       	ldd	r30, Y+22	; 0x16
   15a14:	ff 89       	ldd	r31, Y+23	; 0x17
   15a16:	40 81       	ld	r20, Z
   15a18:	81 e0       	ldi	r24, 0x01	; 1
   15a1a:	90 e0       	ldi	r25, 0x00	; 0
   15a1c:	9c 01       	movw	r18, r24
   15a1e:	0c 8c       	ldd	r0, Y+28	; 0x1c
   15a20:	00 c0       	rjmp	.+0      	; 0x15a22 <_ZN14HardwareSerial5beginEmh+0xa8>
   15a22:	22 0f       	add	r18, r18
   15a24:	33 1f       	adc	r19, r19
   15a26:	0a 94       	dec	r0
   15a28:	02 f4       	brpl	.+0      	; 0x15a2a <_ZN14HardwareSerial5beginEmh+0xb0>
   15a2a:	42 2b       	or	r20, r18
   15a2c:	40 83       	st	Z, r20
   15a2e:	ee 89       	ldd	r30, Y+22	; 0x16
   15a30:	ff 89       	ldd	r31, Y+23	; 0x17
   15a32:	40 81       	ld	r20, Z
   15a34:	9c 01       	movw	r18, r24
   15a36:	0d 8c       	ldd	r0, Y+29	; 0x1d
   15a38:	00 c0       	rjmp	.+0      	; 0x15a3a <_ZN14HardwareSerial5beginEmh+0xc0>
   15a3a:	22 0f       	add	r18, r18
   15a3c:	33 1f       	adc	r19, r19
   15a3e:	0a 94       	dec	r0
   15a40:	02 f4       	brpl	.+0      	; 0x15a42 <_ZN14HardwareSerial5beginEmh+0xc8>
   15a42:	42 2b       	or	r20, r18
   15a44:	40 83       	st	Z, r20
   15a46:	ee 89       	ldd	r30, Y+22	; 0x16
   15a48:	ff 89       	ldd	r31, Y+23	; 0x17
   15a4a:	40 81       	ld	r20, Z
   15a4c:	9c 01       	movw	r18, r24
   15a4e:	0e 8c       	ldd	r0, Y+30	; 0x1e
   15a50:	00 c0       	rjmp	.+0      	; 0x15a52 <_ZN14HardwareSerial5beginEmh+0xd8>
   15a52:	22 0f       	add	r18, r18
   15a54:	33 1f       	adc	r19, r19
   15a56:	0a 94       	dec	r0
   15a58:	02 f4       	brpl	.+0      	; 0x15a5a <_ZN14HardwareSerial5beginEmh+0xe0>
   15a5a:	42 2b       	or	r20, r18
   15a5c:	40 83       	st	Z, r20
   15a5e:	ee 89       	ldd	r30, Y+22	; 0x16
   15a60:	ff 89       	ldd	r31, Y+23	; 0x17
   15a62:	20 81       	ld	r18, Z
   15a64:	0f 8c       	ldd	r0, Y+31	; 0x1f
   15a66:	00 c0       	rjmp	.+0      	; 0x15a68 <_ZN14HardwareSerial5beginEmh+0xee>
   15a68:	88 0f       	add	r24, r24
   15a6a:	99 1f       	adc	r25, r25
   15a6c:	0a 94       	dec	r0
   15a6e:	02 f4       	brpl	.+0      	; 0x15a70 <_ZN14HardwareSerial5beginEmh+0xf6>
   15a70:	80 95       	com	r24
   15a72:	82 23       	and	r24, r18
   15a74:	80 83       	st	Z, r24
   15a76:	df 91       	pop	r29
   15a78:	cf 91       	pop	r28
   15a7a:	ff 90       	pop	r15
   15a7c:	ef 90       	pop	r14
   15a7e:	df 90       	pop	r13
   15a80:	cf 90       	pop	r12
   15a82:	bf 90       	pop	r11
   15a84:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

0002b400 <_ZN14HardwareSerial3endEv>:
   2b400:	cf 93       	push	r28
   2b402:	df 93       	push	r29
   2b404:	fc 01       	movw	r30, r24
   2b406:	86 85       	ldd	r24, Z+14	; 0x0e
   2b408:	97 85       	ldd	r25, Z+15	; 0x0f
   2b40a:	dc 01       	movw	r26, r24
   2b40c:	a0 5c       	subi	r26, 0xC0	; 192
   2b40e:	bf 4f       	sbci	r27, 0xFF	; 255
   2b410:	ec 01       	movw	r28, r24
   2b412:	ce 5b       	subi	r28, 0xBE	; 190
   2b414:	df 4f       	sbci	r29, 0xFF	; 255
   2b416:	4d 91       	ld	r20, X+
   2b418:	5c 91       	ld	r21, X
   2b41a:	11 97       	sbiw	r26, 0x01	; 1
   2b41c:	28 81       	ld	r18, Y
   2b41e:	39 81       	ldd	r19, Y+1	; 0x01
   2b420:	42 17       	cp	r20, r18
   2b422:	53 07       	cpc	r21, r19
   2b424:	01 f4       	brne	.+0      	; 0x2b426 <_ZN14HardwareSerial3endEv+0x26>
   2b426:	a6 89       	ldd	r26, Z+22	; 0x16
   2b428:	b7 89       	ldd	r27, Z+23	; 0x17
   2b42a:	4c 91       	ld	r20, X
   2b42c:	81 e0       	ldi	r24, 0x01	; 1
   2b42e:	90 e0       	ldi	r25, 0x00	; 0
   2b430:	9c 01       	movw	r18, r24
   2b432:	04 8c       	ldd	r0, Z+28	; 0x1c
   2b434:	00 c0       	rjmp	.+0      	; 0x2b436 <_ZN14HardwareSerial3endEv+0x36>
   2b436:	22 0f       	add	r18, r18
   2b438:	33 1f       	adc	r19, r19
   2b43a:	0a 94       	dec	r0
   2b43c:	02 f4       	brpl	.+0      	; 0x2b43e <_ZN14HardwareSerial3endEv+0x3e>
   2b43e:	20 95       	com	r18
   2b440:	24 23       	and	r18, r20
   2b442:	2c 93       	st	X, r18
   2b444:	a6 89       	ldd	r26, Z+22	; 0x16
   2b446:	b7 89       	ldd	r27, Z+23	; 0x17
   2b448:	4c 91       	ld	r20, X
   2b44a:	9c 01       	movw	r18, r24
   2b44c:	05 8c       	ldd	r0, Z+29	; 0x1d
   2b44e:	00 c0       	rjmp	.+0      	; 0x2b450 <_ZN14HardwareSerial3endEv+0x50>
   2b450:	22 0f       	add	r18, r18
   2b452:	33 1f       	adc	r19, r19
   2b454:	0a 94       	dec	r0
   2b456:	02 f4       	brpl	.+0      	; 0x2b458 <_ZN14HardwareSerial3endEv+0x58>
   2b458:	20 95       	com	r18
   2b45a:	24 23       	and	r18, r20
   2b45c:	2c 93       	st	X, r18
   2b45e:	a6 89       	ldd	r26, Z+22	; 0x16
   2b460:	b7 89       	ldd	r27, Z+23	; 0x17
   2b462:	4c 91       	ld	r20, X
   2b464:	9c 01       	movw	r18, r24
   2b466:	06 8c       	ldd	r0, Z+30	; 0x1e
   2b468:	00 c0       	rjmp	.+0      	; 0x2b46a <_ZN14HardwareSerial3endEv+0x6a>
   2b46a:	22 0f       	add	r18, r18
   2b46c:	33 1f       	adc	r19, r19
   2b46e:	0a 94       	dec	r0
   2b470:	02 f4       	brpl	.+0      	; 0x2b472 <_ZN14HardwareSerial3endEv+0x72>
   2b472:	20 95       	com	r18
   2b474:	24 23       	and	r18, r20
   2b476:	2c 93       	st	X, r18
   2b478:	a6 89       	ldd	r26, Z+22	; 0x16
   2b47a:	b7 89       	ldd	r27, Z+23	; 0x17
   2b47c:	2c 91       	ld	r18, X
   2b47e:	07 8c       	ldd	r0, Z+31	; 0x1f
   2b480:	00 c0       	rjmp	.+0      	; 0x2b482 <_ZN14HardwareSerial3endEv+0x82>
   2b482:	88 0f       	add	r24, r24
   2b484:	99 1f       	adc	r25, r25
   2b486:	0a 94       	dec	r0
   2b488:	02 f4       	brpl	.+0      	; 0x2b48a <_ZN14HardwareSerial3endEv+0x8a>
   2b48a:	80 95       	com	r24
   2b48c:	82 23       	and	r24, r18
   2b48e:	8c 93       	st	X, r24
   2b490:	84 85       	ldd	r24, Z+12	; 0x0c
   2b492:	95 85       	ldd	r25, Z+13	; 0x0d
   2b494:	fc 01       	movw	r30, r24
   2b496:	ee 5b       	subi	r30, 0xBE	; 190
   2b498:	ff 4f       	sbci	r31, 0xFF	; 255
   2b49a:	20 81       	ld	r18, Z
   2b49c:	31 81       	ldd	r19, Z+1	; 0x01
   2b49e:	32 97       	sbiw	r30, 0x02	; 2
   2b4a0:	31 83       	std	Z+1, r19	; 0x01
   2b4a2:	20 83       	st	Z, r18
   2b4a4:	df 91       	pop	r29
   2b4a6:	cf 91       	pop	r28
   2b4a8:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialcvbEv:

000568aa <_ZN14HardwareSerialcvbEv>:
   568aa:	81 e0       	ldi	r24, 0x01	; 1
   568ac:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I_rx_buffer:

000ad158 <_GLOBAL__sub_I_rx_buffer>:
   ad158:	10 92 00 00 	sts	0x0000, r1
   ad15c:	10 92 00 00 	sts	0x0000, r1
   ad160:	88 ee       	ldi	r24, 0xE8	; 232
   ad162:	93 e0       	ldi	r25, 0x03	; 3
   ad164:	a0 e0       	ldi	r26, 0x00	; 0
   ad166:	b0 e0       	ldi	r27, 0x00	; 0
   ad168:	80 93 00 00 	sts	0x0000, r24
   ad16c:	90 93 00 00 	sts	0x0000, r25
   ad170:	a0 93 00 00 	sts	0x0000, r26
   ad174:	b0 93 00 00 	sts	0x0000, r27
   ad178:	80 e0       	ldi	r24, 0x00	; 0
   ad17a:	90 e0       	ldi	r25, 0x00	; 0
   ad17c:	90 93 00 00 	sts	0x0000, r25
   ad180:	80 93 00 00 	sts	0x0000, r24
   ad184:	80 e0       	ldi	r24, 0x00	; 0
   ad186:	90 e0       	ldi	r25, 0x00	; 0
   ad188:	90 93 00 00 	sts	0x0000, r25
   ad18c:	80 93 00 00 	sts	0x0000, r24
   ad190:	80 e0       	ldi	r24, 0x00	; 0
   ad192:	90 e0       	ldi	r25, 0x00	; 0
   ad194:	90 93 00 00 	sts	0x0000, r25
   ad198:	80 93 00 00 	sts	0x0000, r24
   ad19c:	85 ec       	ldi	r24, 0xC5	; 197
   ad19e:	90 e0       	ldi	r25, 0x00	; 0
   ad1a0:	90 93 00 00 	sts	0x0000, r25
   ad1a4:	80 93 00 00 	sts	0x0000, r24
   ad1a8:	84 ec       	ldi	r24, 0xC4	; 196
   ad1aa:	90 e0       	ldi	r25, 0x00	; 0
   ad1ac:	90 93 00 00 	sts	0x0000, r25
   ad1b0:	80 93 00 00 	sts	0x0000, r24
   ad1b4:	80 ec       	ldi	r24, 0xC0	; 192
   ad1b6:	90 e0       	ldi	r25, 0x00	; 0
   ad1b8:	90 93 00 00 	sts	0x0000, r25
   ad1bc:	80 93 00 00 	sts	0x0000, r24
   ad1c0:	81 ec       	ldi	r24, 0xC1	; 193
   ad1c2:	90 e0       	ldi	r25, 0x00	; 0
   ad1c4:	90 93 00 00 	sts	0x0000, r25
   ad1c8:	80 93 00 00 	sts	0x0000, r24
   ad1cc:	82 ec       	ldi	r24, 0xC2	; 194
   ad1ce:	90 e0       	ldi	r25, 0x00	; 0
   ad1d0:	90 93 00 00 	sts	0x0000, r25
   ad1d4:	80 93 00 00 	sts	0x0000, r24
   ad1d8:	86 ec       	ldi	r24, 0xC6	; 198
   ad1da:	90 e0       	ldi	r25, 0x00	; 0
   ad1dc:	90 93 00 00 	sts	0x0000, r25
   ad1e0:	80 93 00 00 	sts	0x0000, r24
   ad1e4:	84 e0       	ldi	r24, 0x04	; 4
   ad1e6:	80 93 00 00 	sts	0x0000, r24
   ad1ea:	83 e0       	ldi	r24, 0x03	; 3
   ad1ec:	80 93 00 00 	sts	0x0000, r24
   ad1f0:	87 e0       	ldi	r24, 0x07	; 7
   ad1f2:	80 93 00 00 	sts	0x0000, r24
   ad1f6:	85 e0       	ldi	r24, 0x05	; 5
   ad1f8:	80 93 00 00 	sts	0x0000, r24
   ad1fc:	81 e0       	ldi	r24, 0x01	; 1
   ad1fe:	80 93 00 00 	sts	0x0000, r24
   ad202:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         000009fc  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      000013b4  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZNK9IPAddress7printToER5Print 00000074  00000000  00000000  00001df4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  00001e68  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  00001e7c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddressC2Em 00000014  00000000  00000000  00001e94  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddressC2EPKh 00000020  00000000  00000000  00001ea8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEPKh 00000016  00000000  00000000  00001ec8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN9IPAddressaSEm 0000000c  00000000  00000000  00001ede  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN9IPAddresseqEPKh 0000001e  00000000  00000000  00001eea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  00001f08  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .ctors        00000002  00000000  00000000  00001f26  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .rodata._ZTV9Printable 00000006  00000000  00000000  00001f28  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 18 .rodata._ZTV9IPAddress 00000006  00000000  00000000  00001f2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 19 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00001f34  2**0
                  ALLOC
 20 .comment      00000012  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
{
    _address[0] = first_octet;
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
    _address[1] = second_octet;
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
    _address[2] = third_octet;
  14:	6c 01       	movw	r12, r24
  16:	7b 01       	movw	r14, r22
    _address[3] = fourth_octet;
  18:	c0 e0       	ldi	r28, 0x00	; 0
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	00 e0       	ldi	r16, 0x00	; 0
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	f6 01       	movw	r30, r12
  22:	ec 0f       	add	r30, r28
  24:	fd 1f       	adc	r31, r29
  26:	4a e0       	ldi	r20, 0x0A	; 10
  28:	50 e0       	ldi	r21, 0x00	; 0
  2a:	62 81       	ldd	r22, Z+2	; 0x02
  2c:	c7 01       	movw	r24, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  32:	5c 01       	movw	r10, r24
  34:	6e e2       	ldi	r22, 0x2E	; 46
  36:	c7 01       	movw	r24, r14
  38:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  3c:	8a 0d       	add	r24, r10
  3e:	9b 1d       	adc	r25, r11
  40:	08 0f       	add	r16, r24
  42:	19 1f       	adc	r17, r25
  44:	21 96       	adiw	r28, 0x01	; 1
  46:	c3 30       	cpi	r28, 0x03	; 3
  48:	d1 05       	cpc	r29, r1
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZNK9IPAddress7printToER5Print+0x4c>
  4c:	4a e0       	ldi	r20, 0x0A	; 10
  4e:	50 e0       	ldi	r21, 0x00	; 0
  50:	f6 01       	movw	r30, r12
  52:	65 81       	ldd	r22, Z+5	; 0x05
  54:	c7 01       	movw	r24, r14
  56:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  5a:	80 0f       	add	r24, r16
  5c:	91 1f       	adc	r25, r17
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	cf 90       	pop	r12
  6e:	bf 90       	pop	r11
  70:	af 90       	pop	r10
  72:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000074 <_ZN9IPAddressC1Ev>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	31 83       	std	Z+1, r19	; 0x01
  7c:	20 83       	st	Z, r18
  7e:	12 82       	std	Z+2, r1	; 0x02
  80:	13 82       	std	Z+3, r1	; 0x03
  82:	14 82       	std	Z+4, r1	; 0x04
  84:	15 82       	std	Z+5, r1	; 0x05
  86:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

000000fc <_ZN9IPAddressC1Ehhhh>:
  fc:	0f 93       	push	r16
  fe:	fc 01       	movw	r30, r24
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
 108:	62 83       	std	Z+2, r22	; 0x02
 10a:	43 83       	std	Z+3, r20	; 0x03
 10c:	24 83       	std	Z+4, r18	; 0x04
 10e:	05 83       	std	Z+5, r16	; 0x05
 110:	0f 91       	pop	r16
 112:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000210 <_ZN9IPAddressC1Em>:
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	31 83       	std	Z+1, r19	; 0x01
 218:	20 83       	st	Z, r18
 21a:	42 83       	std	Z+2, r20	; 0x02
 21c:	53 83       	std	Z+3, r21	; 0x03
 21e:	64 83       	std	Z+4, r22	; 0x04
 220:	75 83       	std	Z+5, r23	; 0x05
 222:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000434 <_ZN9IPAddressC1EPKh>:
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	31 83       	std	Z+1, r19	; 0x01
 43c:	20 83       	st	Z, r18
 43e:	fb 01       	movw	r30, r22
 440:	40 81       	ld	r20, Z
 442:	51 81       	ldd	r21, Z+1	; 0x01
 444:	62 81       	ldd	r22, Z+2	; 0x02
 446:	73 81       	ldd	r23, Z+3	; 0x03
 448:	fc 01       	movw	r30, r24
 44a:	42 83       	std	Z+2, r20	; 0x02
 44c:	53 83       	std	Z+3, r21	; 0x03
 44e:	64 83       	std	Z+4, r22	; 0x04
 450:	75 83       	std	Z+5, r23	; 0x05
 452:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000888 <_ZN9IPAddressaSEPKh>:
 888:	fb 01       	movw	r30, r22
 88a:	40 81       	ld	r20, Z
 88c:	51 81       	ldd	r21, Z+1	; 0x01
 88e:	62 81       	ldd	r22, Z+2	; 0x02
 890:	73 81       	ldd	r23, Z+3	; 0x03
 892:	fc 01       	movw	r30, r24
 894:	42 83       	std	Z+2, r20	; 0x02
 896:	53 83       	std	Z+3, r21	; 0x03
 898:	64 83       	std	Z+4, r22	; 0x04
 89a:	75 83       	std	Z+5, r23	; 0x05
 89c:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00001126 <_ZN9IPAddressaSEm>:
    1126:	fc 01       	movw	r30, r24
    1128:	42 83       	std	Z+2, r20	; 0x02
    112a:	53 83       	std	Z+3, r21	; 0x03
    112c:	64 83       	std	Z+4, r22	; 0x04
    112e:	75 83       	std	Z+5, r23	; 0x05
    1130:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00002258 <_ZN9IPAddresseqEPKh>:
    2258:	9b 01       	movw	r18, r22
    225a:	bc 01       	movw	r22, r24
    225c:	6e 5f       	subi	r22, 0xFE	; 254
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	44 e0       	ldi	r20, 0x04	; 4
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	c9 01       	movw	r24, r18
    2266:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	89 2b       	or	r24, r25
    226e:	01 f0       	breq	.+0      	; 0x2270 <_ZN9IPAddresseqEPKh+0x18>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	82 2f       	mov	r24, r18
    2274:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev:

000044ce <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	90 93 00 00 	sts	0x0000, r25
    44d6:	80 93 00 00 	sts	0x0000, r24
    44da:	10 92 00 00 	sts	0x0000, r1
    44de:	10 92 00 00 	sts	0x0000, r1
    44e2:	10 92 00 00 	sts	0x0000, r1
    44e6:	10 92 00 00 	sts	0x0000, r1
    44ea:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         0000135c  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      0000183e  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN5Print5writeEPKhj 00000050  00000000  00000000  00002bde  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5writeEPKc 0000002c  00000000  00000000  00002c2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printEPK19__FlashStringHelper 0000004a  00000000  00000000  00002c5a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Print5printERK6String 0000006a  00000000  00000000  00002ca4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN5Print5printEPKc 00000004  00000000  00000000  00002d0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print5printEc 0000000e  00000000  00000000  00002d12  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN5Print5printERK9Printable 00000014  00000000  00000000  00002d20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN5Print7printlnEv 00000028  00000000  00000000  00002d34  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000024  00000000  00000000  00002d5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnERK6String 00000024  00000000  00000000  00002d80  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnEPKc 00000024  00000000  00000000  00002da4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print7printlnEc 00000024  00000000  00000000  00002dc8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnERK9Printable 00000024  00000000  00000000  00002dec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print11printNumberEmh 000000b2  00000000  00000000  00002e10  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print5printEli 00000094  00000000  00000000  00002ec2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEii 00000010  00000000  00000000  00002f56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print7printlnEii 00000030  00000000  00000000  00002f66  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print7printlnEli 00000024  00000000  00000000  00002f96  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print5printEmi 0000001a  00000000  00000000  00002fba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEhi 0000000e  00000000  00000000  00002fd4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print7printlnEhi 0000002e  00000000  00000000  00002fe2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print5printEji 0000000c  00000000  00000000  00003010  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print7printlnEji 0000002c  00000000  00000000  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEmi 00000024  00000000  00000000  00003048  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .rodata.str1.1 0000000e  00000000  00000000  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 32 .text._ZN5Print10printFloatEdh 000001d6  00000000  00000000  0000307a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN5Print5printEdi 00000004  00000000  00000000  00003250  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN5Print7printlnEdi 00000024  00000000  00000000  00003254  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .rodata._ZTV5Print 00000008  00000000  00000000  00003278  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 36 .comment      00000012  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6c 01       	movw	r12, r24
  12:	7a 01       	movw	r14, r20
  14:	eb 01       	movw	r28, r22
  return n;
}
  16:	e6 0e       	add	r14, r22
  18:	f7 1e       	adc	r15, r23
  1a:	00 e0       	ldi	r16, 0x00	; 0
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	ce 15       	cp	r28, r14
  20:	df 05       	cpc	r29, r15
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN5Print5writeEPKhj+0x24>
  24:	69 91       	ld	r22, Y+
  26:	d6 01       	movw	r26, r12
  28:	ed 91       	ld	r30, X+
  2a:	fc 91       	ld	r31, X
  2c:	01 90       	ld	r0, Z+
  2e:	f0 81       	ld	r31, Z
  30:	e0 2d       	mov	r30, r0
  32:	c6 01       	movw	r24, r12
  34:	09 95       	icall
  36:	08 0f       	add	r16, r24
  38:	19 1f       	adc	r17, r25
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN5Print5writeEPKhj+0x3c>
  3c:	c8 01       	movw	r24, r16
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	ff 90       	pop	r15
  48:	ef 90       	pop	r14
  4a:	df 90       	pop	r13
  4c:	cf 90       	pop	r12
  4e:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000050 <_ZN5Print5writeEPKc>:
  50:	61 15       	cp	r22, r1
  52:	71 05       	cpc	r23, r1
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN5Print5writeEPKc+0x6>
  56:	db 01       	movw	r26, r22
  58:	0d 90       	ld	r0, X+
  5a:	00 20       	and	r0, r0
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN5Print5writeEPKc+0xe>
  5e:	ad 01       	movw	r20, r26
  60:	41 50       	subi	r20, 0x01	; 1
  62:	51 09       	sbc	r21, r1
  64:	46 1b       	sub	r20, r22
  66:	57 0b       	sbc	r21, r23
  68:	dc 01       	movw	r26, r24
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	02 80       	ldd	r0, Z+2	; 0x02
  70:	f3 81       	ldd	r31, Z+3	; 0x03
  72:	e0 2d       	mov	r30, r0
  74:	09 94       	ijmp
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

000000cc <_ZN5Print5printEPK19__FlashStringHelper>:
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	8c 01       	movw	r16, r24
  da:	fb 01       	movw	r30, r22
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	64 91       	lpm	r22, Z
  e2:	7f 01       	movw	r14, r30
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	e8 1a       	sub	r14, r24
  e8:	f8 0a       	sbc	r15, r24
  ea:	66 23       	and	r22, r22
  ec:	01 f0       	breq	.+0      	; 0xee <_ZN5Print5printEPK19__FlashStringHelper+0x22>
  ee:	d8 01       	movw	r26, r16
  f0:	ed 91       	ld	r30, X+
  f2:	fc 91       	ld	r31, X
  f4:	01 90       	ld	r0, Z+
  f6:	f0 81       	ld	r31, Z
  f8:	e0 2d       	mov	r30, r0
  fa:	c8 01       	movw	r24, r16
  fc:	09 95       	icall
  fe:	c8 0f       	add	r28, r24
 100:	d9 1f       	adc	r29, r25
 102:	f7 01       	movw	r30, r14
 104:	00 c0       	rjmp	.+0      	; 0x106 <_ZN5Print5printEPK19__FlashStringHelper+0x3a>
 106:	ce 01       	movw	r24, r28
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

000001e2 <_ZN5Print5printERK6String>:
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	7c 01       	movw	r14, r24
 1f8:	6b 01       	movw	r12, r22
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	d6 01       	movw	r26, r12
 204:	14 96       	adiw	r26, 0x04	; 4
 206:	8d 91       	ld	r24, X+
 208:	9c 91       	ld	r25, X
 20a:	15 97       	sbiw	r26, 0x05	; 5
 20c:	c8 17       	cp	r28, r24
 20e:	d9 07       	cpc	r29, r25
 210:	00 f4       	brcc	.+0      	; 0x212 <_ZN5Print5printERK6String+0x30>
 212:	d7 01       	movw	r26, r14
 214:	ed 91       	ld	r30, X+
 216:	fc 91       	ld	r31, X
 218:	a0 80       	ld	r10, Z
 21a:	b1 80       	ldd	r11, Z+1	; 0x01
 21c:	be 01       	movw	r22, r28
 21e:	c6 01       	movw	r24, r12
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	68 2f       	mov	r22, r24
 226:	c7 01       	movw	r24, r14
 228:	f5 01       	movw	r30, r10
 22a:	09 95       	icall
 22c:	08 0f       	add	r16, r24
 22e:	19 1f       	adc	r17, r25
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	00 c0       	rjmp	.+0      	; 0x234 <_ZN5Print5printERK6String+0x52>
 234:	c8 01       	movw	r24, r16
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

0000042e <_ZN5Print5printEPKc>:
 42e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print5printEc:

00000860 <_ZN5Print5printEc>:
 860:	dc 01       	movw	r26, r24
 862:	ed 91       	ld	r30, X+
 864:	fc 91       	ld	r31, X
 866:	01 90       	ld	r0, Z+
 868:	f0 81       	ld	r31, Z
 86a:	e0 2d       	mov	r30, r0
 86c:	09 94       	ijmp

Disassembly of section .text._ZN5Print5printERK9Printable:

000010ce <_ZN5Print5printERK9Printable>:
    10ce:	db 01       	movw	r26, r22
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	11 97       	sbiw	r26, 0x01	; 1
    10d6:	01 90       	ld	r0, Z+
    10d8:	f0 81       	ld	r31, Z
    10da:	e0 2d       	mov	r30, r0
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	09 94       	ijmp

Disassembly of section .text._ZN5Print7printlnEv:

000021b0 <_ZN5Print7printlnEv>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	ec 01       	movw	r28, r24
    21ba:	6d e0       	ldi	r22, 0x0D	; 13
    21bc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    21c0:	8c 01       	movw	r16, r24
    21c2:	6a e0       	ldi	r22, 0x0A	; 10
    21c4:	ce 01       	movw	r24, r28
    21c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    21ca:	80 0f       	add	r24, r16
    21cc:	91 1f       	adc	r25, r17
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00004388 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4388:	0f 93       	push	r16
    438a:	1f 93       	push	r17
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	ec 01       	movw	r28, r24
    4392:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    4396:	8c 01       	movw	r16, r24
    4398:	ce 01       	movw	r24, r28
    439a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    439e:	80 0f       	add	r24, r16
    43a0:	91 1f       	adc	r25, r17
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00008734 <_ZN5Print7printlnERK6String>:
    8734:	0f 93       	push	r16
    8736:	1f 93       	push	r17
    8738:	cf 93       	push	r28
    873a:	df 93       	push	r29
    873c:	ec 01       	movw	r28, r24
    873e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    8742:	8c 01       	movw	r16, r24
    8744:	ce 01       	movw	r24, r28
    8746:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    874a:	80 0f       	add	r24, r16
    874c:	91 1f       	adc	r25, r17
    874e:	df 91       	pop	r29
    8750:	cf 91       	pop	r28
    8752:	1f 91       	pop	r17
    8754:	0f 91       	pop	r16
    8756:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00010e8c <_ZN5Print7printlnEPKc>:
   10e8c:	0f 93       	push	r16
   10e8e:	1f 93       	push	r17
   10e90:	cf 93       	push	r28
   10e92:	df 93       	push	r29
   10e94:	ec 01       	movw	r28, r24
   10e96:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   10e9a:	8c 01       	movw	r16, r24
   10e9c:	ce 01       	movw	r24, r28
   10e9e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   10ea2:	80 0f       	add	r24, r16
   10ea4:	91 1f       	adc	r25, r17
   10ea6:	df 91       	pop	r29
   10ea8:	cf 91       	pop	r28
   10eaa:	1f 91       	pop	r17
   10eac:	0f 91       	pop	r16
   10eae:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00021d3c <_ZN5Print7printlnEc>:
   21d3c:	0f 93       	push	r16
   21d3e:	1f 93       	push	r17
   21d40:	cf 93       	push	r28
   21d42:	df 93       	push	r29
   21d44:	ec 01       	movw	r28, r24
   21d46:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   21d4a:	8c 01       	movw	r16, r24
   21d4c:	ce 01       	movw	r24, r28
   21d4e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   21d52:	80 0f       	add	r24, r16
   21d54:	91 1f       	adc	r25, r17
   21d56:	df 91       	pop	r29
   21d58:	cf 91       	pop	r28
   21d5a:	1f 91       	pop	r17
   21d5c:	0f 91       	pop	r16
   21d5e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00043a9c <_ZN5Print7printlnERK9Printable>:
   43a9c:	0f 93       	push	r16
   43a9e:	1f 93       	push	r17
   43aa0:	cf 93       	push	r28
   43aa2:	df 93       	push	r29
   43aa4:	ec 01       	movw	r28, r24
   43aa6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   43aaa:	8c 01       	movw	r16, r24
   43aac:	ce 01       	movw	r24, r28
   43aae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   43ab2:	80 0f       	add	r24, r16
   43ab4:	91 1f       	adc	r25, r17
   43ab6:	df 91       	pop	r29
   43ab8:	cf 91       	pop	r28
   43aba:	1f 91       	pop	r17
   43abc:	0f 91       	pop	r16
   43abe:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

0008755c <_ZN5Print11printNumberEmh>:
   8755c:	8f 92       	push	r8
   8755e:	9f 92       	push	r9
   87560:	af 92       	push	r10
   87562:	bf 92       	push	r11
   87564:	cf 92       	push	r12
   87566:	df 92       	push	r13
   87568:	ef 92       	push	r14
   8756a:	ff 92       	push	r15
   8756c:	0f 93       	push	r16
   8756e:	1f 93       	push	r17
   87570:	cf 93       	push	r28
   87572:	df 93       	push	r29
   87574:	cd b7       	in	r28, 0x3d	; 61
   87576:	de b7       	in	r29, 0x3e	; 62
   87578:	a1 97       	sbiw	r28, 0x21	; 33
   8757a:	0f b6       	in	r0, 0x3f	; 63
   8757c:	f8 94       	cli
   8757e:	de bf       	out	0x3e, r29	; 62
   87580:	0f be       	out	0x3f, r0	; 63
   87582:	cd bf       	out	0x3d, r28	; 61
   87584:	7c 01       	movw	r14, r24
   87586:	c4 2e       	mov	r12, r20
   87588:	e5 2f       	mov	r30, r21
   8758a:	cb 01       	movw	r24, r22
   8758c:	d2 2e       	mov	r13, r18
   8758e:	19 a2       	std	Y+33, r1	; 0x21
   87590:	21 e0       	ldi	r18, 0x01	; 1
   87592:	2d 15       	cp	r18, r13
   87594:	00 f0       	brcs	.+0      	; 0x87596 <_ZN5Print11printNumberEmh+0x3a>
   87596:	2a e0       	ldi	r18, 0x0A	; 10
   87598:	d2 2e       	mov	r13, r18
   8759a:	8e 01       	movw	r16, r28
   8759c:	0f 5d       	subi	r16, 0xDF	; 223
   8759e:	1f 4f       	sbci	r17, 0xFF	; 255
   875a0:	8d 2c       	mov	r8, r13
   875a2:	91 2c       	mov	r9, r1
   875a4:	a1 2c       	mov	r10, r1
   875a6:	b1 2c       	mov	r11, r1
   875a8:	6c 2d       	mov	r22, r12
   875aa:	7e 2f       	mov	r23, r30
   875ac:	a5 01       	movw	r20, r10
   875ae:	94 01       	movw	r18, r8
   875b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   875b4:	8c 2d       	mov	r24, r12
   875b6:	d2 9e       	mul	r13, r18
   875b8:	80 19       	sub	r24, r0
   875ba:	11 24       	eor	r1, r1
   875bc:	01 50       	subi	r16, 0x01	; 1
   875be:	11 09       	sbc	r17, r1
   875c0:	8a 30       	cpi	r24, 0x0A	; 10
   875c2:	04 f4       	brge	.+0      	; 0x875c4 <_ZN5Print11printNumberEmh+0x68>
   875c4:	80 5d       	subi	r24, 0xD0	; 208
   875c6:	00 c0       	rjmp	.+0      	; 0x875c8 <_ZN5Print11printNumberEmh+0x6c>
   875c8:	89 5c       	subi	r24, 0xC9	; 201
   875ca:	f8 01       	movw	r30, r16
   875cc:	80 83       	st	Z, r24
   875ce:	21 15       	cp	r18, r1
   875d0:	31 05       	cpc	r19, r1
   875d2:	41 05       	cpc	r20, r1
   875d4:	51 05       	cpc	r21, r1
   875d6:	01 f0       	breq	.+0      	; 0x875d8 <_ZN5Print11printNumberEmh+0x7c>
   875d8:	c2 2e       	mov	r12, r18
   875da:	e3 2f       	mov	r30, r19
   875dc:	ca 01       	movw	r24, r20
   875de:	00 c0       	rjmp	.+0      	; 0x875e0 <_ZN5Print11printNumberEmh+0x84>
   875e0:	b8 01       	movw	r22, r16
   875e2:	c7 01       	movw	r24, r14
   875e4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   875e8:	a1 96       	adiw	r28, 0x21	; 33
   875ea:	0f b6       	in	r0, 0x3f	; 63
   875ec:	f8 94       	cli
   875ee:	de bf       	out	0x3e, r29	; 62
   875f0:	0f be       	out	0x3f, r0	; 63
   875f2:	cd bf       	out	0x3d, r28	; 61
   875f4:	df 91       	pop	r29
   875f6:	cf 91       	pop	r28
   875f8:	1f 91       	pop	r17
   875fa:	0f 91       	pop	r16
   875fc:	ff 90       	pop	r15
   875fe:	ef 90       	pop	r14
   87600:	df 90       	pop	r13
   87602:	cf 90       	pop	r12
   87604:	bf 90       	pop	r11
   87606:	af 90       	pop	r10
   87608:	9f 90       	pop	r9
   8760a:	8f 90       	pop	r8
   8760c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

0010eb6a <_ZN5Print5printEli>:
  10eb6a:	cf 92       	push	r12
  10eb6c:	df 92       	push	r13
  10eb6e:	ef 92       	push	r14
  10eb70:	ff 92       	push	r15
  10eb72:	0f 93       	push	r16
  10eb74:	1f 93       	push	r17
  10eb76:	cf 93       	push	r28
  10eb78:	df 93       	push	r29
  10eb7a:	ec 01       	movw	r28, r24
  10eb7c:	6a 01       	movw	r12, r20
  10eb7e:	7b 01       	movw	r14, r22
  10eb80:	21 15       	cp	r18, r1
  10eb82:	31 05       	cpc	r19, r1
  10eb84:	01 f4       	brne	.+0      	; 0x10eb86 <_ZN5Print5printEli+0x1c>
  10eb86:	e8 81       	ld	r30, Y
  10eb88:	f9 81       	ldd	r31, Y+1	; 0x01
  10eb8a:	01 90       	ld	r0, Z+
  10eb8c:	f0 81       	ld	r31, Z
  10eb8e:	e0 2d       	mov	r30, r0
  10eb90:	64 2f       	mov	r22, r20
  10eb92:	df 91       	pop	r29
  10eb94:	cf 91       	pop	r28
  10eb96:	1f 91       	pop	r17
  10eb98:	0f 91       	pop	r16
  10eb9a:	ff 90       	pop	r15
  10eb9c:	ef 90       	pop	r14
  10eb9e:	df 90       	pop	r13
  10eba0:	cf 90       	pop	r12
  10eba2:	09 94       	ijmp
  10eba4:	2a 30       	cpi	r18, 0x0A	; 10
  10eba6:	31 05       	cpc	r19, r1
  10eba8:	01 f4       	brne	.+0      	; 0x10ebaa <_ZN5Print5printEli+0x40>
  10ebaa:	77 ff       	sbrs	r23, 7
  10ebac:	00 c0       	rjmp	.+0      	; 0x10ebae <_ZN5Print5printEli+0x44>
  10ebae:	6d e2       	ldi	r22, 0x2D	; 45
  10ebb0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  10ebb4:	8c 01       	movw	r16, r24
  10ebb6:	44 27       	eor	r20, r20
  10ebb8:	55 27       	eor	r21, r21
  10ebba:	ba 01       	movw	r22, r20
  10ebbc:	4c 19       	sub	r20, r12
  10ebbe:	5d 09       	sbc	r21, r13
  10ebc0:	6e 09       	sbc	r22, r14
  10ebc2:	7f 09       	sbc	r23, r15
  10ebc4:	2a e0       	ldi	r18, 0x0A	; 10
  10ebc6:	ce 01       	movw	r24, r28
  10ebc8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  10ebcc:	80 0f       	add	r24, r16
  10ebce:	91 1f       	adc	r25, r17
  10ebd0:	df 91       	pop	r29
  10ebd2:	cf 91       	pop	r28
  10ebd4:	1f 91       	pop	r17
  10ebd6:	0f 91       	pop	r16
  10ebd8:	ff 90       	pop	r15
  10ebda:	ef 90       	pop	r14
  10ebdc:	df 90       	pop	r13
  10ebde:	cf 90       	pop	r12
  10ebe0:	08 95       	ret
  10ebe2:	2a e0       	ldi	r18, 0x0A	; 10
  10ebe4:	b7 01       	movw	r22, r14
  10ebe6:	a6 01       	movw	r20, r12
  10ebe8:	ce 01       	movw	r24, r28
  10ebea:	df 91       	pop	r29
  10ebec:	cf 91       	pop	r28
  10ebee:	1f 91       	pop	r17
  10ebf0:	0f 91       	pop	r16
  10ebf2:	ff 90       	pop	r15
  10ebf4:	ef 90       	pop	r14
  10ebf6:	df 90       	pop	r13
  10ebf8:	cf 90       	pop	r12
  10ebfa:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print5printEii:

0021d768 <_ZN5Print5printEii>:
  21d768:	9a 01       	movw	r18, r20
  21d76a:	ab 01       	movw	r20, r22
  21d76c:	66 27       	eor	r22, r22
  21d76e:	57 fd       	sbrc	r21, 7
  21d770:	60 95       	com	r22
  21d772:	76 2f       	mov	r23, r22
  21d774:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEii:

0043aee0 <_ZN5Print7printlnEii>:
  43aee0:	0f 93       	push	r16
  43aee2:	1f 93       	push	r17
  43aee4:	cf 93       	push	r28
  43aee6:	df 93       	push	r29
  43aee8:	ec 01       	movw	r28, r24
  43aeea:	9a 01       	movw	r18, r20
  43aeec:	ab 01       	movw	r20, r22
  43aeee:	66 27       	eor	r22, r22
  43aef0:	57 fd       	sbrc	r21, 7
  43aef2:	60 95       	com	r22
  43aef4:	76 2f       	mov	r23, r22
  43aef6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  43aefa:	8c 01       	movw	r16, r24
  43aefc:	ce 01       	movw	r24, r28
  43aefe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  43af02:	80 0f       	add	r24, r16
  43af04:	91 1f       	adc	r25, r17
  43af06:	df 91       	pop	r29
  43af08:	cf 91       	pop	r28
  43af0a:	1f 91       	pop	r17
  43af0c:	0f 91       	pop	r16
  43af0e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00875df0 <_ZN5Print7printlnEli>:
  875df0:	0f 93       	push	r16
  875df2:	1f 93       	push	r17
  875df4:	cf 93       	push	r28
  875df6:	df 93       	push	r29
  875df8:	ec 01       	movw	r28, r24
  875dfa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  875dfe:	8c 01       	movw	r16, r24
  875e00:	ce 01       	movw	r24, r28
  875e02:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  875e06:	80 0f       	add	r24, r16
  875e08:	91 1f       	adc	r25, r17
  875e0a:	df 91       	pop	r29
  875e0c:	cf 91       	pop	r28
  875e0e:	1f 91       	pop	r17
  875e10:	0f 91       	pop	r16
  875e12:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

010ebc04 <_ZN5Print5printEmi>:
 10ebc04:	21 15       	cp	r18, r1
 10ebc06:	31 05       	cpc	r19, r1
 10ebc08:	01 f4       	brne	.+0      	; 0x10ebc0a <_ZN5Print5printEmi+0x6>
 10ebc0a:	dc 01       	movw	r26, r24
 10ebc0c:	ed 91       	ld	r30, X+
 10ebc0e:	fc 91       	ld	r31, X
 10ebc10:	01 90       	ld	r0, Z+
 10ebc12:	f0 81       	ld	r31, Z
 10ebc14:	e0 2d       	mov	r30, r0
 10ebc16:	64 2f       	mov	r22, r20
 10ebc18:	09 94       	ijmp
 10ebc1a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print5printEhi:

021d7822 <_ZN5Print5printEhi>:
 21d7822:	9a 01       	movw	r18, r20
 21d7824:	46 2f       	mov	r20, r22
 21d7826:	50 e0       	ldi	r21, 0x00	; 0
 21d7828:	60 e0       	ldi	r22, 0x00	; 0
 21d782a:	70 e0       	ldi	r23, 0x00	; 0
 21d782c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEhi:

043af052 <_ZN5Print7printlnEhi>:
 43af052:	0f 93       	push	r16
 43af054:	1f 93       	push	r17
 43af056:	cf 93       	push	r28
 43af058:	df 93       	push	r29
 43af05a:	ec 01       	movw	r28, r24
 43af05c:	9a 01       	movw	r18, r20
 43af05e:	46 2f       	mov	r20, r22
 43af060:	50 e0       	ldi	r21, 0x00	; 0
 43af062:	60 e0       	ldi	r22, 0x00	; 0
 43af064:	70 e0       	ldi	r23, 0x00	; 0
 43af066:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 43af06a:	8c 01       	movw	r16, r24
 43af06c:	ce 01       	movw	r24, r28
 43af06e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 43af072:	80 0f       	add	r24, r16
 43af074:	91 1f       	adc	r25, r17
 43af076:	df 91       	pop	r29
 43af078:	cf 91       	pop	r28
 43af07a:	1f 91       	pop	r17
 43af07c:	0f 91       	pop	r16
 43af07e:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

0875e0d2 <_ZN5Print5printEji>:
 875e0d2:	9a 01       	movw	r18, r20
 875e0d4:	ab 01       	movw	r20, r22
 875e0d6:	60 e0       	ldi	r22, 0x00	; 0
 875e0d8:	70 e0       	ldi	r23, 0x00	; 0
 875e0da:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEji:

10ebc1b0 <_ZN5Print7printlnEji>:
10ebc1b0:	0f 93       	push	r16
10ebc1b2:	1f 93       	push	r17
10ebc1b4:	cf 93       	push	r28
10ebc1b6:	df 93       	push	r29
10ebc1b8:	ec 01       	movw	r28, r24
10ebc1ba:	9a 01       	movw	r18, r20
10ebc1bc:	ab 01       	movw	r20, r22
10ebc1be:	60 e0       	ldi	r22, 0x00	; 0
10ebc1c0:	70 e0       	ldi	r23, 0x00	; 0
10ebc1c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
10ebc1c6:	8c 01       	movw	r16, r24
10ebc1c8:	ce 01       	movw	r24, r28
10ebc1ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
10ebc1ce:	80 0f       	add	r24, r16
10ebc1d0:	91 1f       	adc	r25, r17
10ebc1d2:	df 91       	pop	r29
10ebc1d4:	cf 91       	pop	r28
10ebc1d6:	1f 91       	pop	r17
10ebc1d8:	0f 91       	pop	r16
10ebc1da:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

21d7838c <_ZN5Print7printlnEmi>:
21d7838c:	0f 93       	push	r16
21d7838e:	1f 93       	push	r17
21d78390:	cf 93       	push	r28
21d78392:	df 93       	push	r29
21d78394:	ec 01       	movw	r28, r24
21d78396:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21d7839a:	8c 01       	movw	r16, r24
21d7839c:	ce 01       	movw	r24, r28
21d7839e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21d783a2:	80 0f       	add	r24, r16
21d783a4:	91 1f       	adc	r25, r17
21d783a6:	df 91       	pop	r29
21d783a8:	cf 91       	pop	r28
21d783aa:	1f 91       	pop	r17
21d783ac:	0f 91       	pop	r16
21d783ae:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

875e0e86 <_ZN5Print10printFloatEdh>:
875e0e86:	4f 92       	push	r4
875e0e88:	5f 92       	push	r5
875e0e8a:	6f 92       	push	r6
875e0e8c:	7f 92       	push	r7
875e0e8e:	8f 92       	push	r8
875e0e90:	9f 92       	push	r9
875e0e92:	af 92       	push	r10
875e0e94:	bf 92       	push	r11
875e0e96:	cf 92       	push	r12
875e0e98:	df 92       	push	r13
875e0e9a:	ef 92       	push	r14
875e0e9c:	ff 92       	push	r15
875e0e9e:	0f 93       	push	r16
875e0ea0:	1f 93       	push	r17
875e0ea2:	cf 93       	push	r28
875e0ea4:	df 93       	push	r29
875e0ea6:	ec 01       	movw	r28, r24
875e0ea8:	6a 01       	movw	r12, r20
875e0eaa:	7b 01       	movw	r14, r22
875e0eac:	b2 2e       	mov	r11, r18
875e0eae:	9a 01       	movw	r18, r20
875e0eb0:	ab 01       	movw	r20, r22
875e0eb2:	c7 01       	movw	r24, r14
875e0eb4:	b6 01       	movw	r22, r12
875e0eb6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0eba:	88 23       	and	r24, r24
875e0ebc:	01 f0       	breq	.+0      	; 0x875e0ebe <_ZN5Print10printFloatEdh+0x38>
875e0ebe:	60 e0       	ldi	r22, 0x00	; 0
875e0ec0:	70 e0       	ldi	r23, 0x00	; 0
875e0ec2:	00 c0       	rjmp	.+0      	; 0x875e0ec4 <_ZN5Print10printFloatEdh+0x3e>
875e0ec4:	26 01       	movw	r4, r12
875e0ec6:	37 01       	movw	r6, r14
875e0ec8:	e8 94       	clt
875e0eca:	77 f8       	bld	r7, 7
875e0ecc:	2f ef       	ldi	r18, 0xFF	; 255
875e0ece:	3f ef       	ldi	r19, 0xFF	; 255
875e0ed0:	4f e7       	ldi	r20, 0x7F	; 127
875e0ed2:	5f e7       	ldi	r21, 0x7F	; 127
875e0ed4:	c3 01       	movw	r24, r6
875e0ed6:	b2 01       	movw	r22, r4
875e0ed8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0edc:	81 11       	cpse	r24, r1
875e0ede:	00 c0       	rjmp	.+0      	; 0x875e0ee0 <_ZN5Print10printFloatEdh+0x5a>
875e0ee0:	2f ef       	ldi	r18, 0xFF	; 255
875e0ee2:	3f ef       	ldi	r19, 0xFF	; 255
875e0ee4:	4f e7       	ldi	r20, 0x7F	; 127
875e0ee6:	5f e7       	ldi	r21, 0x7F	; 127
875e0ee8:	c3 01       	movw	r24, r6
875e0eea:	b2 01       	movw	r22, r4
875e0eec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0ef0:	18 16       	cp	r1, r24
875e0ef2:	04 f4       	brge	.+0      	; 0x875e0ef4 <_ZN5Print10printFloatEdh+0x6e>
875e0ef4:	60 e0       	ldi	r22, 0x00	; 0
875e0ef6:	70 e0       	ldi	r23, 0x00	; 0
875e0ef8:	00 c0       	rjmp	.+0      	; 0x875e0efa <_ZN5Print10printFloatEdh+0x74>
875e0efa:	2f ef       	ldi	r18, 0xFF	; 255
875e0efc:	3f ef       	ldi	r19, 0xFF	; 255
875e0efe:	4f e7       	ldi	r20, 0x7F	; 127
875e0f00:	5f e4       	ldi	r21, 0x4F	; 79
875e0f02:	c7 01       	movw	r24, r14
875e0f04:	b6 01       	movw	r22, r12
875e0f06:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0f0a:	18 16       	cp	r1, r24
875e0f0c:	04 f4       	brge	.+0      	; 0x875e0f0e <_ZN5Print10printFloatEdh+0x88>
875e0f0e:	60 e0       	ldi	r22, 0x00	; 0
875e0f10:	70 e0       	ldi	r23, 0x00	; 0
875e0f12:	ce 01       	movw	r24, r28
875e0f14:	df 91       	pop	r29
875e0f16:	cf 91       	pop	r28
875e0f18:	1f 91       	pop	r17
875e0f1a:	0f 91       	pop	r16
875e0f1c:	ff 90       	pop	r15
875e0f1e:	ef 90       	pop	r14
875e0f20:	df 90       	pop	r13
875e0f22:	cf 90       	pop	r12
875e0f24:	bf 90       	pop	r11
875e0f26:	af 90       	pop	r10
875e0f28:	9f 90       	pop	r9
875e0f2a:	8f 90       	pop	r8
875e0f2c:	7f 90       	pop	r7
875e0f2e:	6f 90       	pop	r6
875e0f30:	5f 90       	pop	r5
875e0f32:	4f 90       	pop	r4
875e0f34:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
875e0f38:	2f ef       	ldi	r18, 0xFF	; 255
875e0f3a:	3f ef       	ldi	r19, 0xFF	; 255
875e0f3c:	4f e7       	ldi	r20, 0x7F	; 127
875e0f3e:	5f ec       	ldi	r21, 0xCF	; 207
875e0f40:	c7 01       	movw	r24, r14
875e0f42:	b6 01       	movw	r22, r12
875e0f44:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0f48:	87 fd       	sbrc	r24, 7
875e0f4a:	00 c0       	rjmp	.+0      	; 0x875e0f4c <_ZN5Print10printFloatEdh+0xc6>
875e0f4c:	20 e0       	ldi	r18, 0x00	; 0
875e0f4e:	30 e0       	ldi	r19, 0x00	; 0
875e0f50:	a9 01       	movw	r20, r18
875e0f52:	c7 01       	movw	r24, r14
875e0f54:	b6 01       	movw	r22, r12
875e0f56:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0f5a:	87 ff       	sbrs	r24, 7
875e0f5c:	00 c0       	rjmp	.+0      	; 0x875e0f5e <_ZN5Print10printFloatEdh+0xd8>
875e0f5e:	6d e2       	ldi	r22, 0x2D	; 45
875e0f60:	ce 01       	movw	r24, r28
875e0f62:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0f66:	8c 01       	movw	r16, r24
875e0f68:	f7 fa       	bst	r15, 7
875e0f6a:	f0 94       	com	r15
875e0f6c:	f7 f8       	bld	r15, 7
875e0f6e:	f0 94       	com	r15
875e0f70:	00 c0       	rjmp	.+0      	; 0x875e0f72 <_ZN5Print10printFloatEdh+0xec>
875e0f72:	00 e0       	ldi	r16, 0x00	; 0
875e0f74:	10 e0       	ldi	r17, 0x00	; 0
875e0f76:	a1 2c       	mov	r10, r1
875e0f78:	60 e0       	ldi	r22, 0x00	; 0
875e0f7a:	70 e0       	ldi	r23, 0x00	; 0
875e0f7c:	80 e0       	ldi	r24, 0x00	; 0
875e0f7e:	9f e3       	ldi	r25, 0x3F	; 63
875e0f80:	ab 14       	cp	r10, r11
875e0f82:	01 f0       	breq	.+0      	; 0x875e0f84 <_ZN5Print10printFloatEdh+0xfe>
875e0f84:	20 e0       	ldi	r18, 0x00	; 0
875e0f86:	30 e0       	ldi	r19, 0x00	; 0
875e0f88:	40 e2       	ldi	r20, 0x20	; 32
875e0f8a:	51 e4       	ldi	r21, 0x41	; 65
875e0f8c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0f90:	a3 94       	inc	r10
875e0f92:	00 c0       	rjmp	.+0      	; 0x875e0f94 <_ZN5Print10printFloatEdh+0x10e>
875e0f94:	9b 01       	movw	r18, r22
875e0f96:	ac 01       	movw	r20, r24
875e0f98:	c7 01       	movw	r24, r14
875e0f9a:	b6 01       	movw	r22, r12
875e0f9c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0fa0:	6b 01       	movw	r12, r22
875e0fa2:	7c 01       	movw	r14, r24
875e0fa4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0fa8:	2b 01       	movw	r4, r22
875e0faa:	3c 01       	movw	r6, r24
875e0fac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0fb0:	9b 01       	movw	r18, r22
875e0fb2:	ac 01       	movw	r20, r24
875e0fb4:	c7 01       	movw	r24, r14
875e0fb6:	b6 01       	movw	r22, r12
875e0fb8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0fbc:	6b 01       	movw	r12, r22
875e0fbe:	7c 01       	movw	r14, r24
875e0fc0:	2a e0       	ldi	r18, 0x0A	; 10
875e0fc2:	b3 01       	movw	r22, r6
875e0fc4:	a2 01       	movw	r20, r4
875e0fc6:	ce 01       	movw	r24, r28
875e0fc8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0fcc:	08 0f       	add	r16, r24
875e0fce:	19 1f       	adc	r17, r25
875e0fd0:	bb 20       	and	r11, r11
875e0fd2:	01 f0       	breq	.+0      	; 0x875e0fd4 <_ZN5Print10printFloatEdh+0x14e>
875e0fd4:	60 e0       	ldi	r22, 0x00	; 0
875e0fd6:	70 e0       	ldi	r23, 0x00	; 0
875e0fd8:	ce 01       	movw	r24, r28
875e0fda:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0fde:	08 0f       	add	r16, r24
875e0fe0:	19 1f       	adc	r17, r25
875e0fe2:	7b 2c       	mov	r7, r11
875e0fe4:	77 20       	and	r7, r7
875e0fe6:	01 f0       	breq	.+0      	; 0x875e0fe8 <_ZN5Print10printFloatEdh+0x162>
875e0fe8:	20 e0       	ldi	r18, 0x00	; 0
875e0fea:	30 e0       	ldi	r19, 0x00	; 0
875e0fec:	40 e2       	ldi	r20, 0x20	; 32
875e0fee:	51 e4       	ldi	r21, 0x41	; 65
875e0ff0:	c7 01       	movw	r24, r14
875e0ff2:	b6 01       	movw	r22, r12
875e0ff4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e0ff8:	6b 01       	movw	r12, r22
875e0ffa:	7c 01       	movw	r14, r24
875e0ffc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e1000:	4b 01       	movw	r8, r22
875e1002:	aa 24       	eor	r10, r10
875e1004:	97 fc       	sbrc	r9, 7
875e1006:	a0 94       	com	r10
875e1008:	ba 2c       	mov	r11, r10
875e100a:	2a e0       	ldi	r18, 0x0A	; 10
875e100c:	30 e0       	ldi	r19, 0x00	; 0
875e100e:	b5 01       	movw	r22, r10
875e1010:	a4 01       	movw	r20, r8
875e1012:	ce 01       	movw	r24, r28
875e1014:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e1018:	08 0f       	add	r16, r24
875e101a:	19 1f       	adc	r17, r25
875e101c:	c5 01       	movw	r24, r10
875e101e:	b4 01       	movw	r22, r8
875e1020:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e1024:	9b 01       	movw	r18, r22
875e1026:	ac 01       	movw	r20, r24
875e1028:	c7 01       	movw	r24, r14
875e102a:	b6 01       	movw	r22, r12
875e102c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
875e1030:	6b 01       	movw	r12, r22
875e1032:	7c 01       	movw	r14, r24
875e1034:	7a 94       	dec	r7
875e1036:	00 c0       	rjmp	.+0      	; 0x875e1038 <_ZN5Print10printFloatEdh+0x1b2>
875e1038:	c8 01       	movw	r24, r16
875e103a:	df 91       	pop	r29
875e103c:	cf 91       	pop	r28
875e103e:	1f 91       	pop	r17
875e1040:	0f 91       	pop	r16
875e1042:	ff 90       	pop	r15
875e1044:	ef 90       	pop	r14
875e1046:	df 90       	pop	r13
875e1048:	cf 90       	pop	r12
875e104a:	bf 90       	pop	r11
875e104c:	af 90       	pop	r10
875e104e:	9f 90       	pop	r9
875e1050:	8f 90       	pop	r8
875e1052:	7f 90       	pop	r7
875e1054:	6f 90       	pop	r6
875e1056:	5f 90       	pop	r5
875e1058:	4f 90       	pop	r4
875e105a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

0ebc1ee2 <_ZN5Print5printEdi>:
 ebc1ee2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEdi:

1d783dc8 <_ZN5Print7printlnEdi>:
1d783dc8:	0f 93       	push	r16
1d783dca:	1f 93       	push	r17
1d783dcc:	cf 93       	push	r28
1d783dce:	df 93       	push	r29
1d783dd0:	ec 01       	movw	r28, r24
1d783dd2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1d783dd6:	8c 01       	movw	r16, r24
1d783dd8:	ce 01       	movw	r24, r28
1d783dda:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1d783dde:	80 0f       	add	r24, r16
1d783de0:	91 1f       	adc	r25, r17
1d783de2:	df 91       	pop	r29
1d783de4:	cf 91       	pop	r28
1d783de6:	1f 91       	pop	r17
1d783de8:	0f 91       	pop	r16
1d783dea:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000010b0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000157b  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream9timedReadEv 0000005c  00000000  00000000  0000265f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 0000005c  00000000  00000000  000026bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitEv 00000038  00000000  00000000  00002717  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  0000274f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN6Stream9findUntilEPcjS0_j 000000c6  00000000  00000000  0000275b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  00002821  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream9findUntilEPcS0_ 00000034  00000000  00000000  00002837  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream4findEPc 00000008  00000000  00000000  0000286b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream8parseIntEc 000000de  00000000  00000000  00002873  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream8parseIntEv 00000006  00000000  00000000  00002951  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream10parseFloatEc 0000011e  00000000  00000000  00002957  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream10parseFloatEv 00000006  00000000  00000000  00002a75  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9readBytesEPcj 00000046  00000000  00000000  00002a7b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream14readBytesUntilEcPcj 0000006a  00000000  00000000  00002ac1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .rodata.str1.1 00000001  00000000  00000000  00002b2b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .text._ZN6Stream10readStringEv 00000034  00000000  00000000  00002b2c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6Stream15readStringUntilEc 00000050  00000000  00000000  00002b60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .comment      00000012  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   e:	68 87       	std	Y+8, r22	; 0x08
  10:	79 87       	std	Y+9, r23	; 0x09
  String ret;
  12:	8a 87       	std	Y+10, r24	; 0x0a
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  int c = timedRead();
  1a:	06 80       	ldd	r0, Z+6	; 0x06
  1c:	f7 81       	ldd	r31, Z+7	; 0x07
  1e:	e0 2d       	mov	r30, r0
  while (c >= 0 && c != terminator)
  20:	ce 01       	movw	r24, r28
  22:	09 95       	icall
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9timedReadEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2c:	08 85       	ldd	r16, Y+8	; 0x08
  2e:	19 85       	ldd	r17, Y+9	; 0x09
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
  30:	2a 85       	ldd	r18, Y+10	; 0x0a
  32:	3b 85       	ldd	r19, Y+11	; 0x0b
  34:	60 1b       	sub	r22, r16
  36:	71 0b       	sbc	r23, r17
  {
    ret += (char)c;
    c = timedRead();
  38:	82 0b       	sbc	r24, r18
  3a:	93 0b       	sbc	r25, r19
  3c:	0c 81       	ldd	r16, Y+4	; 0x04
  3e:	1d 81       	ldd	r17, Y+5	; 0x05
  }
  return ret;
}
  40:	2e 81       	ldd	r18, Y+6	; 0x06
  42:	3f 81       	ldd	r19, Y+7	; 0x07
  44:	60 17       	cp	r22, r16
  46:	71 07       	cpc	r23, r17
  48:	82 07       	cpc	r24, r18
  4a:	93 07       	cpc	r25, r19
  4c:	00 f0       	brcs	.+0      	; 0x4e <_ZN6Stream9timedReadEv+0x4e>
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	9f ef       	ldi	r25, 0xFF	; 255
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

0000005c <_ZN6Stream9timedPeekEv>:
  5c:	0f 93       	push	r16
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	ec 01       	movw	r28, r24
  66:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  6a:	68 87       	std	Y+8, r22	; 0x08
  6c:	79 87       	std	Y+9, r23	; 0x09
  6e:	8a 87       	std	Y+10, r24	; 0x0a
  70:	9b 87       	std	Y+11, r25	; 0x0b
  72:	e8 81       	ld	r30, Y
  74:	f9 81       	ldd	r31, Y+1	; 0x01
  76:	00 84       	ldd	r0, Z+8	; 0x08
  78:	f1 85       	ldd	r31, Z+9	; 0x09
  7a:	e0 2d       	mov	r30, r0
  7c:	ce 01       	movw	r24, r28
  7e:	09 95       	icall
  80:	97 ff       	sbrs	r25, 7
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN6Stream9timedPeekEv+0x28>
  84:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  88:	08 85       	ldd	r16, Y+8	; 0x08
  8a:	19 85       	ldd	r17, Y+9	; 0x09
  8c:	2a 85       	ldd	r18, Y+10	; 0x0a
  8e:	3b 85       	ldd	r19, Y+11	; 0x0b
  90:	60 1b       	sub	r22, r16
  92:	71 0b       	sbc	r23, r17
  94:	82 0b       	sbc	r24, r18
  96:	93 0b       	sbc	r25, r19
  98:	0c 81       	ldd	r16, Y+4	; 0x04
  9a:	1d 81       	ldd	r17, Y+5	; 0x05
  9c:	2e 81       	ldd	r18, Y+6	; 0x06
  9e:	3f 81       	ldd	r19, Y+7	; 0x07
  a0:	60 17       	cp	r22, r16
  a2:	71 07       	cpc	r23, r17
  a4:	82 07       	cpc	r24, r18
  a6:	93 07       	cpc	r25, r19
  a8:	00 f0       	brcs	.+0      	; 0xaa <_ZN6Stream9timedPeekEv+0x4e>
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000114 <_ZN6Stream13peekNextDigitEv>:
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 120:	97 fd       	sbrc	r25, 7
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN6Stream13peekNextDigitEv+0x10>
 124:	8d 32       	cpi	r24, 0x2D	; 45
 126:	91 05       	cpc	r25, r1
 128:	01 f0       	breq	.+0      	; 0x12a <_ZN6Stream13peekNextDigitEv+0x16>
 12a:	9c 01       	movw	r18, r24
 12c:	20 53       	subi	r18, 0x30	; 48
 12e:	31 09       	sbc	r19, r1
 130:	2a 30       	cpi	r18, 0x0A	; 10
 132:	31 05       	cpc	r19, r1
 134:	00 f0       	brcs	.+0      	; 0x136 <_ZN6Stream13peekNextDigitEv+0x22>
 136:	e8 81       	ld	r30, Y
 138:	f9 81       	ldd	r31, Y+1	; 0x01
 13a:	06 80       	ldd	r0, Z+6	; 0x06
 13c:	f7 81       	ldd	r31, Z+7	; 0x07
 13e:	e0 2d       	mov	r30, r0
 140:	ce 01       	movw	r24, r28
 142:	09 95       	icall
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZN6Stream13peekNextDigitEv+0x32>
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000260 <_ZN6Stream10setTimeoutEm>:
 260:	fc 01       	movw	r30, r24
 262:	44 83       	std	Z+4, r20	; 0x04
 264:	55 83       	std	Z+5, r21	; 0x05
 266:	66 83       	std	Z+6, r22	; 0x06
 268:	77 83       	std	Z+7, r23	; 0x07
 26a:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

000004cc <_ZN6Stream9findUntilEPcjS0_j>:
 4cc:	6f 92       	push	r6
 4ce:	7f 92       	push	r7
 4d0:	8f 92       	push	r8
 4d2:	9f 92       	push	r9
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	5c 01       	movw	r10, r24
 4ea:	6b 01       	movw	r12, r22
 4ec:	4a 01       	movw	r8, r20
 4ee:	39 01       	movw	r6, r18
 4f0:	fb 01       	movw	r30, r22
 4f2:	80 81       	ld	r24, Z
 4f4:	88 23       	and	r24, r24
 4f6:	01 f0       	breq	.+0      	; 0x4f8 <_ZN6Stream9findUntilEPcjS0_j+0x2c>
 4f8:	e1 2c       	mov	r14, r1
 4fa:	f1 2c       	mov	r15, r1
 4fc:	c0 e0       	ldi	r28, 0x00	; 0
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
 500:	c5 01       	movw	r24, r10
 502:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 506:	18 16       	cp	r1, r24
 508:	19 06       	cpc	r1, r25
 50a:	04 f4       	brge	.+0      	; 0x50c <_ZN6Stream9findUntilEPcjS0_j+0x40>
 50c:	f6 01       	movw	r30, r12
 50e:	ec 0f       	add	r30, r28
 510:	fd 1f       	adc	r31, r29
 512:	20 81       	ld	r18, Z
 514:	33 27       	eor	r19, r19
 516:	27 fd       	sbrc	r18, 7
 518:	30 95       	com	r19
 51a:	82 17       	cp	r24, r18
 51c:	93 07       	cpc	r25, r19
 51e:	01 f0       	breq	.+0      	; 0x520 <_ZN6Stream9findUntilEPcjS0_j+0x54>
 520:	c0 e0       	ldi	r28, 0x00	; 0
 522:	d0 e0       	ldi	r29, 0x00	; 0
 524:	f6 01       	movw	r30, r12
 526:	ec 0f       	add	r30, r28
 528:	fd 1f       	adc	r31, r29
 52a:	20 81       	ld	r18, Z
 52c:	33 27       	eor	r19, r19
 52e:	27 fd       	sbrc	r18, 7
 530:	30 95       	com	r19
 532:	82 17       	cp	r24, r18
 534:	93 07       	cpc	r25, r19
 536:	01 f4       	brne	.+0      	; 0x538 <_ZN6Stream9findUntilEPcjS0_j+0x6c>
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	c8 15       	cp	r28, r8
 53c:	d9 05       	cpc	r29, r9
 53e:	00 f4       	brcc	.+0      	; 0x540 <_ZN6Stream9findUntilEPcjS0_j+0x74>
 540:	01 15       	cp	r16, r1
 542:	11 05       	cpc	r17, r1
 544:	01 f0       	breq	.+0      	; 0x546 <_ZN6Stream9findUntilEPcjS0_j+0x7a>
 546:	f3 01       	movw	r30, r6
 548:	ee 0d       	add	r30, r14
 54a:	ff 1d       	adc	r31, r15
 54c:	20 81       	ld	r18, Z
 54e:	33 27       	eor	r19, r19
 550:	27 fd       	sbrc	r18, 7
 552:	30 95       	com	r19
 554:	82 17       	cp	r24, r18
 556:	93 07       	cpc	r25, r19
 558:	01 f4       	brne	.+0      	; 0x55a <_ZN6Stream9findUntilEPcjS0_j+0x8e>
 55a:	ff ef       	ldi	r31, 0xFF	; 255
 55c:	ef 1a       	sub	r14, r31
 55e:	ff 0a       	sbc	r15, r31
 560:	e0 16       	cp	r14, r16
 562:	f1 06       	cpc	r15, r17
 564:	00 f0       	brcs	.+0      	; 0x566 <_ZN6Stream9findUntilEPcjS0_j+0x9a>
 566:	00 c0       	rjmp	.+0      	; 0x568 <_ZN6Stream9findUntilEPcjS0_j+0x9c>
 568:	e1 2c       	mov	r14, r1
 56a:	f1 2c       	mov	r15, r1
 56c:	00 c0       	rjmp	.+0      	; 0x56e <_ZN6Stream9findUntilEPcjS0_j+0xa2>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	00 c0       	rjmp	.+0      	; 0x572 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	9f 90       	pop	r9
 58a:	8f 90       	pop	r8
 58c:	7f 90       	pop	r7
 58e:	6f 90       	pop	r6
 590:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000a5e <_ZN6Stream4findEPcj>:
 a5e:	0f 93       	push	r16
 a60:	1f 93       	push	r17
 a62:	00 e0       	ldi	r16, 0x00	; 0
 a64:	10 e0       	ldi	r17, 0x00	; 0
 a66:	20 e0       	ldi	r18, 0x00	; 0
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a6e:	1f 91       	pop	r17
 a70:	0f 91       	pop	r16
 a72:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

000014d2 <_ZN6Stream9findUntilEPcS0_>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	9a 01       	movw	r18, r20
    14d8:	fa 01       	movw	r30, r20
    14da:	01 90       	ld	r0, Z+
    14dc:	00 20       	and	r0, r0
    14de:	01 f4       	brne	.+0      	; 0x14e0 <_ZN6Stream9findUntilEPcS0_+0xe>
    14e0:	8f 01       	movw	r16, r30
    14e2:	01 50       	subi	r16, 0x01	; 1
    14e4:	11 09       	sbc	r17, r1
    14e6:	04 1b       	sub	r16, r20
    14e8:	15 0b       	sbc	r17, r21
    14ea:	fb 01       	movw	r30, r22
    14ec:	01 90       	ld	r0, Z+
    14ee:	00 20       	and	r0, r0
    14f0:	01 f4       	brne	.+0      	; 0x14f2 <_ZN6Stream9findUntilEPcS0_+0x20>
    14f2:	af 01       	movw	r20, r30
    14f4:	41 50       	subi	r20, 0x01	; 1
    14f6:	51 09       	sbc	r21, r1
    14f8:	46 1b       	sub	r20, r22
    14fa:	57 0b       	sbc	r21, r23
    14fc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

000029d8 <_ZN6Stream4findEPc>:
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6Stream8parseIntEc:

000053b8 <_ZN6Stream8parseIntEc>:
    53b8:	cf 92       	push	r12
    53ba:	df 92       	push	r13
    53bc:	ff 92       	push	r15
    53be:	0f 93       	push	r16
    53c0:	1f 93       	push	r17
    53c2:	cf 93       	push	r28
    53c4:	df 93       	push	r29
    53c6:	00 d0       	rcall	.+0      	; 0x53c8 <_ZN6Stream8parseIntEc+0x10>
    53c8:	00 d0       	rcall	.+0      	; 0x53ca <_ZN6Stream8parseIntEc+0x12>
    53ca:	cd b7       	in	r28, 0x3d	; 61
    53cc:	de b7       	in	r29, 0x3e	; 62
    53ce:	6c 01       	movw	r12, r24
    53d0:	06 2f       	mov	r16, r22
    53d2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    53d6:	fc 01       	movw	r30, r24
    53d8:	97 fd       	sbrc	r25, 7
    53da:	00 c0       	rjmp	.+0      	; 0x53dc <_ZN6Stream8parseIntEc+0x24>
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	a9 01       	movw	r20, r18
    53e2:	f1 2c       	mov	r15, r1
    53e4:	11 27       	eor	r17, r17
    53e6:	07 fd       	sbrc	r16, 7
    53e8:	10 95       	com	r17
    53ea:	e0 17       	cp	r30, r16
    53ec:	f1 07       	cpc	r31, r17
    53ee:	01 f0       	breq	.+0      	; 0x53f0 <_ZN6Stream8parseIntEc+0x38>
    53f0:	ed 32       	cpi	r30, 0x2D	; 45
    53f2:	f1 05       	cpc	r31, r1
    53f4:	01 f0       	breq	.+0      	; 0x53f6 <_ZN6Stream8parseIntEc+0x3e>
    53f6:	cf 01       	movw	r24, r30
    53f8:	c0 97       	sbiw	r24, 0x30	; 48
    53fa:	0a 97       	sbiw	r24, 0x0a	; 10
    53fc:	00 f4       	brcc	.+0      	; 0x53fe <_ZN6Stream8parseIntEc+0x46>
    53fe:	aa e0       	ldi	r26, 0x0A	; 10
    5400:	b0 e0       	ldi	r27, 0x00	; 0
    5402:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    5406:	9b 01       	movw	r18, r22
    5408:	ac 01       	movw	r20, r24
    540a:	cf 01       	movw	r24, r30
    540c:	aa 27       	eor	r26, r26
    540e:	97 fd       	sbrc	r25, 7
    5410:	a0 95       	com	r26
    5412:	ba 2f       	mov	r27, r26
    5414:	28 0f       	add	r18, r24
    5416:	39 1f       	adc	r19, r25
    5418:	4a 1f       	adc	r20, r26
    541a:	5b 1f       	adc	r21, r27
    541c:	20 53       	subi	r18, 0x30	; 48
    541e:	31 09       	sbc	r19, r1
    5420:	41 09       	sbc	r20, r1
    5422:	51 09       	sbc	r21, r1
    5424:	00 c0       	rjmp	.+0      	; 0x5426 <_ZN6Stream8parseIntEc+0x6e>
    5426:	ff 24       	eor	r15, r15
    5428:	f3 94       	inc	r15
    542a:	d6 01       	movw	r26, r12
    542c:	ed 91       	ld	r30, X+
    542e:	fc 91       	ld	r31, X
    5430:	06 80       	ldd	r0, Z+6	; 0x06
    5432:	f7 81       	ldd	r31, Z+7	; 0x07
    5434:	e0 2d       	mov	r30, r0
    5436:	c6 01       	movw	r24, r12
    5438:	29 83       	std	Y+1, r18	; 0x01
    543a:	3a 83       	std	Y+2, r19	; 0x02
    543c:	4b 83       	std	Y+3, r20	; 0x03
    543e:	5c 83       	std	Y+4, r21	; 0x04
    5440:	09 95       	icall
    5442:	c6 01       	movw	r24, r12
    5444:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    5448:	fc 01       	movw	r30, r24
    544a:	c0 97       	sbiw	r24, 0x30	; 48
    544c:	29 81       	ldd	r18, Y+1	; 0x01
    544e:	3a 81       	ldd	r19, Y+2	; 0x02
    5450:	4b 81       	ldd	r20, Y+3	; 0x03
    5452:	5c 81       	ldd	r21, Y+4	; 0x04
    5454:	0a 97       	sbiw	r24, 0x0a	; 10
    5456:	00 f0       	brcs	.+0      	; 0x5458 <_ZN6Stream8parseIntEc+0xa0>
    5458:	e0 17       	cp	r30, r16
    545a:	f1 07       	cpc	r31, r17
    545c:	01 f0       	breq	.+0      	; 0x545e <_ZN6Stream8parseIntEc+0xa6>
    545e:	ff 20       	and	r15, r15
    5460:	01 f0       	breq	.+0      	; 0x5462 <_ZN6Stream8parseIntEc+0xaa>
    5462:	66 27       	eor	r22, r22
    5464:	77 27       	eor	r23, r23
    5466:	cb 01       	movw	r24, r22
    5468:	62 1b       	sub	r22, r18
    546a:	73 0b       	sbc	r23, r19
    546c:	84 0b       	sbc	r24, r20
    546e:	95 0b       	sbc	r25, r21
    5470:	00 c0       	rjmp	.+0      	; 0x5472 <_ZN6Stream8parseIntEc+0xba>
    5472:	60 e0       	ldi	r22, 0x00	; 0
    5474:	70 e0       	ldi	r23, 0x00	; 0
    5476:	cb 01       	movw	r24, r22
    5478:	00 c0       	rjmp	.+0      	; 0x547a <_ZN6Stream8parseIntEc+0xc2>
    547a:	ca 01       	movw	r24, r20
    547c:	b9 01       	movw	r22, r18
    547e:	0f 90       	pop	r0
    5480:	0f 90       	pop	r0
    5482:	0f 90       	pop	r0
    5484:	0f 90       	pop	r0
    5486:	df 91       	pop	r29
    5488:	cf 91       	pop	r28
    548a:	1f 91       	pop	r17
    548c:	0f 91       	pop	r16
    548e:	ff 90       	pop	r15
    5490:	df 90       	pop	r13
    5492:	cf 90       	pop	r12
    5494:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

0000a84e <_ZN6Stream8parseIntEv>:
    a84e:	61 e0       	ldi	r22, 0x01	; 1
    a850:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6Stream10parseFloatEc:

000150a2 <_ZN6Stream10parseFloatEc>:
   150a2:	7f 92       	push	r7
   150a4:	8f 92       	push	r8
   150a6:	9f 92       	push	r9
   150a8:	af 92       	push	r10
   150aa:	bf 92       	push	r11
   150ac:	cf 92       	push	r12
   150ae:	df 92       	push	r13
   150b0:	ef 92       	push	r14
   150b2:	ff 92       	push	r15
   150b4:	0f 93       	push	r16
   150b6:	1f 93       	push	r17
   150b8:	cf 93       	push	r28
   150ba:	df 93       	push	r29
   150bc:	ec 01       	movw	r28, r24
   150be:	76 2e       	mov	r7, r22
   150c0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   150c4:	e8 2f       	mov	r30, r24
   150c6:	87 fd       	sbrc	r24, 7
   150c8:	00 c0       	rjmp	.+0      	; 0x150ca <_ZN6Stream10parseFloatEc+0x28>
   150ca:	81 2c       	mov	r8, r1
   150cc:	91 2c       	mov	r9, r1
   150ce:	80 e8       	ldi	r24, 0x80	; 128
   150d0:	a8 2e       	mov	r10, r24
   150d2:	8f e3       	ldi	r24, 0x3F	; 63
   150d4:	b8 2e       	mov	r11, r24
   150d6:	c1 2c       	mov	r12, r1
   150d8:	d1 2c       	mov	r13, r1
   150da:	76 01       	movw	r14, r12
   150dc:	10 e0       	ldi	r17, 0x00	; 0
   150de:	00 e0       	ldi	r16, 0x00	; 0
   150e0:	e7 15       	cp	r30, r7
   150e2:	01 f0       	breq	.+0      	; 0x150e4 <_ZN6Stream10parseFloatEc+0x42>
   150e4:	ed 32       	cpi	r30, 0x2D	; 45
   150e6:	01 f0       	breq	.+0      	; 0x150e8 <_ZN6Stream10parseFloatEc+0x46>
   150e8:	ee 32       	cpi	r30, 0x2E	; 46
   150ea:	01 f0       	breq	.+0      	; 0x150ec <_ZN6Stream10parseFloatEc+0x4a>
   150ec:	80 ed       	ldi	r24, 0xD0	; 208
   150ee:	8e 0f       	add	r24, r30
   150f0:	8a 30       	cpi	r24, 0x0A	; 10
   150f2:	00 f4       	brcc	.+0      	; 0x150f4 <_ZN6Stream10parseFloatEc+0x52>
   150f4:	aa e0       	ldi	r26, 0x0A	; 10
   150f6:	b0 e0       	ldi	r27, 0x00	; 0
   150f8:	a7 01       	movw	r20, r14
   150fa:	96 01       	movw	r18, r12
   150fc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15100:	6b 01       	movw	r12, r22
   15102:	7c 01       	movw	r14, r24
   15104:	4e 2f       	mov	r20, r30
   15106:	55 27       	eor	r21, r21
   15108:	47 fd       	sbrc	r20, 7
   1510a:	50 95       	com	r21
   1510c:	65 2f       	mov	r22, r21
   1510e:	75 2f       	mov	r23, r21
   15110:	c4 0e       	add	r12, r20
   15112:	d5 1e       	adc	r13, r21
   15114:	e6 1e       	adc	r14, r22
   15116:	f7 1e       	adc	r15, r23
   15118:	80 e3       	ldi	r24, 0x30	; 48
   1511a:	c8 1a       	sub	r12, r24
   1511c:	d1 08       	sbc	r13, r1
   1511e:	e1 08       	sbc	r14, r1
   15120:	f1 08       	sbc	r15, r1
   15122:	11 23       	and	r17, r17
   15124:	01 f0       	breq	.+0      	; 0x15126 <_ZN6Stream10parseFloatEc+0x84>
   15126:	2d ec       	ldi	r18, 0xCD	; 205
   15128:	3c ec       	ldi	r19, 0xCC	; 204
   1512a:	4c ec       	ldi	r20, 0xCC	; 204
   1512c:	5d e3       	ldi	r21, 0x3D	; 61
   1512e:	c5 01       	movw	r24, r10
   15130:	b4 01       	movw	r22, r8
   15132:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15136:	4b 01       	movw	r8, r22
   15138:	5c 01       	movw	r10, r24
   1513a:	00 c0       	rjmp	.+0      	; 0x1513c <_ZN6Stream10parseFloatEc+0x9a>
   1513c:	01 e0       	ldi	r16, 0x01	; 1
   1513e:	00 c0       	rjmp	.+0      	; 0x15140 <_ZN6Stream10parseFloatEc+0x9e>
   15140:	11 e0       	ldi	r17, 0x01	; 1
   15142:	e8 81       	ld	r30, Y
   15144:	f9 81       	ldd	r31, Y+1	; 0x01
   15146:	06 80       	ldd	r0, Z+6	; 0x06
   15148:	f7 81       	ldd	r31, Z+7	; 0x07
   1514a:	e0 2d       	mov	r30, r0
   1514c:	ce 01       	movw	r24, r28
   1514e:	09 95       	icall
   15150:	ce 01       	movw	r24, r28
   15152:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15156:	e8 2f       	mov	r30, r24
   15158:	90 ed       	ldi	r25, 0xD0	; 208
   1515a:	98 0f       	add	r25, r24
   1515c:	9a 30       	cpi	r25, 0x0A	; 10
   1515e:	00 f4       	brcc	.+0      	; 0x15160 <_ZN6Stream10parseFloatEc+0xbe>
   15160:	00 c0       	rjmp	.+0      	; 0x15162 <_ZN6Stream10parseFloatEc+0xc0>
   15162:	8e 32       	cpi	r24, 0x2E	; 46
   15164:	01 f4       	brne	.+0      	; 0x15166 <_ZN6Stream10parseFloatEc+0xc4>
   15166:	00 c0       	rjmp	.+0      	; 0x15168 <_ZN6Stream10parseFloatEc+0xc6>
   15168:	87 15       	cp	r24, r7
   1516a:	01 f4       	brne	.+0      	; 0x1516c <_ZN6Stream10parseFloatEc+0xca>
   1516c:	00 c0       	rjmp	.+0      	; 0x1516e <_ZN6Stream10parseFloatEc+0xcc>
   1516e:	00 23       	and	r16, r16
   15170:	01 f0       	breq	.+0      	; 0x15172 <_ZN6Stream10parseFloatEc+0xd0>
   15172:	f0 94       	com	r15
   15174:	e0 94       	com	r14
   15176:	d0 94       	com	r13
   15178:	c0 94       	com	r12
   1517a:	c1 1c       	adc	r12, r1
   1517c:	d1 1c       	adc	r13, r1
   1517e:	e1 1c       	adc	r14, r1
   15180:	f1 1c       	adc	r15, r1
   15182:	c7 01       	movw	r24, r14
   15184:	b6 01       	movw	r22, r12
   15186:	11 23       	and	r17, r17
   15188:	01 f0       	breq	.+0      	; 0x1518a <_ZN6Stream10parseFloatEc+0xe8>
   1518a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   1518e:	a5 01       	movw	r20, r10
   15190:	94 01       	movw	r18, r8
   15192:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15196:	00 c0       	rjmp	.+0      	; 0x15198 <_ZN6Stream10parseFloatEc+0xf6>
   15198:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   1519c:	00 c0       	rjmp	.+0      	; 0x1519e <_ZN6Stream10parseFloatEc+0xfc>
   1519e:	60 e0       	ldi	r22, 0x00	; 0
   151a0:	70 e0       	ldi	r23, 0x00	; 0
   151a2:	cb 01       	movw	r24, r22
   151a4:	df 91       	pop	r29
   151a6:	cf 91       	pop	r28
   151a8:	1f 91       	pop	r17
   151aa:	0f 91       	pop	r16
   151ac:	ff 90       	pop	r15
   151ae:	ef 90       	pop	r14
   151b0:	df 90       	pop	r13
   151b2:	cf 90       	pop	r12
   151b4:	bf 90       	pop	r11
   151b6:	af 90       	pop	r10
   151b8:	9f 90       	pop	r9
   151ba:	8f 90       	pop	r8
   151bc:	7f 90       	pop	r7
   151be:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

0002a262 <_ZN6Stream10parseFloatEv>:
   2a262:	61 e0       	ldi	r22, 0x01	; 1
   2a264:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6Stream9readBytesEPcj:

000544ca <_ZN6Stream9readBytesEPcj>:
   544ca:	cf 92       	push	r12
   544cc:	df 92       	push	r13
   544ce:	ef 92       	push	r14
   544d0:	ff 92       	push	r15
   544d2:	0f 93       	push	r16
   544d4:	1f 93       	push	r17
   544d6:	cf 93       	push	r28
   544d8:	df 93       	push	r29
   544da:	7c 01       	movw	r14, r24
   544dc:	6a 01       	movw	r12, r20
   544de:	eb 01       	movw	r28, r22
   544e0:	00 e0       	ldi	r16, 0x00	; 0
   544e2:	10 e0       	ldi	r17, 0x00	; 0
   544e4:	0c 15       	cp	r16, r12
   544e6:	1d 05       	cpc	r17, r13
   544e8:	01 f0       	breq	.+0      	; 0x544ea <_ZN6Stream9readBytesEPcj+0x20>
   544ea:	c7 01       	movw	r24, r14
   544ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   544f0:	97 fd       	sbrc	r25, 7
   544f2:	00 c0       	rjmp	.+0      	; 0x544f4 <_ZN6Stream9readBytesEPcj+0x2a>
   544f4:	89 93       	st	Y+, r24
   544f6:	0f 5f       	subi	r16, 0xFF	; 255
   544f8:	1f 4f       	sbci	r17, 0xFF	; 255
   544fa:	00 c0       	rjmp	.+0      	; 0x544fc <_ZN6Stream9readBytesEPcj+0x32>
   544fc:	c8 01       	movw	r24, r16
   544fe:	df 91       	pop	r29
   54500:	cf 91       	pop	r28
   54502:	1f 91       	pop	r17
   54504:	0f 91       	pop	r16
   54506:	ff 90       	pop	r15
   54508:	ef 90       	pop	r14
   5450a:	df 90       	pop	r13
   5450c:	cf 90       	pop	r12
   5450e:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

000a89da <_ZN6Stream14readBytesUntilEcPcj>:
   a89da:	af 92       	push	r10
   a89dc:	bf 92       	push	r11
   a89de:	cf 92       	push	r12
   a89e0:	df 92       	push	r13
   a89e2:	ef 92       	push	r14
   a89e4:	ff 92       	push	r15
   a89e6:	0f 93       	push	r16
   a89e8:	1f 93       	push	r17
   a89ea:	cf 93       	push	r28
   a89ec:	df 93       	push	r29
   a89ee:	6c 01       	movw	r12, r24
   a89f0:	79 01       	movw	r14, r18
   a89f2:	21 15       	cp	r18, r1
   a89f4:	31 05       	cpc	r19, r1
   a89f6:	01 f0       	breq	.+0      	; 0xa89f8 <_ZN6Stream14readBytesUntilEcPcj+0x1e>
   a89f8:	8a 01       	movw	r16, r20
   a89fa:	c0 e0       	ldi	r28, 0x00	; 0
   a89fc:	d0 e0       	ldi	r29, 0x00	; 0
   a89fe:	a6 2e       	mov	r10, r22
   a8a00:	bb 24       	eor	r11, r11
   a8a02:	a7 fc       	sbrc	r10, 7
   a8a04:	b0 94       	com	r11
   a8a06:	c6 01       	movw	r24, r12
   a8a08:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   a8a0c:	97 fd       	sbrc	r25, 7
   a8a0e:	00 c0       	rjmp	.+0      	; 0xa8a10 <_ZN6Stream14readBytesUntilEcPcj+0x36>
   a8a10:	8a 15       	cp	r24, r10
   a8a12:	9b 05       	cpc	r25, r11
   a8a14:	01 f0       	breq	.+0      	; 0xa8a16 <_ZN6Stream14readBytesUntilEcPcj+0x3c>
   a8a16:	f8 01       	movw	r30, r16
   a8a18:	81 93       	st	Z+, r24
   a8a1a:	8f 01       	movw	r16, r30
   a8a1c:	21 96       	adiw	r28, 0x01	; 1
   a8a1e:	ce 15       	cp	r28, r14
   a8a20:	df 05       	cpc	r29, r15
   a8a22:	01 f4       	brne	.+0      	; 0xa8a24 <_ZN6Stream14readBytesUntilEcPcj+0x4a>
   a8a24:	00 c0       	rjmp	.+0      	; 0xa8a26 <_ZN6Stream14readBytesUntilEcPcj+0x4c>
   a8a26:	80 e0       	ldi	r24, 0x00	; 0
   a8a28:	90 e0       	ldi	r25, 0x00	; 0
   a8a2a:	00 c0       	rjmp	.+0      	; 0xa8a2c <_ZN6Stream14readBytesUntilEcPcj+0x52>
   a8a2c:	ce 01       	movw	r24, r28
   a8a2e:	df 91       	pop	r29
   a8a30:	cf 91       	pop	r28
   a8a32:	1f 91       	pop	r17
   a8a34:	0f 91       	pop	r16
   a8a36:	ff 90       	pop	r15
   a8a38:	ef 90       	pop	r14
   a8a3a:	df 90       	pop	r13
   a8a3c:	cf 90       	pop	r12
   a8a3e:	bf 90       	pop	r11
   a8a40:	af 90       	pop	r10
   a8a42:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

002a283d <_ZN6Stream10readStringEv>:
  2a283d:	0f 93       	push	r16
  2a283f:	1f 93       	push	r17
  2a2841:	cf 93       	push	r28
  2a2843:	df 93       	push	r29
  2a2845:	ec 01       	movw	r28, r24
  2a2847:	8b 01       	movw	r16, r22
  2a2849:	60 e0       	ldi	r22, 0x00	; 0
  2a284b:	70 e0       	ldi	r23, 0x00	; 0
  2a284d:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a2851:	c8 01       	movw	r24, r16
  2a2853:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a2857:	97 fd       	sbrc	r25, 7
  2a2859:	00 c0       	rjmp	.+0      	; 0x2a285b <_ZN6Stream10readStringEv+0x1e>
  2a285b:	68 2f       	mov	r22, r24
  2a285d:	ce 01       	movw	r24, r28
  2a285f:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a2863:	00 c0       	rjmp	.+0      	; 0x2a2865 <_ZN6Stream10readStringEv+0x28>
  2a2865:	ce 01       	movw	r24, r28
  2a2867:	df 91       	pop	r29
  2a2869:	cf 91       	pop	r28
  2a286b:	1f 91       	pop	r17
  2a286d:	0f 91       	pop	r16
  2a286f:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

005450ae <_ZN6Stream15readStringUntilEc>:
  5450ae:	ef 92       	push	r14
  5450b0:	ff 92       	push	r15
  5450b2:	0f 93       	push	r16
  5450b4:	1f 93       	push	r17
  5450b6:	cf 93       	push	r28
  5450b8:	df 93       	push	r29
  5450ba:	ec 01       	movw	r28, r24
  5450bc:	8b 01       	movw	r16, r22
  5450be:	e4 2e       	mov	r14, r20
  5450c0:	60 e0       	ldi	r22, 0x00	; 0
  5450c2:	70 e0       	ldi	r23, 0x00	; 0
  5450c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5450c8:	c8 01       	movw	r24, r16
  5450ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5450ce:	ff 24       	eor	r15, r15
  5450d0:	e7 fc       	sbrc	r14, 7
  5450d2:	f0 94       	com	r15
  5450d4:	97 fd       	sbrc	r25, 7
  5450d6:	00 c0       	rjmp	.+0      	; 0x5450d8 <_ZN6Stream15readStringUntilEc+0x2a>
  5450d8:	8e 15       	cp	r24, r14
  5450da:	9f 05       	cpc	r25, r15
  5450dc:	01 f0       	breq	.+0      	; 0x5450de <_ZN6Stream15readStringUntilEc+0x30>
  5450de:	68 2f       	mov	r22, r24
  5450e0:	ce 01       	movw	r24, r28
  5450e2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5450e6:	c8 01       	movw	r24, r16
  5450e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5450ec:	00 c0       	rjmp	.+0      	; 0x5450ee <_ZN6Stream15readStringUntilEc+0x40>
  5450ee:	ce 01       	movw	r24, r28
  5450f0:	df 91       	pop	r29
  5450f2:	cf 91       	pop	r28
  5450f4:	1f 91       	pop	r17
  5450f6:	0f 91       	pop	r16
  5450f8:	ff 90       	pop	r15
  5450fa:	ef 90       	pop	r14
  5450fc:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000d38  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000012a7  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z4tonehjm 00000410  00000000  00000000  00002013  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000040  00000000  00000000  00002423  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002a  00000000  00000000  00002463  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_7 000000b8  00000000  00000000  0000248d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data._ZL21tone_pin_to_timer_PGM 00000001  00000000  00000000  00002545  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data._ZL9tone_pins 00000001  00000000  00000000  00002546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss.timer2_pin_mask 00000001  00000000  00000000  00002547  2**0
                  ALLOC
 12 .bss.timer2_pin_port 00000002  00000000  00000000  00002547  2**0
                  ALLOC
 13 .bss.timer2_toggle_count 00000004  00000000  00000000  00002547  2**0
                  ALLOC
 14 .bss.timer1_pin_mask 00000001  00000000  00000000  00002547  2**0
                  ALLOC
 15 .bss.timer1_pin_port 00000002  00000000  00000000  00002547  2**0
                  ALLOC
 16 .bss.timer1_toggle_count 00000004  00000000  00000000  00002547  2**0
                  ALLOC
 17 .bss.timer0_pin_mask 00000001  00000000  00000000  00002547  2**0
                  ALLOC
 18 .bss.timer0_pin_port 00000002  00000000  00000000  00002547  2**0
                  ALLOC
 19 .bss.timer0_toggle_count 00000004  00000000  00000000  00002547  2**0
                  ALLOC
 20 .comment      00000012  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	3f 92       	push	r3
   2:	4f 92       	push	r4
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	cf 93       	push	r28
  20:	df 93       	push	r29

  if (timer2_toggle_count != 0)
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z4tonehjm+0x26>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	8b 01       	movw	r16, r22
  2c:	29 01       	movw	r4, r18
  2e:	3a 01       	movw	r6, r20
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	98 17       	cp	r25, r24
  36:	01 f0       	breq	.+0      	; 0x38 <_Z4tonehjm+0x38>
  38:	9f 3f       	cpi	r25, 0xFF	; 255
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z4tonehjm+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_Z4tonehjm+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_Z4tonehjm+0x40>
  40:	e0 e0       	ldi	r30, 0x00	; 0
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	34 90       	lpm	r3, Z
  46:	00 c0       	rjmp	.+0      	; 0x48 <_Z4tonehjm+0x48>
  48:	80 93 00 00 	sts	0x0000, r24

    if (timer2_toggle_count > 0)
  4c:	e0 e0       	ldi	r30, 0x00	; 0
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	e4 91       	lpm	r30, Z
  52:	ef 3f       	cpi	r30, 0xFF	; 255
  54:	01 f4       	brne	.+0      	; 0x56 <_Z4tonehjm+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_Z4tonehjm+0x58>
  58:	e1 30       	cpi	r30, 0x01	; 1
  5a:	01 f0       	breq	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	e2 30       	cpi	r30, 0x02	; 2
  5e:	01 f4       	brne	.+0      	; 0x60 <_Z4tonehjm+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_Z4tonehjm+0x62>
  62:	e1 11       	cpse	r30, r1
  64:	00 c0       	rjmp	.+0      	; 0x66 <_Z4tonehjm+0x66>
      timer2_toggle_count--;
  66:	14 bc       	out	0x24, r1	; 36
  68:	15 bc       	out	0x25, r1	; 37
  6a:	94 b5       	in	r25, 0x24	; 36
  6c:	92 60       	ori	r25, 0x02	; 2
  6e:	94 bd       	out	0x24, r25	; 36
  70:	95 b5       	in	r25, 0x25	; 37
  72:	91 60       	ori	r25, 0x01	; 1
  74:	95 bd       	out	0x25, r25	; 37
  76:	28 2f       	mov	r18, r24
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	f9 01       	movw	r30, r18
  7c:	e0 50       	subi	r30, 0x00	; 0
  7e:	f0 40       	sbci	r31, 0x00	; 0
  80:	e4 91       	lpm	r30, Z
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	ee 0f       	add	r30, r30
  86:	ff 1f       	adc	r31, r31
  88:	e0 50       	subi	r30, 0x00	; 0
  8a:	f0 40       	sbci	r31, 0x00	; 0
  8c:	45 91       	lpm	r20, Z+
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  8e:	54 91       	lpm	r21, Z
  90:	50 93 00 00 	sts	0x0000, r21
  94:	40 93 00 00 	sts	0x0000, r20
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  98:	f9 01       	movw	r30, r18
  9a:	e0 50       	subi	r30, 0x00	; 0
  9c:	f0 40       	sbci	r31, 0x00	; 0
  9e:	24 91       	lpm	r18, Z
  a0:	20 93 00 00 	sts	0x0000, r18
  a4:	31 2c       	mov	r3, r1
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_Z4tonehjm+0xa8>
  a8:	10 92 80 00 	sts	0x0080, r1
  ac:	10 92 81 00 	sts	0x0081, r1
  b0:	90 91 81 00 	lds	r25, 0x0081
  b4:	98 60       	ori	r25, 0x08	; 8
  b6:	90 93 81 00 	sts	0x0081, r25
  ba:	90 91 81 00 	lds	r25, 0x0081
  be:	91 60       	ori	r25, 0x01	; 1
  c0:	90 93 81 00 	sts	0x0081, r25
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	f0 40       	sbci	r31, 0x00	; 0
  ce:	e4 91       	lpm	r30, Z
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	f0 40       	sbci	r31, 0x00	; 0
  da:	45 91       	lpm	r20, Z+
  dc:	54 91       	lpm	r21, Z
  de:	50 93 00 00 	sts	0x0000, r21
  e2:	40 93 00 00 	sts	0x0000, r20
  e6:	f9 01       	movw	r30, r18
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	f0 40       	sbci	r31, 0x00	; 0
  ec:	24 91       	lpm	r18, Z
  ee:	20 93 00 00 	sts	0x0000, r18
  f2:	33 24       	eor	r3, r3
  f4:	33 94       	inc	r3
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z4tonehjm+0xf8>
  f8:	10 92 b0 00 	sts	0x00B0, r1
  fc:	10 92 b1 00 	sts	0x00B1, r1
 100:	90 91 b0 00 	lds	r25, 0x00B0
 104:	92 60       	ori	r25, 0x02	; 2
 106:	90 93 b0 00 	sts	0x00B0, r25
 10a:	90 91 b1 00 	lds	r25, 0x00B1
 10e:	91 60       	ori	r25, 0x01	; 1
 110:	90 93 b1 00 	sts	0x00B1, r25
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	f0 40       	sbci	r31, 0x00	; 0
 11e:	e4 91       	lpm	r30, Z
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	f0 40       	sbci	r31, 0x00	; 0
 12a:	45 91       	lpm	r20, Z+
 12c:	54 91       	lpm	r21, Z
 12e:	50 93 00 00 	sts	0x0000, r21
 132:	40 93 00 00 	sts	0x0000, r20
 136:	f9 01       	movw	r30, r18
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	24 91       	lpm	r18, Z
 13e:	20 93 00 00 	sts	0x0000, r18
 142:	52 e0       	ldi	r21, 0x02	; 2
 144:	35 2e       	mov	r3, r21
 146:	00 c0       	rjmp	.+0      	; 0x148 <_Z4tonehjm+0x148>
 148:	3e 2e       	mov	r3, r30
 14a:	37 fc       	sbrc	r3, 7
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z4tonehjm+0x14e>
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 154:	48 01       	movw	r8, r16
 156:	a1 2c       	mov	r10, r1
 158:	b1 2c       	mov	r11, r1
 15a:	83 2d       	mov	r24, r3
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	01 f0       	breq	.+0      	; 0x160 <_Z4tonehjm+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z4tonehjm+0x162>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	72 e1       	ldi	r23, 0x12	; 18
 166:	8a e7       	ldi	r24, 0x7A	; 122
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a5 01       	movw	r20, r10
 16c:	94 01       	movw	r18, r8
 16e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 172:	29 83       	std	Y+1, r18	; 0x01
 174:	3a 83       	std	Y+2, r19	; 0x02
 176:	4b 83       	std	Y+3, r20	; 0x03
 178:	5c 83       	std	Y+4, r21	; 0x04
 17a:	69 01       	movw	r12, r18
 17c:	7a 01       	movw	r14, r20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	c8 1a       	sub	r12, r24
 182:	d1 08       	sbc	r13, r1
 184:	e1 08       	sbc	r14, r1
 186:	f1 08       	sbc	r15, r1
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	c9 16       	cp	r12, r25
 18c:	d1 04       	cpc	r13, r1
 18e:	e1 04       	cpc	r14, r1
 190:	f1 04       	cpc	r15, r1
 192:	01 f0       	breq	.+0      	; 0x194 <_Z4tonehjm+0x194>
 194:	00 f4       	brcc	.+0      	; 0x196 <_Z4tonehjm+0x196>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_Z4tonehjm+0x198>
 198:	60 e4       	ldi	r22, 0x40	; 64
 19a:	72 e4       	ldi	r23, 0x42	; 66
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a5 01       	movw	r20, r10
 1a2:	94 01       	movw	r18, r8
 1a4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1a8:	69 01       	movw	r12, r18
 1aa:	7a 01       	movw	r14, r20
 1ac:	e1 e0       	ldi	r30, 0x01	; 1
 1ae:	ce 1a       	sub	r12, r30
 1b0:	d1 08       	sbc	r13, r1
 1b2:	e1 08       	sbc	r14, r1
 1b4:	f1 08       	sbc	r15, r1
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	3f 12       	cpse	r3, r31
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_Z4tonehjm+0x1bc>
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	c8 16       	cp	r12, r24
 1c0:	d1 04       	cpc	r13, r1
 1c2:	e1 04       	cpc	r14, r1
 1c4:	f1 04       	cpc	r15, r1
 1c6:	01 f0       	breq	.+0      	; 0x1c8 <_Z4tonehjm+0x1c8>
 1c8:	00 f4       	brcc	.+0      	; 0x1ca <_Z4tonehjm+0x1ca>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_Z4tonehjm+0x1cc>
 1cc:	60 e9       	ldi	r22, 0x90	; 144
 1ce:	70 ed       	ldi	r23, 0xD0	; 208
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	a5 01       	movw	r20, r10
 1d6:	94 01       	movw	r18, r8
 1d8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1dc:	69 01       	movw	r12, r18
 1de:	7a 01       	movw	r14, r20
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	c9 1a       	sub	r12, r25
 1e4:	d1 08       	sbc	r13, r1
 1e6:	e1 08       	sbc	r14, r1
 1e8:	f1 08       	sbc	r15, r1
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z4tonehjm+0x1ee>
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	ef ef       	ldi	r30, 0xFF	; 255
 1f2:	ce 16       	cp	r12, r30
 1f4:	d1 04       	cpc	r13, r1
 1f6:	e1 04       	cpc	r14, r1
 1f8:	f1 04       	cpc	r15, r1
 1fa:	01 f0       	breq	.+0      	; 0x1fc <_Z4tonehjm+0x1fc>
 1fc:	00 f4       	brcc	.+0      	; 0x1fe <_Z4tonehjm+0x1fe>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z4tonehjm+0x200>
 200:	68 e4       	ldi	r22, 0x48	; 72
 202:	78 ee       	ldi	r23, 0xE8	; 232
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	a5 01       	movw	r20, r10
 20a:	94 01       	movw	r18, r8
 20c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 210:	69 01       	movw	r12, r18
 212:	7a 01       	movw	r14, r20
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	cf 1a       	sub	r12, r31
 218:	d1 08       	sbc	r13, r1
 21a:	e1 08       	sbc	r14, r1
 21c:	f1 08       	sbc	r15, r1
 21e:	33 20       	and	r3, r3
 220:	01 f0       	breq	.+0      	; 0x222 <_Z4tonehjm+0x222>
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	38 12       	cpse	r3, r24
 226:	00 c0       	rjmp	.+0      	; 0x228 <_Z4tonehjm+0x228>
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	c9 16       	cp	r12, r25
 22c:	d1 04       	cpc	r13, r1
 22e:	e1 04       	cpc	r14, r1
 230:	f1 04       	cpc	r15, r1
 232:	01 f0       	breq	.+0      	; 0x234 <_Z4tonehjm+0x234>
 234:	00 f4       	brcc	.+0      	; 0x236 <_Z4tonehjm+0x236>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_Z4tonehjm+0x238>
 238:	64 e2       	ldi	r22, 0x24	; 36
 23a:	74 ef       	ldi	r23, 0xF4	; 244
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	a5 01       	movw	r20, r10
 242:	94 01       	movw	r18, r8
 244:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 248:	69 01       	movw	r12, r18
 24a:	7a 01       	movw	r14, r20
 24c:	e1 e0       	ldi	r30, 0x01	; 1
 24e:	ce 1a       	sub	r12, r30
 250:	d1 08       	sbc	r13, r1
 252:	e1 08       	sbc	r14, r1
 254:	f1 08       	sbc	r15, r1
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	00 c0       	rjmp	.+0      	; 0x25a <_Z4tonehjm+0x25a>
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	00 c0       	rjmp	.+0      	; 0x25e <_Z4tonehjm+0x25e>
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	ff ef       	ldi	r31, 0xFF	; 255
 262:	cf 16       	cp	r12, r31
 264:	d1 04       	cpc	r13, r1
 266:	e1 04       	cpc	r14, r1
 268:	f1 04       	cpc	r15, r1
 26a:	01 f0       	breq	.+0      	; 0x26c <_Z4tonehjm+0x26c>
 26c:	00 f0       	brcs	.+0      	; 0x26e <_Z4tonehjm+0x26e>
 26e:	62 e1       	ldi	r22, 0x12	; 18
 270:	7a e7       	ldi	r23, 0x7A	; 122
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	a5 01       	movw	r20, r10
 278:	94 01       	movw	r18, r8
 27a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27e:	69 01       	movw	r12, r18
 280:	7a 01       	movw	r14, r20
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	c8 1a       	sub	r12, r24
 286:	d1 08       	sbc	r13, r1
 288:	e1 08       	sbc	r14, r1
 28a:	f1 08       	sbc	r15, r1
 28c:	31 10       	cpse	r3, r1
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_Z4tonehjm+0x290>
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	00 c0       	rjmp	.+0      	; 0x294 <_Z4tonehjm+0x294>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	9f ef       	ldi	r25, 0xFF	; 255
 298:	c9 16       	cp	r12, r25
 29a:	d1 04       	cpc	r13, r1
 29c:	e1 04       	cpc	r14, r1
 29e:	f1 04       	cpc	r15, r1
 2a0:	01 f0       	breq	.+0      	; 0x2a2 <_Z4tonehjm+0x2a2>
 2a2:	00 f0       	brcs	.+0      	; 0x2a4 <_Z4tonehjm+0x2a4>
 2a4:	c9 80       	ldd	r12, Y+1	; 0x01
 2a6:	da 80       	ldd	r13, Y+2	; 0x02
 2a8:	eb 80       	ldd	r14, Y+3	; 0x03
 2aa:	fc 80       	ldd	r15, Y+4	; 0x04
 2ac:	9a e0       	ldi	r25, 0x0A	; 10
 2ae:	f6 94       	lsr	r15
 2b0:	e7 94       	ror	r14
 2b2:	d7 94       	ror	r13
 2b4:	c7 94       	ror	r12
 2b6:	9a 95       	dec	r25
 2b8:	01 f4       	brne	.+0      	; 0x2ba <_Z4tonehjm+0x2ba>
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	ce 1a       	sub	r12, r30
 2be:	d1 08       	sbc	r13, r1
 2c0:	e1 08       	sbc	r14, r1
 2c2:	f1 08       	sbc	r15, r1
 2c4:	33 20       	and	r3, r3
 2c6:	01 f0       	breq	.+0      	; 0x2c8 <_Z4tonehjm+0x2c8>
 2c8:	87 e0       	ldi	r24, 0x07	; 7
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_Z4tonehjm+0x2cc>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	33 20       	and	r3, r3
 2d0:	01 f0       	breq	.+0      	; 0x2d2 <_Z4tonehjm+0x2d2>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_Z4tonehjm+0x2d4>
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	85 bd       	out	0x25, r24	; 37
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <_Z4tonehjm+0x2da>
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 b1 00 	sts	0x00B1, r24
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <_Z4tonehjm+0x2e2>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	72 e1       	ldi	r23, 0x12	; 18
 2e6:	8a e7       	ldi	r24, 0x7A	; 122
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a5 01       	movw	r20, r10
 2ec:	94 01       	movw	r18, r8
 2ee:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2f2:	69 01       	movw	r12, r18
 2f4:	7a 01       	movw	r14, r20
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	cf 1a       	sub	r12, r31
 2fa:	d1 08       	sbc	r13, r1
 2fc:	e1 08       	sbc	r14, r1
 2fe:	f1 08       	sbc	r15, r1
 300:	c1 14       	cp	r12, r1
 302:	d1 04       	cpc	r13, r1
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	e8 06       	cpc	r14, r24
 308:	f1 04       	cpc	r15, r1
 30a:	00 f0       	brcs	.+0      	; 0x30c <_Z4tonehjm+0x30c>
 30c:	68 e4       	ldi	r22, 0x48	; 72
 30e:	78 ee       	ldi	r23, 0xE8	; 232
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	a5 01       	movw	r20, r10
 316:	94 01       	movw	r18, r8
 318:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 31c:	69 01       	movw	r12, r18
 31e:	7a 01       	movw	r14, r20
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	c9 1a       	sub	r12, r25
 324:	d1 08       	sbc	r13, r1
 326:	e1 08       	sbc	r14, r1
 328:	f1 08       	sbc	r15, r1
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	00 c0       	rjmp	.+0      	; 0x32e <_Z4tonehjm+0x32e>
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	e1 e0       	ldi	r30, 0x01	; 1
 332:	3e 12       	cpse	r3, r30
 334:	00 c0       	rjmp	.+0      	; 0x336 <_Z4tonehjm+0x336>
 336:	80 91 81 00 	lds	r24, 0x0081
 33a:	88 7f       	andi	r24, 0xF8	; 248
 33c:	89 2b       	or	r24, r25
 33e:	80 93 81 00 	sts	0x0081, r24
 342:	41 14       	cp	r4, r1
 344:	51 04       	cpc	r5, r1
 346:	61 04       	cpc	r6, r1
 348:	71 04       	cpc	r7, r1
 34a:	01 f0       	breq	.+0      	; 0x34c <_Z4tonehjm+0x34c>
 34c:	d8 01       	movw	r26, r16
 34e:	aa 0f       	add	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a3 01       	movw	r20, r6
 354:	92 01       	movw	r18, r4
 356:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 35a:	28 ee       	ldi	r18, 0xE8	; 232
 35c:	33 e0       	ldi	r19, 0x03	; 3
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 366:	00 c0       	rjmp	.+0      	; 0x368 <_Z4tonehjm+0x368>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	3f ef       	ldi	r19, 0xFF	; 255
 36c:	a9 01       	movw	r20, r18
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	3f 16       	cp	r3, r31
 372:	01 f0       	breq	.+0      	; 0x374 <_Z4tonehjm+0x374>
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	38 16       	cp	r3, r24
 378:	01 f0       	breq	.+0      	; 0x37a <_Z4tonehjm+0x37a>
 37a:	31 10       	cpse	r3, r1
 37c:	00 c0       	rjmp	.+0      	; 0x37e <_Z4tonehjm+0x37e>
 37e:	c7 bc       	out	0x27, r12	; 39
 380:	20 93 00 00 	sts	0x0000, r18
 384:	30 93 00 00 	sts	0x0000, r19
 388:	40 93 00 00 	sts	0x0000, r20
 38c:	50 93 00 00 	sts	0x0000, r21
 390:	80 91 6e 00 	lds	r24, 0x006E
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 93 6e 00 	sts	0x006E, r24
 39a:	00 c0       	rjmp	.+0      	; 0x39c <_Z4tonehjm+0x39c>
 39c:	d0 92 89 00 	sts	0x0089, r13
 3a0:	c0 92 88 00 	sts	0x0088, r12
 3a4:	20 93 00 00 	sts	0x0000, r18
 3a8:	30 93 00 00 	sts	0x0000, r19
 3ac:	40 93 00 00 	sts	0x0000, r20
 3b0:	50 93 00 00 	sts	0x0000, r21
 3b4:	80 91 6f 00 	lds	r24, 0x006F
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	80 93 6f 00 	sts	0x006F, r24
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <_Z4tonehjm+0x3c0>
 3c0:	c0 92 b3 00 	sts	0x00B3, r12
 3c4:	20 93 00 00 	sts	0x0000, r18
 3c8:	30 93 00 00 	sts	0x0000, r19
 3cc:	40 93 00 00 	sts	0x0000, r20
 3d0:	50 93 00 00 	sts	0x0000, r21
 3d4:	80 91 70 00 	lds	r24, 0x0070
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	80 93 70 00 	sts	0x0070, r24
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <_Z4tonehjm+0x3e0>
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_Z4tonehjm+0x3e4>
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	cf 90       	pop	r12
 3fc:	bf 90       	pop	r11
 3fe:	af 90       	pop	r10
 400:	9f 90       	pop	r9
 402:	8f 90       	pop	r8
 404:	7f 90       	pop	r7
 406:	6f 90       	pop	r6
 408:	5f 90       	pop	r5
 40a:	4f 90       	pop	r4
 40c:	3f 90       	pop	r3
 40e:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000410 <_Z12disableTimerh>:
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	01 f0       	breq	.+0      	; 0x414 <_Z12disableTimerh+0x4>
 414:	00 f0       	brcs	.+0      	; 0x416 <_Z12disableTimerh+0x6>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	01 f0       	breq	.+0      	; 0x41a <_Z12disableTimerh+0xa>
 41a:	08 95       	ret
 41c:	10 92 6e 00 	sts	0x006E, r1
 420:	08 95       	ret
 422:	80 91 6f 00 	lds	r24, 0x006F
 426:	8d 7f       	andi	r24, 0xFD	; 253
 428:	80 93 6f 00 	sts	0x006F, r24
 42c:	08 95       	ret
 42e:	80 91 70 00 	lds	r24, 0x0070
 432:	8d 7f       	andi	r24, 0xFD	; 253
 434:	80 93 70 00 	sts	0x0070, r24
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 93 b0 00 	sts	0x00B0, r24
 43e:	80 91 b1 00 	lds	r24, 0x00B1
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	84 60       	ori	r24, 0x04	; 4
 446:	80 93 b1 00 	sts	0x00B1, r24
 44a:	10 92 b3 00 	sts	0x00B3, r1
 44e:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000860 <_Z6noToneh>:
 860:	cf 93       	push	r28
 862:	c8 2f       	mov	r28, r24
 864:	80 91 00 00 	lds	r24, 0x0000
 868:	8c 13       	cpse	r24, r28
 86a:	00 c0       	rjmp	.+0      	; 0x86c <_Z6noToneh+0xc>
 86c:	e0 e0       	ldi	r30, 0x00	; 0
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	84 91       	lpm	r24, Z
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	90 93 00 00 	sts	0x0000, r25
 878:	00 c0       	rjmp	.+0      	; 0x87a <_Z6noToneh+0x1a>
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	0e 94 00 00 	call	0	; 0x0 <timer2_pin_mask>
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	8c 2f       	mov	r24, r28
 884:	cf 91       	pop	r28
 886:	0c 94 00 00 	jmp	0	; 0x0 <timer2_pin_mask>

Disassembly of section .text.__vector_7:

000010ea <__vector_7>:
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	80 91 00 00 	lds	r24, 0x0000
    1110:	90 91 00 00 	lds	r25, 0x0000
    1114:	a0 91 00 00 	lds	r26, 0x0000
    1118:	b0 91 00 00 	lds	r27, 0x0000
    111c:	89 2b       	or	r24, r25
    111e:	8a 2b       	or	r24, r26
    1120:	8b 2b       	or	r24, r27
    1122:	01 f0       	breq	.+0      	; 0x1124 <__vector_7+0x3a>
    1124:	90 91 00 00 	lds	r25, 0x0000
    1128:	e0 91 00 00 	lds	r30, 0x0000
    112c:	f0 91 00 00 	lds	r31, 0x0000
    1130:	80 81       	ld	r24, Z
    1132:	89 27       	eor	r24, r25
    1134:	80 83       	st	Z, r24
    1136:	80 91 00 00 	lds	r24, 0x0000
    113a:	90 91 00 00 	lds	r25, 0x0000
    113e:	a0 91 00 00 	lds	r26, 0x0000
    1142:	b0 91 00 00 	lds	r27, 0x0000
    1146:	18 16       	cp	r1, r24
    1148:	19 06       	cpc	r1, r25
    114a:	1a 06       	cpc	r1, r26
    114c:	1b 06       	cpc	r1, r27
    114e:	04 f4       	brge	.+0      	; 0x1150 <__vector_7+0x66>
    1150:	80 91 00 00 	lds	r24, 0x0000
    1154:	90 91 00 00 	lds	r25, 0x0000
    1158:	a0 91 00 00 	lds	r26, 0x0000
    115c:	b0 91 00 00 	lds	r27, 0x0000
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	a1 09       	sbc	r26, r1
    1164:	b1 09       	sbc	r27, r1
    1166:	80 93 00 00 	sts	0x0000, r24
    116a:	90 93 00 00 	sts	0x0000, r25
    116e:	a0 93 00 00 	sts	0x0000, r26
    1172:	b0 93 00 00 	sts	0x0000, r27
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <__vector_7+0x8e>
    1178:	80 91 00 00 	lds	r24, 0x0000
    117c:	0e 94 00 00 	call	0	; 0x0 <timer2_pin_mask>
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010af  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007e0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010b9  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.attachInterrupt 00000040  00000000  00000000  000018cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.detachInterrupt 00000020  00000000  00000000  0000190d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_1 0000005a  00000000  00000000  0000192d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_2 0000005a  00000000  00000000  00001987  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.intFunc  00000004  00000000  00000000  000019e1  2**0
                  ALLOC
 10 .comment      00000012  00000000  00000000  000019e1  2**0
                  CONTENTS, READONLY

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	e8 2f       	mov	r30, r24
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	71 83       	std	Z+1, r23	; 0x01
  12:	60 83       	st	Z, r22
  14:	81 30       	cpi	r24, 0x01	; 1
  16:	01 f0       	breq	.+0      	; 0x18 <attachInterrupt+0x18>
  18:	80 91 69 00 	lds	r24, 0x0069
  1c:	8c 7f       	andi	r24, 0xFC	; 252
  1e:	84 2b       	or	r24, r20
  20:	80 93 69 00 	sts	0x0069, r24
  if(intFunc[EXTERNAL_INT_1])
  24:	e8 9a       	sbi	0x1d, 0	; 29
  26:	08 95       	ret
  28:	80 91 69 00 	lds	r24, 0x0069
  2c:	44 0f       	add	r20, r20
    intFunc[EXTERNAL_INT_1]();
  2e:	55 1f       	adc	r21, r21
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	83 7f       	andi	r24, 0xF3	; 243
  36:	84 2b       	or	r24, r20
}
  38:	80 93 69 00 	sts	0x0069, r24
  3c:	e9 9a       	sbi	0x1d, 1	; 29
  3e:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000040 <detachInterrupt>:
  40:	82 30       	cpi	r24, 0x02	; 2
  42:	00 f4       	brcc	.+0      	; 0x44 <detachInterrupt+0x4>
  44:	81 30       	cpi	r24, 0x01	; 1
  46:	01 f0       	breq	.+0      	; 0x48 <detachInterrupt+0x8>
  48:	e8 98       	cbi	0x1d, 0	; 29
  4a:	00 c0       	rjmp	.+0      	; 0x4c <detachInterrupt+0xc>
  4c:	e9 98       	cbi	0x1d, 1	; 29
  4e:	e8 2f       	mov	r30, r24
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	ee 0f       	add	r30, r30
  54:	ff 1f       	adc	r31, r31
  56:	e0 50       	subi	r30, 0x00	; 0
  58:	f0 40       	sbci	r31, 0x00	; 0
  5a:	11 82       	std	Z+1, r1	; 0x01
  5c:	10 82       	st	Z, r1
  5e:	08 95       	ret

Disassembly of section .text.__vector_1:

000000a0 <__vector_1>:
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	80 91 00 00 	lds	r24, 0x0000
  c6:	90 91 00 00 	lds	r25, 0x0000
  ca:	89 2b       	or	r24, r25
  cc:	01 f0       	breq	.+0      	; 0xce <__vector_1+0x2e>
  ce:	e0 91 00 00 	lds	r30, 0x0000
  d2:	f0 91 00 00 	lds	r31, 0x0000
  d6:	09 95       	icall
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

Disassembly of section .text.__vector_2:

0000019a <__vector_2>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	80 91 00 00 	lds	r24, 0x0000
 1c0:	90 91 00 00 	lds	r25, 0x0000
 1c4:	89 2b       	or	r24, r25
 1c6:	01 f0       	breq	.+0      	; 0x1c8 <__vector_2+0x2e>
 1c8:	e0 91 00 00 	lds	r30, 0x0000
 1cc:	f0 91 00 00 	lds	r31, 0x0000
 1d0:	09 95       	icall
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000528  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000acb  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z10randomSeedj 00000010  00000000  00000000  00001027  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6randoml 00000048  00000000  00000000  00001037  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6randomll 00000038  00000000  00000000  0000107f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z3maplllll 0000008e  00000000  00000000  000010b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8makeWordj 00000002  00000000  00000000  00001145  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._Z8makeWordhh 0000000a  00000000  00000000  00001147  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .comment      00000012  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0c 94 00 00 	jmp	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000010 <_Z6randoml>:
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	00 d0       	rcall	.+0      	; 0x16 <_Z6randoml+0x6>
  16:	00 d0       	rcall	.+0      	; 0x18 <_Z6randoml+0x8>
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	9b 01       	movw	r18, r22
  1e:	ac 01       	movw	r20, r24
  20:	61 15       	cp	r22, r1
  22:	71 05       	cpc	r23, r1
  24:	81 05       	cpc	r24, r1
  26:	91 05       	cpc	r25, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_Z6randoml+0x1a>
  2a:	69 83       	std	Y+1, r22	; 0x01
  2c:	3a 83       	std	Y+2, r19	; 0x02
  2e:	4b 83       	std	Y+3, r20	; 0x03
  30:	5c 83       	std	Y+4, r21	; 0x04
  32:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  36:	29 81       	ldd	r18, Y+1	; 0x01
  38:	3a 81       	ldd	r19, Y+2	; 0x02
  3a:	4b 81       	ldd	r20, Y+3	; 0x03
  3c:	5c 81       	ldd	r21, Y+4	; 0x04
  3e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_Z6randoml+0x34>
  44:	60 e0       	ldi	r22, 0x00	; 0
  46:	70 e0       	ldi	r23, 0x00	; 0
  48:	cb 01       	movw	r24, r22
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000068 <_Z6randomll>:
  68:	cf 92       	push	r12
  6a:	df 92       	push	r13
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	6b 01       	movw	r12, r22
  72:	7c 01       	movw	r14, r24
  74:	62 17       	cp	r22, r18
  76:	73 07       	cpc	r23, r19
  78:	84 07       	cpc	r24, r20
  7a:	95 07       	cpc	r25, r21
  7c:	04 f4       	brge	.+0      	; 0x7e <_Z6randomll+0x16>
  7e:	ca 01       	movw	r24, r20
  80:	b9 01       	movw	r22, r18
  82:	6c 19       	sub	r22, r12
  84:	7d 09       	sbc	r23, r13
  86:	8e 09       	sbc	r24, r14
  88:	9f 09       	sbc	r25, r15
  8a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8e:	6c 0d       	add	r22, r12
  90:	7d 1d       	adc	r23, r13
  92:	8e 1d       	adc	r24, r14
  94:	9f 1d       	adc	r25, r15
  96:	ff 90       	pop	r15
  98:	ef 90       	pop	r14
  9a:	df 90       	pop	r13
  9c:	cf 90       	pop	r12
  9e:	08 95       	ret

Disassembly of section .text._Z3maplllll:

00000108 <_Z3maplllll>:
 108:	4f 92       	push	r4
 10a:	5f 92       	push	r5
 10c:	6f 92       	push	r6
 10e:	7f 92       	push	r7
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	29 01       	movw	r4, r18
 12a:	3a 01       	movw	r6, r20
 12c:	62 1b       	sub	r22, r18
 12e:	73 0b       	sbc	r23, r19
 130:	84 0b       	sbc	r24, r20
 132:	95 0b       	sbc	r25, r21
 134:	29 89       	ldd	r18, Y+17	; 0x11
 136:	3a 89       	ldd	r19, Y+18	; 0x12
 138:	4b 89       	ldd	r20, Y+19	; 0x13
 13a:	5c 89       	ldd	r21, Y+20	; 0x14
 13c:	2a 19       	sub	r18, r10
 13e:	3b 09       	sbc	r19, r11
 140:	4c 09       	sbc	r20, r12
 142:	5d 09       	sbc	r21, r13
 144:	29 8b       	std	Y+17, r18	; 0x11
 146:	3a 8b       	std	Y+18, r19	; 0x12
 148:	4b 8b       	std	Y+19, r20	; 0x13
 14a:	5c 8b       	std	Y+20, r21	; 0x14
 14c:	9b 01       	movw	r18, r22
 14e:	ac 01       	movw	r20, r24
 150:	69 89       	ldd	r22, Y+17	; 0x11
 152:	7a 89       	ldd	r23, Y+18	; 0x12
 154:	8b 89       	ldd	r24, Y+19	; 0x13
 156:	9c 89       	ldd	r25, Y+20	; 0x14
 158:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15c:	e4 18       	sub	r14, r4
 15e:	f5 08       	sbc	r15, r5
 160:	06 09       	sbc	r16, r6
 162:	17 09       	sbc	r17, r7
 164:	a8 01       	movw	r20, r16
 166:	97 01       	movw	r18, r14
 168:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16c:	2a 0d       	add	r18, r10
 16e:	3b 1d       	adc	r19, r11
 170:	4c 1d       	adc	r20, r12
 172:	5d 1d       	adc	r21, r13
 174:	ca 01       	movw	r24, r20
 176:	b9 01       	movw	r22, r18
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	bf 90       	pop	r11
 18a:	af 90       	pop	r10
 18c:	7f 90       	pop	r7
 18e:	6f 90       	pop	r6
 190:	5f 90       	pop	r5
 192:	4f 90       	pop	r4
 194:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

0000029e <_Z8makeWordj>:
 29e:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

0000053e <_Z8makeWordhh>:
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	9b 01       	movw	r18, r22
 542:	38 2b       	or	r19, r24
 544:	c9 01       	movw	r24, r18
 546:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  00000000  00000000  00000044  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  00000000  00000000  0000004c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .text         00000000  00000000  00000000  00000054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data         00000000  00000000  00000000  00000054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000000  00000000  00000000  00000054  2**0
                  ALLOC
  7 .stab         0000261c  00000000  00000000  00000054  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .stabstr      00002087  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .text.itoa    00000004  00000000  00000000  000046f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.ltoa    00000004  00000000  00000000  000046fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.utoa    00000004  00000000  00000000  000046ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.ultoa   00000004  00000000  00000000  00004703  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6StringD2Ev 0000000a  00000000  00000000  00004707  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6String10invalidateEv 00000024  00000000  00000000  00004711  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  00004735  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6String7reserveEj 00000038  00000000  00000000  00004769  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  000047a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6StringC2EPKc 0000002e  00000000  00000000  000047e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  00004811  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6StringC2ERKS_ 00000014  00000000  00000000  0000483f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6StringaSEPKc 00000030  00000000  00000000  00004853  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6StringC2Ec 00000032  00000000  00000000  00004883  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6StringC2Ehh 0000005c  00000000  00000000  000048b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6StringC2Eih 0000005a  00000000  00000000  00004911  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6StringC2Ejh 0000005a  00000000  00000000  0000496b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6StringC2Elh 0000005c  00000000  00000000  000049c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6StringC2Emh 0000005c  00000000  00000000  00004a21  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6String6concatEPKcj 00000058  00000000  00000000  00004a7d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN6String6concatERKS_ 0000000e  00000000  00000000  00004ad5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN6String6concatEPKc 00000020  00000000  00000000  00004ae3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN6String6concatEc 00000026  00000000  00000000  00004b03  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN6String6concatEh 0000005a  00000000  00000000  00004b29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN6String6concatEi 00000064  00000000  00000000  00004b83  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN6String6concatEj 0000005e  00000000  00000000  00004be7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String6concatEl 00000066  00000000  00000000  00004c45  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String6concatEm 00000066  00000000  00000000  00004cab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZplRK15StringSumHelperRK6String 00000026  00000000  00000000  00004d11  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZplRK15StringSumHelperPKc 00000034  00000000  00000000  00004d37  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZplRK15StringSumHelperc 0000001c  00000000  00000000  00004d6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZplRK15StringSumHelperh 0000001c  00000000  00000000  00004d87  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZplRK15StringSumHelperi 0000001c  00000000  00000000  00004da3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZplRK15StringSumHelperj 0000001c  00000000  00000000  00004dbf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZplRK15StringSumHelperl 0000001c  00000000  00000000  00004ddb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZplRK15StringSumHelperm 0000001c  00000000  00000000  00004df7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZNK6String9compareToERKS_ 00000060  00000000  00000000  00004e13  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZNK6String6equalsERKS_ 00000026  00000000  00000000  00004e73  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZNK6String6equalsEPKc 0000003e  00000000  00000000  00004e99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00004ed7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  00004ee5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  00004ef7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00004f09  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000072  00000000  00000000  00004f19  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZNK6String10startsWithERKS_j 00000048  00000000  00000000  00004f8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZNK6String10startsWithERKS_ 0000001e  00000000  00000000  00004fd3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZNK6String8endsWithERKS_ 00000042  00000000  00000000  00004ff1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZN6String9setCharAtEjc 0000001c  00000000  00000000  00005033  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZN6StringixEj 00000024  00000000  00000000  0000504f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZNK6StringixEj 00000022  00000000  00000000  00005073  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZNK6String6charAtEj 00000004  00000000  00000000  00005095  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZNK6String8getBytesEPhjj 00000054  00000000  00000000  00005099  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZNK6String7indexOfEcj 00000038  00000000  00000000  000050ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZNK6String7indexOfEc 00000008  00000000  00000000  00005125  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZNK6String7indexOfERKS_j 00000038  00000000  00000000  0000512d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZNK6String7indexOfERKS_ 00000008  00000000  00000000  00005165  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZNK6String11lastIndexOfEcj 00000066  00000000  00000000  0000516d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZNK6String11lastIndexOfEc 0000000e  00000000  00000000  000051d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  000051e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZNK6String11lastIndexOfERKS_ 00000014  00000000  00000000  0000527d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .rodata.str1.1 00000001  00000000  00000000  00005291  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 70 .text._ZNK6String9substringEjj 0000008a  00000000  00000000  00005292  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZNK6String9substringEj 00000018  00000000  00000000  0000531c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZN6String7replaceEcc 0000001c  00000000  00000000  00005334  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZN6String7replaceERKS_S1_ 000001e6  00000000  00000000  00005350  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  00005536  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  0000555e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZN6String4trimEv 000000be  00000000  00000000  00005586  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZNK6String5toIntEv 00000016  00000000  00000000  00005644  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  0000565a  2**0
                  ALLOC
 79 .comment      00000012  00000000  00000000  0000565a  2**0
                  CONTENTS, READONLY

Disassembly of section .text.itoa:

00000000 <itoa>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0c 94 00 00 	jmp	0	; 0x0 <itoa>

Disassembly of section .text.ltoa:

00000000 <ltoa>:
   4:	0c 94       	Address 0x00000004 is out of bounds.
.word	0xffff	; ????
	...

Disassembly of section .text.utoa:

0000000c <utoa>:
   c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ultoa:

0000001c <ultoa>:
	return 0;
}
  1c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6StringD2Ev:

0000003c <_ZN6StringD1Ev>:
  3c:	fc 01       	movw	r30, r24
  3e:	80 81       	ld	r24, Z
  40:	91 81       	ldd	r25, Z+1	; 0x01
  42:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6String10invalidateEv:

00000082 <_ZN6String10invalidateEv>:
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	ec 01       	movw	r28, r24
  88:	88 81       	ld	r24, Y
  8a:	99 81       	ldd	r25, Y+1	; 0x01
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN6String10invalidateEv+0xe>
  90:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  94:	19 82       	std	Y+1, r1	; 0x01
  96:	18 82       	st	Y, r1
  98:	1d 82       	std	Y+5, r1	; 0x05
  9a:	1c 82       	std	Y+4, r1	; 0x04
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000128 <_ZN6String12changeBufferEj>:
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
 132:	8b 01       	movw	r16, r22
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	88 81       	ld	r24, Y
 13a:	99 81       	ldd	r25, Y+1	; 0x01
 13c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	01 f0       	breq	.+0      	; 0x144 <_ZN6String12changeBufferEj+0x1c>
 144:	99 83       	std	Y+1, r25	; 0x01
 146:	88 83       	st	Y, r24
 148:	1b 83       	std	Y+3, r17	; 0x03
 14a:	0a 83       	std	Y+2, r16	; 0x02
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN6String12changeBufferEj+0x28>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000284 <_ZN6String7reserveEj>:
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
 28a:	88 81       	ld	r24, Y
 28c:	99 81       	ldd	r25, Y+1	; 0x01
 28e:	89 2b       	or	r24, r25
 290:	01 f0       	breq	.+0      	; 0x292 <_ZN6String7reserveEj+0xe>
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	9b 81       	ldd	r25, Y+3	; 0x03
 296:	86 17       	cp	r24, r22
 298:	97 07       	cpc	r25, r23
 29a:	00 f4       	brcc	.+0      	; 0x29c <_ZN6String7reserveEj+0x18>
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a2:	88 23       	and	r24, r24
 2a4:	01 f0       	breq	.+0      	; 0x2a6 <_ZN6String7reserveEj+0x22>
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	9d 81       	ldd	r25, Y+5	; 0x05
 2aa:	89 2b       	or	r24, r25
 2ac:	01 f4       	brne	.+0      	; 0x2ae <_ZN6String7reserveEj+0x2a>
 2ae:	e8 81       	ld	r30, Y
 2b0:	f9 81       	ldd	r31, Y+1	; 0x01
 2b2:	10 82       	st	Z, r1
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000540 <_ZN6String4copyEPKcj>:
 540:	ef 92       	push	r14
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
 54e:	7b 01       	movw	r14, r22
 550:	8a 01       	movw	r16, r20
 552:	ba 01       	movw	r22, r20
 554:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 558:	81 11       	cpse	r24, r1
 55a:	00 c0       	rjmp	.+0      	; 0x55c <_ZN6String4copyEPKcj+0x1c>
 55c:	ce 01       	movw	r24, r28
 55e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 562:	00 c0       	rjmp	.+0      	; 0x564 <_ZN6String4copyEPKcj+0x24>
 564:	1d 83       	std	Y+5, r17	; 0x05
 566:	0c 83       	std	Y+4, r16	; 0x04
 568:	b7 01       	movw	r22, r14
 56a:	88 81       	ld	r24, Y
 56c:	99 81       	ldd	r25, Y+1	; 0x01
 56e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 572:	ce 01       	movw	r24, r28
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000ac2 <_ZN6StringC1EPKc>:
 ac2:	fc 01       	movw	r30, r24
 ac4:	11 82       	std	Z+1, r1	; 0x01
 ac6:	10 82       	st	Z, r1
 ac8:	13 82       	std	Z+3, r1	; 0x03
 aca:	12 82       	std	Z+2, r1	; 0x02
 acc:	15 82       	std	Z+5, r1	; 0x05
 ace:	14 82       	std	Z+4, r1	; 0x04
 ad0:	16 82       	std	Z+6, r1	; 0x06
 ad2:	61 15       	cp	r22, r1
 ad4:	71 05       	cpc	r23, r1
 ad6:	01 f0       	breq	.+0      	; 0xad8 <_ZN6StringC1EPKc+0x16>
 ad8:	fb 01       	movw	r30, r22
 ada:	01 90       	ld	r0, Z+
 adc:	00 20       	and	r0, r0
 ade:	01 f4       	brne	.+0      	; 0xae0 <_ZN6StringC1EPKc+0x1e>
 ae0:	af 01       	movw	r20, r30
 ae2:	41 50       	subi	r20, 0x01	; 1
 ae4:	51 09       	sbc	r21, r1
 ae6:	46 1b       	sub	r20, r22
 ae8:	57 0b       	sbc	r21, r23
 aea:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 aee:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

000015b2 <_ZN6StringaSERKS_>:
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	ec 01       	movw	r28, r24
    15b8:	fb 01       	movw	r30, r22
    15ba:	86 17       	cp	r24, r22
    15bc:	97 07       	cpc	r25, r23
    15be:	01 f0       	breq	.+0      	; 0x15c0 <_ZN6StringaSERKS_+0xe>
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	61 15       	cp	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	01 f0       	breq	.+0      	; 0x15ca <_ZN6StringaSERKS_+0x18>
    15ca:	44 81       	ldd	r20, Z+4	; 0x04
    15cc:	55 81       	ldd	r21, Z+5	; 0x05
    15ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <_ZN6StringaSERKS_+0x22>
    15d4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    15d8:	ce 01       	movw	r24, r28
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00002b92 <_ZN6StringC1ERKS_>:
    2b92:	fc 01       	movw	r30, r24
    2b94:	11 82       	std	Z+1, r1	; 0x01
    2b96:	10 82       	st	Z, r1
    2b98:	13 82       	std	Z+3, r1	; 0x03
    2b9a:	12 82       	std	Z+2, r1	; 0x02
    2b9c:	15 82       	std	Z+5, r1	; 0x05
    2b9e:	14 82       	std	Z+4, r1	; 0x04
    2ba0:	16 82       	std	Z+6, r1	; 0x06
    2ba2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6StringaSEPKc:

00005738 <_ZN6StringaSEPKc>:
    5738:	cf 93       	push	r28
    573a:	df 93       	push	r29
    573c:	ec 01       	movw	r28, r24
    573e:	61 15       	cp	r22, r1
    5740:	71 05       	cpc	r23, r1
    5742:	01 f0       	breq	.+0      	; 0x5744 <_ZN6StringaSEPKc+0xc>
    5744:	fb 01       	movw	r30, r22
    5746:	01 90       	ld	r0, Z+
    5748:	00 20       	and	r0, r0
    574a:	01 f4       	brne	.+0      	; 0x574c <_ZN6StringaSEPKc+0x14>
    574c:	af 01       	movw	r20, r30
    574e:	41 50       	subi	r20, 0x01	; 1
    5750:	51 09       	sbc	r21, r1
    5752:	46 1b       	sub	r20, r22
    5754:	57 0b       	sbc	r21, r23
    5756:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    575a:	00 c0       	rjmp	.+0      	; 0x575c <_ZN6StringaSEPKc+0x24>
    575c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    5760:	ce 01       	movw	r24, r28
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

0000aea0 <_ZN6StringC1Ec>:
    aea0:	cf 93       	push	r28
    aea2:	df 93       	push	r29
    aea4:	00 d0       	rcall	.+0      	; 0xaea6 <_ZN6StringC1Ec+0x6>
    aea6:	cd b7       	in	r28, 0x3d	; 61
    aea8:	de b7       	in	r29, 0x3e	; 62
    aeaa:	fc 01       	movw	r30, r24
    aeac:	11 82       	std	Z+1, r1	; 0x01
    aeae:	10 82       	st	Z, r1
    aeb0:	13 82       	std	Z+3, r1	; 0x03
    aeb2:	12 82       	std	Z+2, r1	; 0x02
    aeb4:	15 82       	std	Z+5, r1	; 0x05
    aeb6:	14 82       	std	Z+4, r1	; 0x04
    aeb8:	16 82       	std	Z+6, r1	; 0x06
    aeba:	69 83       	std	Y+1, r22	; 0x01
    aebc:	1a 82       	std	Y+2, r1	; 0x02
    aebe:	be 01       	movw	r22, r28
    aec0:	6f 5f       	subi	r22, 0xFF	; 255
    aec2:	7f 4f       	sbci	r23, 0xFF	; 255
    aec4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    aec8:	0f 90       	pop	r0
    aeca:	0f 90       	pop	r0
    aecc:	df 91       	pop	r29
    aece:	cf 91       	pop	r28
    aed0:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00015d72 <_ZN6StringC1Ehh>:
   15d72:	0f 93       	push	r16
   15d74:	1f 93       	push	r17
   15d76:	cf 93       	push	r28
   15d78:	df 93       	push	r29
   15d7a:	cd b7       	in	r28, 0x3d	; 61
   15d7c:	de b7       	in	r29, 0x3e	; 62
   15d7e:	29 97       	sbiw	r28, 0x09	; 9
   15d80:	0f b6       	in	r0, 0x3f	; 63
   15d82:	f8 94       	cli
   15d84:	de bf       	out	0x3e, r29	; 62
   15d86:	0f be       	out	0x3f, r0	; 63
   15d88:	cd bf       	out	0x3d, r28	; 61
   15d8a:	8c 01       	movw	r16, r24
   15d8c:	86 2f       	mov	r24, r22
   15d8e:	f8 01       	movw	r30, r16
   15d90:	11 82       	std	Z+1, r1	; 0x01
   15d92:	10 82       	st	Z, r1
   15d94:	13 82       	std	Z+3, r1	; 0x03
   15d96:	12 82       	std	Z+2, r1	; 0x02
   15d98:	15 82       	std	Z+5, r1	; 0x05
   15d9a:	14 82       	std	Z+4, r1	; 0x04
   15d9c:	16 82       	std	Z+6, r1	; 0x06
   15d9e:	50 e0       	ldi	r21, 0x00	; 0
   15da0:	be 01       	movw	r22, r28
   15da2:	6f 5f       	subi	r22, 0xFF	; 255
   15da4:	7f 4f       	sbci	r23, 0xFF	; 255
   15da6:	90 e0       	ldi	r25, 0x00	; 0
   15da8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15dac:	be 01       	movw	r22, r28
   15dae:	6f 5f       	subi	r22, 0xFF	; 255
   15db0:	7f 4f       	sbci	r23, 0xFF	; 255
   15db2:	c8 01       	movw	r24, r16
   15db4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15db8:	29 96       	adiw	r28, 0x09	; 9
   15dba:	0f b6       	in	r0, 0x3f	; 63
   15dbc:	f8 94       	cli
   15dbe:	de bf       	out	0x3e, r29	; 62
   15dc0:	0f be       	out	0x3f, r0	; 63
   15dc2:	cd bf       	out	0x3d, r28	; 61
   15dc4:	df 91       	pop	r29
   15dc6:	cf 91       	pop	r28
   15dc8:	1f 91       	pop	r17
   15dca:	0f 91       	pop	r16
   15dcc:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

0002bb40 <_ZN6StringC1Eih>:
   2bb40:	0f 93       	push	r16
   2bb42:	1f 93       	push	r17
   2bb44:	cf 93       	push	r28
   2bb46:	df 93       	push	r29
   2bb48:	cd b7       	in	r28, 0x3d	; 61
   2bb4a:	de b7       	in	r29, 0x3e	; 62
   2bb4c:	62 97       	sbiw	r28, 0x12	; 18
   2bb4e:	0f b6       	in	r0, 0x3f	; 63
   2bb50:	f8 94       	cli
   2bb52:	de bf       	out	0x3e, r29	; 62
   2bb54:	0f be       	out	0x3f, r0	; 63
   2bb56:	cd bf       	out	0x3d, r28	; 61
   2bb58:	8c 01       	movw	r16, r24
   2bb5a:	cb 01       	movw	r24, r22
   2bb5c:	f8 01       	movw	r30, r16
   2bb5e:	11 82       	std	Z+1, r1	; 0x01
   2bb60:	10 82       	st	Z, r1
   2bb62:	13 82       	std	Z+3, r1	; 0x03
   2bb64:	12 82       	std	Z+2, r1	; 0x02
   2bb66:	15 82       	std	Z+5, r1	; 0x05
   2bb68:	14 82       	std	Z+4, r1	; 0x04
   2bb6a:	16 82       	std	Z+6, r1	; 0x06
   2bb6c:	50 e0       	ldi	r21, 0x00	; 0
   2bb6e:	be 01       	movw	r22, r28
   2bb70:	6f 5f       	subi	r22, 0xFF	; 255
   2bb72:	7f 4f       	sbci	r23, 0xFF	; 255
   2bb74:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2bb78:	be 01       	movw	r22, r28
   2bb7a:	6f 5f       	subi	r22, 0xFF	; 255
   2bb7c:	7f 4f       	sbci	r23, 0xFF	; 255
   2bb7e:	c8 01       	movw	r24, r16
   2bb80:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2bb84:	62 96       	adiw	r28, 0x12	; 18
   2bb86:	0f b6       	in	r0, 0x3f	; 63
   2bb88:	f8 94       	cli
   2bb8a:	de bf       	out	0x3e, r29	; 62
   2bb8c:	0f be       	out	0x3f, r0	; 63
   2bb8e:	cd bf       	out	0x3d, r28	; 61
   2bb90:	df 91       	pop	r29
   2bb92:	cf 91       	pop	r28
   2bb94:	1f 91       	pop	r17
   2bb96:	0f 91       	pop	r16
   2bb98:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

000576da <_ZN6StringC1Ejh>:
   576da:	0f 93       	push	r16
   576dc:	1f 93       	push	r17
   576de:	cf 93       	push	r28
   576e0:	df 93       	push	r29
   576e2:	cd b7       	in	r28, 0x3d	; 61
   576e4:	de b7       	in	r29, 0x3e	; 62
   576e6:	61 97       	sbiw	r28, 0x11	; 17
   576e8:	0f b6       	in	r0, 0x3f	; 63
   576ea:	f8 94       	cli
   576ec:	de bf       	out	0x3e, r29	; 62
   576ee:	0f be       	out	0x3f, r0	; 63
   576f0:	cd bf       	out	0x3d, r28	; 61
   576f2:	8c 01       	movw	r16, r24
   576f4:	cb 01       	movw	r24, r22
   576f6:	f8 01       	movw	r30, r16
   576f8:	11 82       	std	Z+1, r1	; 0x01
   576fa:	10 82       	st	Z, r1
   576fc:	13 82       	std	Z+3, r1	; 0x03
   576fe:	12 82       	std	Z+2, r1	; 0x02
   57700:	15 82       	std	Z+5, r1	; 0x05
   57702:	14 82       	std	Z+4, r1	; 0x04
   57704:	16 82       	std	Z+6, r1	; 0x06
   57706:	50 e0       	ldi	r21, 0x00	; 0
   57708:	be 01       	movw	r22, r28
   5770a:	6f 5f       	subi	r22, 0xFF	; 255
   5770c:	7f 4f       	sbci	r23, 0xFF	; 255
   5770e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   57712:	be 01       	movw	r22, r28
   57714:	6f 5f       	subi	r22, 0xFF	; 255
   57716:	7f 4f       	sbci	r23, 0xFF	; 255
   57718:	c8 01       	movw	r24, r16
   5771a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   5771e:	61 96       	adiw	r28, 0x11	; 17
   57720:	0f b6       	in	r0, 0x3f	; 63
   57722:	f8 94       	cli
   57724:	de bf       	out	0x3e, r29	; 62
   57726:	0f be       	out	0x3f, r0	; 63
   57728:	cd bf       	out	0x3d, r28	; 61
   5772a:	df 91       	pop	r29
   5772c:	cf 91       	pop	r28
   5772e:	1f 91       	pop	r17
   57730:	0f 91       	pop	r16
   57732:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

000aee0e <_ZN6StringC1Elh>:
   aee0e:	0f 93       	push	r16
   aee10:	1f 93       	push	r17
   aee12:	cf 93       	push	r28
   aee14:	df 93       	push	r29
   aee16:	cd b7       	in	r28, 0x3d	; 61
   aee18:	de b7       	in	r29, 0x3e	; 62
   aee1a:	a2 97       	sbiw	r28, 0x22	; 34
   aee1c:	0f b6       	in	r0, 0x3f	; 63
   aee1e:	f8 94       	cli
   aee20:	de bf       	out	0x3e, r29	; 62
   aee22:	0f be       	out	0x3f, r0	; 63
   aee24:	cd bf       	out	0x3d, r28	; 61
   aee26:	8c 01       	movw	r16, r24
   aee28:	cb 01       	movw	r24, r22
   aee2a:	ba 01       	movw	r22, r20
   aee2c:	f8 01       	movw	r30, r16
   aee2e:	11 82       	std	Z+1, r1	; 0x01
   aee30:	10 82       	st	Z, r1
   aee32:	13 82       	std	Z+3, r1	; 0x03
   aee34:	12 82       	std	Z+2, r1	; 0x02
   aee36:	15 82       	std	Z+5, r1	; 0x05
   aee38:	14 82       	std	Z+4, r1	; 0x04
   aee3a:	16 82       	std	Z+6, r1	; 0x06
   aee3c:	30 e0       	ldi	r19, 0x00	; 0
   aee3e:	ae 01       	movw	r20, r28
   aee40:	4f 5f       	subi	r20, 0xFF	; 255
   aee42:	5f 4f       	sbci	r21, 0xFF	; 255
   aee44:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   aee48:	be 01       	movw	r22, r28
   aee4a:	6f 5f       	subi	r22, 0xFF	; 255
   aee4c:	7f 4f       	sbci	r23, 0xFF	; 255
   aee4e:	c8 01       	movw	r24, r16
   aee50:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   aee54:	a2 96       	adiw	r28, 0x22	; 34
   aee56:	0f b6       	in	r0, 0x3f	; 63
   aee58:	f8 94       	cli
   aee5a:	de bf       	out	0x3e, r29	; 62
   aee5c:	0f be       	out	0x3f, r0	; 63
   aee5e:	cd bf       	out	0x3d, r28	; 61
   aee60:	df 91       	pop	r29
   aee62:	cf 91       	pop	r28
   aee64:	1f 91       	pop	r17
   aee66:	0f 91       	pop	r16
   aee68:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

0015dc78 <_ZN6StringC1Emh>:
  15dc78:	0f 93       	push	r16
  15dc7a:	1f 93       	push	r17
  15dc7c:	cf 93       	push	r28
  15dc7e:	df 93       	push	r29
  15dc80:	cd b7       	in	r28, 0x3d	; 61
  15dc82:	de b7       	in	r29, 0x3e	; 62
  15dc84:	a1 97       	sbiw	r28, 0x21	; 33
  15dc86:	0f b6       	in	r0, 0x3f	; 63
  15dc88:	f8 94       	cli
  15dc8a:	de bf       	out	0x3e, r29	; 62
  15dc8c:	0f be       	out	0x3f, r0	; 63
  15dc8e:	cd bf       	out	0x3d, r28	; 61
  15dc90:	8c 01       	movw	r16, r24
  15dc92:	cb 01       	movw	r24, r22
  15dc94:	ba 01       	movw	r22, r20
  15dc96:	f8 01       	movw	r30, r16
  15dc98:	11 82       	std	Z+1, r1	; 0x01
  15dc9a:	10 82       	st	Z, r1
  15dc9c:	13 82       	std	Z+3, r1	; 0x03
  15dc9e:	12 82       	std	Z+2, r1	; 0x02
  15dca0:	15 82       	std	Z+5, r1	; 0x05
  15dca2:	14 82       	std	Z+4, r1	; 0x04
  15dca4:	16 82       	std	Z+6, r1	; 0x06
  15dca6:	30 e0       	ldi	r19, 0x00	; 0
  15dca8:	ae 01       	movw	r20, r28
  15dcaa:	4f 5f       	subi	r20, 0xFF	; 255
  15dcac:	5f 4f       	sbci	r21, 0xFF	; 255
  15dcae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  15dcb2:	be 01       	movw	r22, r28
  15dcb4:	6f 5f       	subi	r22, 0xFF	; 255
  15dcb6:	7f 4f       	sbci	r23, 0xFF	; 255
  15dcb8:	c8 01       	movw	r24, r16
  15dcba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  15dcbe:	a1 96       	adiw	r28, 0x21	; 33
  15dcc0:	0f b6       	in	r0, 0x3f	; 63
  15dcc2:	f8 94       	cli
  15dcc4:	de bf       	out	0x3e, r29	; 62
  15dcc6:	0f be       	out	0x3f, r0	; 63
  15dcc8:	cd bf       	out	0x3d, r28	; 61
  15dcca:	df 91       	pop	r29
  15dccc:	cf 91       	pop	r28
  15dcce:	1f 91       	pop	r17
  15dcd0:	0f 91       	pop	r16
  15dcd2:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

002bb94c <_ZN6String6concatEPKcj>:
  2bb94c:	ef 92       	push	r14
  2bb94e:	ff 92       	push	r15
  2bb950:	0f 93       	push	r16
  2bb952:	1f 93       	push	r17
  2bb954:	cf 93       	push	r28
  2bb956:	df 93       	push	r29
  2bb958:	ec 01       	movw	r28, r24
  2bb95a:	7b 01       	movw	r14, r22
  2bb95c:	0c 81       	ldd	r16, Y+4	; 0x04
  2bb95e:	1d 81       	ldd	r17, Y+5	; 0x05
  2bb960:	61 15       	cp	r22, r1
  2bb962:	71 05       	cpc	r23, r1
  2bb964:	01 f4       	brne	.+0      	; 0x2bb966 <_ZN6String6concatEPKcj+0x1a>
  2bb966:	80 e0       	ldi	r24, 0x00	; 0
  2bb968:	00 c0       	rjmp	.+0      	; 0x2bb96a <_ZN6String6concatEPKcj+0x1e>
  2bb96a:	41 15       	cp	r20, r1
  2bb96c:	51 05       	cpc	r21, r1
  2bb96e:	01 f0       	breq	.+0      	; 0x2bb970 <_ZN6String6concatEPKcj+0x24>
  2bb970:	04 0f       	add	r16, r20
  2bb972:	15 1f       	adc	r17, r21
  2bb974:	b8 01       	movw	r22, r16
  2bb976:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2bb97a:	88 23       	and	r24, r24
  2bb97c:	01 f0       	breq	.+0      	; 0x2bb97e <_ZN6String6concatEPKcj+0x32>
  2bb97e:	28 81       	ld	r18, Y
  2bb980:	39 81       	ldd	r19, Y+1	; 0x01
  2bb982:	8c 81       	ldd	r24, Y+4	; 0x04
  2bb984:	9d 81       	ldd	r25, Y+5	; 0x05
  2bb986:	b7 01       	movw	r22, r14
  2bb988:	82 0f       	add	r24, r18
  2bb98a:	93 1f       	adc	r25, r19
  2bb98c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2bb990:	1d 83       	std	Y+5, r17	; 0x05
  2bb992:	0c 83       	std	Y+4, r16	; 0x04
  2bb994:	81 e0       	ldi	r24, 0x01	; 1
  2bb996:	df 91       	pop	r29
  2bb998:	cf 91       	pop	r28
  2bb99a:	1f 91       	pop	r17
  2bb99c:	0f 91       	pop	r16
  2bb99e:	ff 90       	pop	r15
  2bb9a0:	ef 90       	pop	r14
  2bb9a2:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

005772f0 <_ZN6String6concatERKS_>:
  5772f0:	fb 01       	movw	r30, r22
  5772f2:	44 81       	ldd	r20, Z+4	; 0x04
  5772f4:	55 81       	ldd	r21, Z+5	; 0x05
  5772f6:	60 81       	ld	r22, Z
  5772f8:	71 81       	ldd	r23, Z+1	; 0x01
  5772fa:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6String6concatEPKc:

00aee5ee <_ZN6String6concatEPKc>:
  aee5ee:	61 15       	cp	r22, r1
  aee5f0:	71 05       	cpc	r23, r1
  aee5f2:	01 f0       	breq	.+0      	; 0xaee5f4 <_ZN6String6concatEPKc+0x6>
  aee5f4:	fb 01       	movw	r30, r22
  aee5f6:	01 90       	ld	r0, Z+
  aee5f8:	00 20       	and	r0, r0
  aee5fa:	01 f4       	brne	.+0      	; 0xaee5fc <_ZN6String6concatEPKc+0xe>
  aee5fc:	af 01       	movw	r20, r30
  aee5fe:	41 50       	subi	r20, 0x01	; 1
  aee600:	51 09       	sbc	r21, r1
  aee602:	46 1b       	sub	r20, r22
  aee604:	57 0b       	sbc	r21, r23
  aee606:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  aee60a:	80 e0       	ldi	r24, 0x00	; 0
  aee60c:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

015dcbfc <_ZN6String6concatEc>:
 15dcbfc:	cf 93       	push	r28
 15dcbfe:	df 93       	push	r29
 15dcc00:	00 d0       	rcall	.+0      	; 0x15dcc02 <_ZN6String6concatEc+0x6>
 15dcc02:	cd b7       	in	r28, 0x3d	; 61
 15dcc04:	de b7       	in	r29, 0x3e	; 62
 15dcc06:	69 83       	std	Y+1, r22	; 0x01
 15dcc08:	1a 82       	std	Y+2, r1	; 0x02
 15dcc0a:	41 e0       	ldi	r20, 0x01	; 1
 15dcc0c:	50 e0       	ldi	r21, 0x00	; 0
 15dcc0e:	be 01       	movw	r22, r28
 15dcc10:	6f 5f       	subi	r22, 0xFF	; 255
 15dcc12:	7f 4f       	sbci	r23, 0xFF	; 255
 15dcc14:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15dcc18:	0f 90       	pop	r0
 15dcc1a:	0f 90       	pop	r0
 15dcc1c:	df 91       	pop	r29
 15dcc1e:	cf 91       	pop	r28
 15dcc20:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

02bb981e <_ZN6String6concatEh>:
 2bb981e:	ef 92       	push	r14
 2bb9820:	ff 92       	push	r15
 2bb9822:	0f 93       	push	r16
 2bb9824:	1f 93       	push	r17
 2bb9826:	cf 93       	push	r28
 2bb9828:	df 93       	push	r29
 2bb982a:	00 d0       	rcall	.+0      	; 0x2bb982c <_ZN6String6concatEh+0xe>
 2bb982c:	00 d0       	rcall	.+0      	; 0x2bb982e <_ZN6String6concatEh+0x10>
 2bb982e:	cd b7       	in	r28, 0x3d	; 61
 2bb9830:	de b7       	in	r29, 0x3e	; 62
 2bb9832:	7c 01       	movw	r14, r24
 2bb9834:	86 2f       	mov	r24, r22
 2bb9836:	4a e0       	ldi	r20, 0x0A	; 10
 2bb9838:	50 e0       	ldi	r21, 0x00	; 0
 2bb983a:	8e 01       	movw	r16, r28
 2bb983c:	0f 5f       	subi	r16, 0xFF	; 255
 2bb983e:	1f 4f       	sbci	r17, 0xFF	; 255
 2bb9840:	b8 01       	movw	r22, r16
 2bb9842:	90 e0       	ldi	r25, 0x00	; 0
 2bb9844:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2bb9848:	f8 01       	movw	r30, r16
 2bb984a:	01 90       	ld	r0, Z+
 2bb984c:	00 20       	and	r0, r0
 2bb984e:	01 f4       	brne	.+0      	; 0x2bb9850 <_ZN6String6concatEh+0x32>
 2bb9850:	af 01       	movw	r20, r30
 2bb9852:	41 50       	subi	r20, 0x01	; 1
 2bb9854:	51 09       	sbc	r21, r1
 2bb9856:	40 1b       	sub	r20, r16
 2bb9858:	51 0b       	sbc	r21, r17
 2bb985a:	b8 01       	movw	r22, r16
 2bb985c:	c7 01       	movw	r24, r14
 2bb985e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2bb9862:	0f 90       	pop	r0
 2bb9864:	0f 90       	pop	r0
 2bb9866:	0f 90       	pop	r0
 2bb9868:	0f 90       	pop	r0
 2bb986a:	df 91       	pop	r29
 2bb986c:	cf 91       	pop	r28
 2bb986e:	1f 91       	pop	r17
 2bb9870:	0f 91       	pop	r16
 2bb9872:	ff 90       	pop	r15
 2bb9874:	ef 90       	pop	r14
 2bb9876:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

05773096 <_ZN6String6concatEi>:
 5773096:	ef 92       	push	r14
 5773098:	ff 92       	push	r15
 577309a:	0f 93       	push	r16
 577309c:	1f 93       	push	r17
 577309e:	cf 93       	push	r28
 57730a0:	df 93       	push	r29
 57730a2:	cd b7       	in	r28, 0x3d	; 61
 57730a4:	de b7       	in	r29, 0x3e	; 62
 57730a6:	27 97       	sbiw	r28, 0x07	; 7
 57730a8:	0f b6       	in	r0, 0x3f	; 63
 57730aa:	f8 94       	cli
 57730ac:	de bf       	out	0x3e, r29	; 62
 57730ae:	0f be       	out	0x3f, r0	; 63
 57730b0:	cd bf       	out	0x3d, r28	; 61
 57730b2:	7c 01       	movw	r14, r24
 57730b4:	cb 01       	movw	r24, r22
 57730b6:	4a e0       	ldi	r20, 0x0A	; 10
 57730b8:	50 e0       	ldi	r21, 0x00	; 0
 57730ba:	8e 01       	movw	r16, r28
 57730bc:	0f 5f       	subi	r16, 0xFF	; 255
 57730be:	1f 4f       	sbci	r17, 0xFF	; 255
 57730c0:	b8 01       	movw	r22, r16
 57730c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 57730c6:	f8 01       	movw	r30, r16
 57730c8:	01 90       	ld	r0, Z+
 57730ca:	00 20       	and	r0, r0
 57730cc:	01 f4       	brne	.+0      	; 0x57730ce <_ZN6String6concatEi+0x38>
 57730ce:	af 01       	movw	r20, r30
 57730d0:	41 50       	subi	r20, 0x01	; 1
 57730d2:	51 09       	sbc	r21, r1
 57730d4:	40 1b       	sub	r20, r16
 57730d6:	51 0b       	sbc	r21, r17
 57730d8:	b8 01       	movw	r22, r16
 57730da:	c7 01       	movw	r24, r14
 57730dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 57730e0:	27 96       	adiw	r28, 0x07	; 7
 57730e2:	0f b6       	in	r0, 0x3f	; 63
 57730e4:	f8 94       	cli
 57730e6:	de bf       	out	0x3e, r29	; 62
 57730e8:	0f be       	out	0x3f, r0	; 63
 57730ea:	cd bf       	out	0x3d, r28	; 61
 57730ec:	df 91       	pop	r29
 57730ee:	cf 91       	pop	r28
 57730f0:	1f 91       	pop	r17
 57730f2:	0f 91       	pop	r16
 57730f4:	ff 90       	pop	r15
 57730f6:	ef 90       	pop	r14
 57730f8:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

0aee6190 <_ZN6String6concatEj>:
 aee6190:	ef 92       	push	r14
 aee6192:	ff 92       	push	r15
 aee6194:	0f 93       	push	r16
 aee6196:	1f 93       	push	r17
 aee6198:	cf 93       	push	r28
 aee619a:	df 93       	push	r29
 aee619c:	00 d0       	rcall	.+0      	; 0xaee619e <_ZN6String6concatEj+0xe>
 aee619e:	00 d0       	rcall	.+0      	; 0xaee61a0 <_ZN6String6concatEj+0x10>
 aee61a0:	00 d0       	rcall	.+0      	; 0xaee61a2 <_ZN6String6concatEj+0x12>
 aee61a2:	cd b7       	in	r28, 0x3d	; 61
 aee61a4:	de b7       	in	r29, 0x3e	; 62
 aee61a6:	7c 01       	movw	r14, r24
 aee61a8:	cb 01       	movw	r24, r22
 aee61aa:	4a e0       	ldi	r20, 0x0A	; 10
 aee61ac:	50 e0       	ldi	r21, 0x00	; 0
 aee61ae:	8e 01       	movw	r16, r28
 aee61b0:	0f 5f       	subi	r16, 0xFF	; 255
 aee61b2:	1f 4f       	sbci	r17, 0xFF	; 255
 aee61b4:	b8 01       	movw	r22, r16
 aee61b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 aee61ba:	f8 01       	movw	r30, r16
 aee61bc:	01 90       	ld	r0, Z+
 aee61be:	00 20       	and	r0, r0
 aee61c0:	01 f4       	brne	.+0      	; 0xaee61c2 <_ZN6String6concatEj+0x32>
 aee61c2:	af 01       	movw	r20, r30
 aee61c4:	41 50       	subi	r20, 0x01	; 1
 aee61c6:	51 09       	sbc	r21, r1
 aee61c8:	40 1b       	sub	r20, r16
 aee61ca:	51 0b       	sbc	r21, r17
 aee61cc:	b8 01       	movw	r22, r16
 aee61ce:	c7 01       	movw	r24, r14
 aee61d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 aee61d4:	26 96       	adiw	r28, 0x06	; 6
 aee61d6:	0f b6       	in	r0, 0x3f	; 63
 aee61d8:	f8 94       	cli
 aee61da:	de bf       	out	0x3e, r29	; 62
 aee61dc:	0f be       	out	0x3f, r0	; 63
 aee61de:	cd bf       	out	0x3d, r28	; 61
 aee61e0:	df 91       	pop	r29
 aee61e2:	cf 91       	pop	r28
 aee61e4:	1f 91       	pop	r17
 aee61e6:	0f 91       	pop	r16
 aee61e8:	ff 90       	pop	r15
 aee61ea:	ef 90       	pop	r14
 aee61ec:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

15dcc37e <_ZN6String6concatEl>:
15dcc37e:	ef 92       	push	r14
15dcc380:	ff 92       	push	r15
15dcc382:	0f 93       	push	r16
15dcc384:	1f 93       	push	r17
15dcc386:	cf 93       	push	r28
15dcc388:	df 93       	push	r29
15dcc38a:	cd b7       	in	r28, 0x3d	; 61
15dcc38c:	de b7       	in	r29, 0x3e	; 62
15dcc38e:	2c 97       	sbiw	r28, 0x0c	; 12
15dcc390:	0f b6       	in	r0, 0x3f	; 63
15dcc392:	f8 94       	cli
15dcc394:	de bf       	out	0x3e, r29	; 62
15dcc396:	0f be       	out	0x3f, r0	; 63
15dcc398:	cd bf       	out	0x3d, r28	; 61
15dcc39a:	7c 01       	movw	r14, r24
15dcc39c:	cb 01       	movw	r24, r22
15dcc39e:	ba 01       	movw	r22, r20
15dcc3a0:	2a e0       	ldi	r18, 0x0A	; 10
15dcc3a2:	30 e0       	ldi	r19, 0x00	; 0
15dcc3a4:	8e 01       	movw	r16, r28
15dcc3a6:	0f 5f       	subi	r16, 0xFF	; 255
15dcc3a8:	1f 4f       	sbci	r17, 0xFF	; 255
15dcc3aa:	a8 01       	movw	r20, r16
15dcc3ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
15dcc3b0:	f8 01       	movw	r30, r16
15dcc3b2:	01 90       	ld	r0, Z+
15dcc3b4:	00 20       	and	r0, r0
15dcc3b6:	01 f4       	brne	.+0      	; 0x15dcc3b8 <_ZN6String6concatEl+0x3a>
15dcc3b8:	af 01       	movw	r20, r30
15dcc3ba:	41 50       	subi	r20, 0x01	; 1
15dcc3bc:	51 09       	sbc	r21, r1
15dcc3be:	40 1b       	sub	r20, r16
15dcc3c0:	51 0b       	sbc	r21, r17
15dcc3c2:	b8 01       	movw	r22, r16
15dcc3c4:	c7 01       	movw	r24, r14
15dcc3c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
15dcc3ca:	2c 96       	adiw	r28, 0x0c	; 12
15dcc3cc:	0f b6       	in	r0, 0x3f	; 63
15dcc3ce:	f8 94       	cli
15dcc3d0:	de bf       	out	0x3e, r29	; 62
15dcc3d2:	0f be       	out	0x3f, r0	; 63
15dcc3d4:	cd bf       	out	0x3d, r28	; 61
15dcc3d6:	df 91       	pop	r29
15dcc3d8:	cf 91       	pop	r28
15dcc3da:	1f 91       	pop	r17
15dcc3dc:	0f 91       	pop	r16
15dcc3de:	ff 90       	pop	r15
15dcc3e0:	ef 90       	pop	r14
15dcc3e2:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

2bb98762 <_ZN6String6concatEm>:
2bb98762:	ef 92       	push	r14
2bb98764:	ff 92       	push	r15
2bb98766:	0f 93       	push	r16
2bb98768:	1f 93       	push	r17
2bb9876a:	cf 93       	push	r28
2bb9876c:	df 93       	push	r29
2bb9876e:	cd b7       	in	r28, 0x3d	; 61
2bb98770:	de b7       	in	r29, 0x3e	; 62
2bb98772:	2b 97       	sbiw	r28, 0x0b	; 11
2bb98774:	0f b6       	in	r0, 0x3f	; 63
2bb98776:	f8 94       	cli
2bb98778:	de bf       	out	0x3e, r29	; 62
2bb9877a:	0f be       	out	0x3f, r0	; 63
2bb9877c:	cd bf       	out	0x3d, r28	; 61
2bb9877e:	7c 01       	movw	r14, r24
2bb98780:	cb 01       	movw	r24, r22
2bb98782:	ba 01       	movw	r22, r20
2bb98784:	2a e0       	ldi	r18, 0x0A	; 10
2bb98786:	30 e0       	ldi	r19, 0x00	; 0
2bb98788:	8e 01       	movw	r16, r28
2bb9878a:	0f 5f       	subi	r16, 0xFF	; 255
2bb9878c:	1f 4f       	sbci	r17, 0xFF	; 255
2bb9878e:	a8 01       	movw	r20, r16
2bb98790:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2bb98794:	f8 01       	movw	r30, r16
2bb98796:	01 90       	ld	r0, Z+
2bb98798:	00 20       	and	r0, r0
2bb9879a:	01 f4       	brne	.+0      	; 0x2bb9879c <_ZN6String6concatEm+0x3a>
2bb9879c:	af 01       	movw	r20, r30
2bb9879e:	41 50       	subi	r20, 0x01	; 1
2bb987a0:	51 09       	sbc	r21, r1
2bb987a2:	40 1b       	sub	r20, r16
2bb987a4:	51 0b       	sbc	r21, r17
2bb987a6:	b8 01       	movw	r22, r16
2bb987a8:	c7 01       	movw	r24, r14
2bb987aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2bb987ae:	2b 96       	adiw	r28, 0x0b	; 11
2bb987b0:	0f b6       	in	r0, 0x3f	; 63
2bb987b2:	f8 94       	cli
2bb987b4:	de bf       	out	0x3e, r29	; 62
2bb987b6:	0f be       	out	0x3f, r0	; 63
2bb987b8:	cd bf       	out	0x3d, r28	; 61
2bb987ba:	df 91       	pop	r29
2bb987bc:	cf 91       	pop	r28
2bb987be:	1f 91       	pop	r17
2bb987c0:	0f 91       	pop	r16
2bb987c2:	ff 90       	pop	r15
2bb987c4:	ef 90       	pop	r14
2bb987c6:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

57730f2a <_ZplRK15StringSumHelperRK6String>:
57730f2a:	cf 93       	push	r28
57730f2c:	df 93       	push	r29
57730f2e:	ec 01       	movw	r28, r24
57730f30:	fb 01       	movw	r30, r22
57730f32:	44 81       	ldd	r20, Z+4	; 0x04
57730f34:	55 81       	ldd	r21, Z+5	; 0x05
57730f36:	60 81       	ld	r22, Z
57730f38:	71 81       	ldd	r23, Z+1	; 0x01
57730f3a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
57730f3e:	81 11       	cpse	r24, r1
57730f40:	00 c0       	rjmp	.+0      	; 0x57730f42 <_ZplRK15StringSumHelperRK6String+0x18>
57730f42:	ce 01       	movw	r24, r28
57730f44:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
57730f48:	ce 01       	movw	r24, r28
57730f4a:	df 91       	pop	r29
57730f4c:	cf 91       	pop	r28
57730f4e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

aee61e7a <_ZplRK15StringSumHelperPKc>:
aee61e7a:	cf 93       	push	r28
aee61e7c:	df 93       	push	r29
aee61e7e:	ec 01       	movw	r28, r24
aee61e80:	61 15       	cp	r22, r1
aee61e82:	71 05       	cpc	r23, r1
aee61e84:	01 f0       	breq	.+0      	; 0xaee61e86 <_ZplRK15StringSumHelperPKc+0xc>
aee61e86:	fb 01       	movw	r30, r22
aee61e88:	01 90       	ld	r0, Z+
aee61e8a:	00 20       	and	r0, r0
aee61e8c:	01 f4       	brne	.+0      	; 0xaee61e8e <_ZplRK15StringSumHelperPKc+0x14>
aee61e8e:	af 01       	movw	r20, r30
aee61e90:	41 50       	subi	r20, 0x01	; 1
aee61e92:	51 09       	sbc	r21, r1
aee61e94:	46 1b       	sub	r20, r22
aee61e96:	57 0b       	sbc	r21, r23
aee61e98:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
aee61e9c:	81 11       	cpse	r24, r1
aee61e9e:	00 c0       	rjmp	.+0      	; 0xaee61ea0 <_ZplRK15StringSumHelperPKc+0x26>
aee61ea0:	ce 01       	movw	r24, r28
aee61ea2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
aee61ea6:	ce 01       	movw	r24, r28
aee61ea8:	df 91       	pop	r29
aee61eaa:	cf 91       	pop	r28
aee61eac:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

5dcc3d28 <_ZplRK15StringSumHelperc>:
5dcc3d28:	cf 93       	push	r28
5dcc3d2a:	df 93       	push	r29
5dcc3d2c:	ec 01       	movw	r28, r24
5dcc3d2e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
5dcc3d32:	81 11       	cpse	r24, r1
5dcc3d34:	00 c0       	rjmp	.+0      	; 0x5dcc3d36 <_ZplRK15StringSumHelperc+0xe>
5dcc3d36:	ce 01       	movw	r24, r28
5dcc3d38:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
5dcc3d3c:	ce 01       	movw	r24, r28
5dcc3d3e:	df 91       	pop	r29
5dcc3d40:	cf 91       	pop	r28
5dcc3d42:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

bb987a6c <_ZplRK15StringSumHelperh>:
bb987a6c:	cf 93       	push	r28
bb987a6e:	df 93       	push	r29
bb987a70:	ec 01       	movw	r28, r24
bb987a72:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bb987a76:	81 11       	cpse	r24, r1
bb987a78:	00 c0       	rjmp	.+0      	; 0xbb987a7a <_ZplRK15StringSumHelperh+0xe>
bb987a7a:	ce 01       	movw	r24, r28
bb987a7c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bb987a80:	ce 01       	movw	r24, r28
bb987a82:	df 91       	pop	r29
bb987a84:	cf 91       	pop	r28
bb987a86:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

7730f4f4 <_ZplRK15StringSumHelperi>:
7730f4f4:	cf 93       	push	r28
7730f4f6:	df 93       	push	r29
7730f4f8:	ec 01       	movw	r28, r24
7730f4fa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7730f4fe:	81 11       	cpse	r24, r1
7730f500:	00 c0       	rjmp	.+0      	; 0x7730f502 <_ZplRK15StringSumHelperi+0xe>
7730f502:	ce 01       	movw	r24, r28
7730f504:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7730f508:	ce 01       	movw	r24, r28
7730f50a:	df 91       	pop	r29
7730f50c:	cf 91       	pop	r28
7730f50e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

ee61ea04 <_ZplRK15StringSumHelperj>:
ee61ea04:	cf 93       	push	r28
ee61ea06:	df 93       	push	r29
ee61ea08:	ec 01       	movw	r28, r24
ee61ea0a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
ee61ea0e:	81 11       	cpse	r24, r1
ee61ea10:	00 c0       	rjmp	.+0      	; 0xee61ea12 <_ZplRK15StringSumHelperj+0xe>
ee61ea12:	ce 01       	movw	r24, r28
ee61ea14:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
ee61ea18:	ce 01       	movw	r24, r28
ee61ea1a:	df 91       	pop	r29
ee61ea1c:	cf 91       	pop	r28
ee61ea1e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

dcc3d424 <_ZplRK15StringSumHelperl>:
dcc3d424:	cf 93       	push	r28
dcc3d426:	df 93       	push	r29
dcc3d428:	ec 01       	movw	r28, r24
dcc3d42a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dcc3d42e:	81 11       	cpse	r24, r1
dcc3d430:	00 c0       	rjmp	.+0      	; 0xdcc3d432 <_ZplRK15StringSumHelperl+0xe>
dcc3d432:	ce 01       	movw	r24, r28
dcc3d434:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dcc3d438:	ce 01       	movw	r24, r28
dcc3d43a:	df 91       	pop	r29
dcc3d43c:	cf 91       	pop	r28
dcc3d43e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

b987a864 <_ZplRK15StringSumHelperm>:
b987a864:	cf 93       	push	r28
b987a866:	df 93       	push	r29
b987a868:	ec 01       	movw	r28, r24
b987a86a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
b987a86e:	81 11       	cpse	r24, r1
b987a870:	00 c0       	rjmp	.+0      	; 0xb987a872 <_ZplRK15StringSumHelperm+0xe>
b987a872:	ce 01       	movw	r24, r28
b987a874:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
b987a878:	ce 01       	movw	r24, r28
b987a87a:	df 91       	pop	r29
b987a87c:	cf 91       	pop	r28
b987a87e:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

730f50e4 <_ZNK6String9compareToERKS_>:
730f50e4:	cf 93       	push	r28
730f50e6:	df 93       	push	r29
730f50e8:	dc 01       	movw	r26, r24
730f50ea:	ed 91       	ld	r30, X+
730f50ec:	fc 91       	ld	r31, X
730f50ee:	eb 01       	movw	r28, r22
730f50f0:	a8 81       	ld	r26, Y
730f50f2:	b9 81       	ldd	r27, Y+1	; 0x01
730f50f4:	30 97       	sbiw	r30, 0x00	; 0
730f50f6:	01 f0       	breq	.+0      	; 0x730f50f8 <_ZNK6String9compareToERKS_+0x14>
730f50f8:	10 97       	sbiw	r26, 0x00	; 0
730f50fa:	01 f4       	brne	.+0      	; 0x730f50fc <_ZNK6String9compareToERKS_+0x18>
730f50fc:	10 97       	sbiw	r26, 0x00	; 0
730f50fe:	01 f0       	breq	.+0      	; 0x730f5100 <_ZNK6String9compareToERKS_+0x1c>
730f5100:	eb 01       	movw	r28, r22
730f5102:	2c 81       	ldd	r18, Y+4	; 0x04
730f5104:	3d 81       	ldd	r19, Y+5	; 0x05
730f5106:	23 2b       	or	r18, r19
730f5108:	01 f0       	breq	.+0      	; 0x730f510a <_ZNK6String9compareToERKS_+0x26>
730f510a:	8c 91       	ld	r24, X
730f510c:	90 e0       	ldi	r25, 0x00	; 0
730f510e:	91 95       	neg	r25
730f5110:	81 95       	neg	r24
730f5112:	91 09       	sbc	r25, r1
730f5114:	00 c0       	rjmp	.+0      	; 0x730f5116 <_ZNK6String9compareToERKS_+0x32>
730f5116:	30 97       	sbiw	r30, 0x00	; 0
730f5118:	01 f0       	breq	.+0      	; 0x730f511a <_ZNK6String9compareToERKS_+0x36>
730f511a:	dc 01       	movw	r26, r24
730f511c:	14 96       	adiw	r26, 0x04	; 4
730f511e:	8d 91       	ld	r24, X+
730f5120:	9c 91       	ld	r25, X
730f5122:	15 97       	sbiw	r26, 0x05	; 5
730f5124:	89 2b       	or	r24, r25
730f5126:	01 f0       	breq	.+0      	; 0x730f5128 <_ZNK6String9compareToERKS_+0x44>
730f5128:	80 81       	ld	r24, Z
730f512a:	90 e0       	ldi	r25, 0x00	; 0
730f512c:	00 c0       	rjmp	.+0      	; 0x730f512e <_ZNK6String9compareToERKS_+0x4a>
730f512e:	bd 01       	movw	r22, r26
730f5130:	cf 01       	movw	r24, r30
730f5132:	df 91       	pop	r29
730f5134:	cf 91       	pop	r28
730f5136:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
730f513a:	80 e0       	ldi	r24, 0x00	; 0
730f513c:	90 e0       	ldi	r25, 0x00	; 0
730f513e:	df 91       	pop	r29
730f5140:	cf 91       	pop	r28
730f5142:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

e61ea228 <_ZNK6String6equalsERKS_>:
e61ea228:	fc 01       	movw	r30, r24
e61ea22a:	44 81       	ldd	r20, Z+4	; 0x04
e61ea22c:	55 81       	ldd	r21, Z+5	; 0x05
e61ea22e:	fb 01       	movw	r30, r22
e61ea230:	24 81       	ldd	r18, Z+4	; 0x04
e61ea232:	35 81       	ldd	r19, Z+5	; 0x05
e61ea234:	42 17       	cp	r20, r18
e61ea236:	53 07       	cpc	r21, r19
e61ea238:	01 f4       	brne	.+0      	; 0xe61ea23a <_ZNK6String6equalsERKS_+0x12>
e61ea23a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e61ea23e:	21 e0       	ldi	r18, 0x01	; 1
e61ea240:	89 2b       	or	r24, r25
e61ea242:	01 f0       	breq	.+0      	; 0xe61ea244 <_ZNK6String6equalsERKS_+0x1c>
e61ea244:	20 e0       	ldi	r18, 0x00	; 0
e61ea246:	82 2f       	mov	r24, r18
e61ea248:	08 95       	ret
e61ea24a:	80 e0       	ldi	r24, 0x00	; 0
e61ea24c:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

cc3d4476 <_ZNK6String6equalsEPKc>:
cc3d4476:	fc 01       	movw	r30, r24
cc3d4478:	24 81       	ldd	r18, Z+4	; 0x04
cc3d447a:	35 81       	ldd	r19, Z+5	; 0x05
cc3d447c:	23 2b       	or	r18, r19
cc3d447e:	01 f4       	brne	.+0      	; 0xcc3d4480 <_ZNK6String6equalsEPKc+0xa>
cc3d4480:	21 e0       	ldi	r18, 0x01	; 1
cc3d4482:	61 15       	cp	r22, r1
cc3d4484:	71 05       	cpc	r23, r1
cc3d4486:	01 f0       	breq	.+0      	; 0xcc3d4488 <_ZNK6String6equalsEPKc+0x12>
cc3d4488:	fb 01       	movw	r30, r22
cc3d448a:	00 c0       	rjmp	.+0      	; 0xcc3d448c <_ZNK6String6equalsEPKc+0x16>
cc3d448c:	fc 01       	movw	r30, r24
cc3d448e:	80 81       	ld	r24, Z
cc3d4490:	91 81       	ldd	r25, Z+1	; 0x01
cc3d4492:	61 15       	cp	r22, r1
cc3d4494:	71 05       	cpc	r23, r1
cc3d4496:	01 f4       	brne	.+0      	; 0xcc3d4498 <_ZNK6String6equalsEPKc+0x22>
cc3d4498:	21 e0       	ldi	r18, 0x01	; 1
cc3d449a:	fc 01       	movw	r30, r24
cc3d449c:	80 81       	ld	r24, Z
cc3d449e:	88 23       	and	r24, r24
cc3d44a0:	01 f0       	breq	.+0      	; 0xcc3d44a2 <_ZNK6String6equalsEPKc+0x2c>
cc3d44a2:	00 c0       	rjmp	.+0      	; 0xcc3d44a4 <_ZNK6String6equalsEPKc+0x2e>
cc3d44a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
cc3d44a8:	21 e0       	ldi	r18, 0x01	; 1
cc3d44aa:	89 2b       	or	r24, r25
cc3d44ac:	01 f0       	breq	.+0      	; 0xcc3d44ae <_ZNK6String6equalsEPKc+0x38>
cc3d44ae:	20 e0       	ldi	r18, 0x00	; 0
cc3d44b0:	82 2f       	mov	r24, r18
cc3d44b2:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

987a892a <_ZNK6StringltERKS_>:
987a892a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
987a892e:	89 2f       	mov	r24, r25
987a8930:	88 1f       	adc	r24, r24
987a8932:	88 27       	eor	r24, r24
987a8934:	88 1f       	adc	r24, r24
987a8936:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

30f51262 <_ZNK6StringgtERKS_>:
30f51262:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
30f51266:	21 e0       	ldi	r18, 0x01	; 1
30f51268:	18 16       	cp	r1, r24
30f5126a:	19 06       	cpc	r1, r25
30f5126c:	04 f0       	brlt	.+0      	; 0x30f5126e <_ZNK6StringgtERKS_+0xc>
30f5126e:	20 e0       	ldi	r18, 0x00	; 0
30f51270:	82 2f       	mov	r24, r18
30f51272:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

61ea24d6 <_ZNK6StringleERKS_>:
61ea24d6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
61ea24da:	21 e0       	ldi	r18, 0x01	; 1
61ea24dc:	18 16       	cp	r1, r24
61ea24de:	19 06       	cpc	r1, r25
61ea24e0:	04 f4       	brge	.+0      	; 0x61ea24e2 <_ZNK6StringleERKS_+0xc>
61ea24e2:	20 e0       	ldi	r18, 0x00	; 0
61ea24e4:	82 2f       	mov	r24, r18
61ea24e6:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

c3d449be <_ZNK6StringgeERKS_>:
c3d449be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c3d449c2:	89 2f       	mov	r24, r25
c3d449c4:	80 95       	com	r24
c3d449c6:	88 1f       	adc	r24, r24
c3d449c8:	88 27       	eor	r24, r24
c3d449ca:	88 1f       	adc	r24, r24
c3d449cc:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

87a8938c <_ZNK6String16equalsIgnoreCaseERKS_>:
87a8938c:	ef 92       	push	r14
87a8938e:	ff 92       	push	r15
87a89390:	0f 93       	push	r16
87a89392:	1f 93       	push	r17
87a89394:	cf 93       	push	r28
87a89396:	df 93       	push	r29
87a89398:	86 17       	cp	r24, r22
87a8939a:	97 07       	cpc	r25, r23
87a8939c:	01 f0       	breq	.+0      	; 0x87a8939e <_ZNK6String16equalsIgnoreCaseERKS_+0x12>
87a8939e:	fc 01       	movw	r30, r24
87a893a0:	24 81       	ldd	r18, Z+4	; 0x04
87a893a2:	35 81       	ldd	r19, Z+5	; 0x05
87a893a4:	fb 01       	movw	r30, r22
87a893a6:	44 81       	ldd	r20, Z+4	; 0x04
87a893a8:	55 81       	ldd	r21, Z+5	; 0x05
87a893aa:	24 17       	cp	r18, r20
87a893ac:	35 07       	cpc	r19, r21
87a893ae:	01 f4       	brne	.+0      	; 0x87a893b0 <_ZNK6String16equalsIgnoreCaseERKS_+0x24>
87a893b0:	23 2b       	or	r18, r19
87a893b2:	01 f0       	breq	.+0      	; 0x87a893b4 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
87a893b4:	fc 01       	movw	r30, r24
87a893b6:	00 81       	ld	r16, Z
87a893b8:	11 81       	ldd	r17, Z+1	; 0x01
87a893ba:	fb 01       	movw	r30, r22
87a893bc:	c0 81       	ld	r28, Z
87a893be:	d1 81       	ldd	r29, Z+1	; 0x01
87a893c0:	f8 01       	movw	r30, r16
87a893c2:	81 91       	ld	r24, Z+
87a893c4:	8f 01       	movw	r16, r30
87a893c6:	88 23       	and	r24, r24
87a893c8:	01 f0       	breq	.+0      	; 0x87a893ca <_ZNK6String16equalsIgnoreCaseERKS_+0x3e>
87a893ca:	99 27       	eor	r25, r25
87a893cc:	87 fd       	sbrc	r24, 7
87a893ce:	90 95       	com	r25
87a893d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
87a893d4:	7c 01       	movw	r14, r24
87a893d6:	89 91       	ld	r24, Y+
87a893d8:	99 27       	eor	r25, r25
87a893da:	87 fd       	sbrc	r24, 7
87a893dc:	90 95       	com	r25
87a893de:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
87a893e2:	e8 16       	cp	r14, r24
87a893e4:	f9 06       	cpc	r15, r25
87a893e6:	01 f0       	breq	.+0      	; 0x87a893e8 <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
87a893e8:	00 c0       	rjmp	.+0      	; 0x87a893ea <_ZNK6String16equalsIgnoreCaseERKS_+0x5e>
87a893ea:	81 e0       	ldi	r24, 0x01	; 1
87a893ec:	00 c0       	rjmp	.+0      	; 0x87a893ee <_ZNK6String16equalsIgnoreCaseERKS_+0x62>
87a893ee:	80 e0       	ldi	r24, 0x00	; 0
87a893f0:	df 91       	pop	r29
87a893f2:	cf 91       	pop	r28
87a893f4:	1f 91       	pop	r17
87a893f6:	0f 91       	pop	r16
87a893f8:	ff 90       	pop	r15
87a893fa:	ef 90       	pop	r14
87a893fc:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

0f51278a <_ZNK6String10startsWithERKS_j>:
 f51278a:	fa 01       	movw	r30, r20
 f51278c:	db 01       	movw	r26, r22
 f51278e:	14 96       	adiw	r26, 0x04	; 4
 f512790:	4d 91       	ld	r20, X+
 f512792:	5c 91       	ld	r21, X
 f512794:	15 97       	sbiw	r26, 0x05	; 5
 f512796:	dc 01       	movw	r26, r24
 f512798:	14 96       	adiw	r26, 0x04	; 4
 f51279a:	2d 91       	ld	r18, X+
 f51279c:	3c 91       	ld	r19, X
 f51279e:	15 97       	sbiw	r26, 0x05	; 5
 f5127a0:	24 1b       	sub	r18, r20
 f5127a2:	35 0b       	sbc	r19, r21
 f5127a4:	2e 17       	cp	r18, r30
 f5127a6:	3f 07       	cpc	r19, r31
 f5127a8:	00 f0       	brcs	.+0      	; 0xf5127aa <_ZNK6String10startsWithERKS_j+0x20>
 f5127aa:	8d 91       	ld	r24, X+
 f5127ac:	9c 91       	ld	r25, X
 f5127ae:	00 97       	sbiw	r24, 0x00	; 0
 f5127b0:	01 f0       	breq	.+0      	; 0xf5127b2 <_ZNK6String10startsWithERKS_j+0x28>
 f5127b2:	db 01       	movw	r26, r22
 f5127b4:	6d 91       	ld	r22, X+
 f5127b6:	7c 91       	ld	r23, X
 f5127b8:	61 15       	cp	r22, r1
 f5127ba:	71 05       	cpc	r23, r1
 f5127bc:	01 f0       	breq	.+0      	; 0xf5127be <_ZNK6String10startsWithERKS_j+0x34>
 f5127be:	8e 0f       	add	r24, r30
 f5127c0:	9f 1f       	adc	r25, r31
 f5127c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 f5127c6:	21 e0       	ldi	r18, 0x01	; 1
 f5127c8:	89 2b       	or	r24, r25
 f5127ca:	01 f0       	breq	.+0      	; 0xf5127cc <_ZNK6String10startsWithERKS_j+0x42>
 f5127cc:	20 e0       	ldi	r18, 0x00	; 0
 f5127ce:	82 2f       	mov	r24, r18
 f5127d0:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

1ea24f5c <_ZNK6String10startsWithERKS_>:
1ea24f5c:	fc 01       	movw	r30, r24
1ea24f5e:	44 81       	ldd	r20, Z+4	; 0x04
1ea24f60:	55 81       	ldd	r21, Z+5	; 0x05
1ea24f62:	fb 01       	movw	r30, r22
1ea24f64:	24 81       	ldd	r18, Z+4	; 0x04
1ea24f66:	35 81       	ldd	r19, Z+5	; 0x05
1ea24f68:	42 17       	cp	r20, r18
1ea24f6a:	53 07       	cpc	r21, r19
1ea24f6c:	00 f0       	brcs	.+0      	; 0x1ea24f6e <_ZNK6String10startsWithERKS_+0x12>
1ea24f6e:	40 e0       	ldi	r20, 0x00	; 0
1ea24f70:	50 e0       	ldi	r21, 0x00	; 0
1ea24f72:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
1ea24f76:	80 e0       	ldi	r24, 0x00	; 0
1ea24f78:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

3d449ed6 <_ZNK6String8endsWithERKS_>:
3d449ed6:	fc 01       	movw	r30, r24
3d449ed8:	84 81       	ldd	r24, Z+4	; 0x04
3d449eda:	95 81       	ldd	r25, Z+5	; 0x05
3d449edc:	db 01       	movw	r26, r22
3d449ede:	14 96       	adiw	r26, 0x04	; 4
3d449ee0:	4d 91       	ld	r20, X+
3d449ee2:	5c 91       	ld	r21, X
3d449ee4:	15 97       	sbiw	r26, 0x05	; 5
3d449ee6:	84 17       	cp	r24, r20
3d449ee8:	95 07       	cpc	r25, r21
3d449eea:	00 f0       	brcs	.+0      	; 0x3d449eec <_ZNK6String8endsWithERKS_+0x16>
3d449eec:	20 81       	ld	r18, Z
3d449eee:	31 81       	ldd	r19, Z+1	; 0x01
3d449ef0:	21 15       	cp	r18, r1
3d449ef2:	31 05       	cpc	r19, r1
3d449ef4:	01 f0       	breq	.+0      	; 0x3d449ef6 <_ZNK6String8endsWithERKS_+0x20>
3d449ef6:	6d 91       	ld	r22, X+
3d449ef8:	7c 91       	ld	r23, X
3d449efa:	61 15       	cp	r22, r1
3d449efc:	71 05       	cpc	r23, r1
3d449efe:	01 f0       	breq	.+0      	; 0x3d449f00 <_ZNK6String8endsWithERKS_+0x2a>
3d449f00:	84 1b       	sub	r24, r20
3d449f02:	95 0b       	sbc	r25, r21
3d449f04:	82 0f       	add	r24, r18
3d449f06:	93 1f       	adc	r25, r19
3d449f08:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3d449f0c:	21 e0       	ldi	r18, 0x01	; 1
3d449f0e:	89 2b       	or	r24, r25
3d449f10:	01 f0       	breq	.+0      	; 0x3d449f12 <_ZNK6String8endsWithERKS_+0x3c>
3d449f12:	20 e0       	ldi	r18, 0x00	; 0
3d449f14:	82 2f       	mov	r24, r18
3d449f16:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

7a893dee <_ZN6String9setCharAtEjc>:
7a893dee:	dc 01       	movw	r26, r24
7a893df0:	14 96       	adiw	r26, 0x04	; 4
7a893df2:	2d 91       	ld	r18, X+
7a893df4:	3c 91       	ld	r19, X
7a893df6:	15 97       	sbiw	r26, 0x05	; 5
7a893df8:	62 17       	cp	r22, r18
7a893dfa:	73 07       	cpc	r23, r19
7a893dfc:	00 f4       	brcc	.+0      	; 0x7a893dfe <_ZN6String9setCharAtEjc+0x10>
7a893dfe:	ed 91       	ld	r30, X+
7a893e00:	fc 91       	ld	r31, X
7a893e02:	e6 0f       	add	r30, r22
7a893e04:	f7 1f       	adc	r31, r23
7a893e06:	40 83       	st	Z, r20
7a893e08:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

f5127bf8 <_ZN6StringixEj>:
f5127bf8:	fc 01       	movw	r30, r24
f5127bfa:	84 81       	ldd	r24, Z+4	; 0x04
f5127bfc:	95 81       	ldd	r25, Z+5	; 0x05
f5127bfe:	68 17       	cp	r22, r24
f5127c00:	79 07       	cpc	r23, r25
f5127c02:	00 f4       	brcc	.+0      	; 0xf5127c04 <_ZN6StringixEj+0xc>
f5127c04:	80 81       	ld	r24, Z
f5127c06:	91 81       	ldd	r25, Z+1	; 0x01
f5127c08:	00 97       	sbiw	r24, 0x00	; 0
f5127c0a:	01 f4       	brne	.+0      	; 0xf5127c0c <_ZN6StringixEj+0x14>
f5127c0c:	10 92 00 00 	sts	0x0000, r1
f5127c10:	80 e0       	ldi	r24, 0x00	; 0
f5127c12:	90 e0       	ldi	r25, 0x00	; 0
f5127c14:	08 95       	ret
f5127c16:	86 0f       	add	r24, r22
f5127c18:	97 1f       	adc	r25, r23
f5127c1a:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

ea24f814 <_ZNK6StringixEj>:
ea24f814:	fc 01       	movw	r30, r24
ea24f816:	24 81       	ldd	r18, Z+4	; 0x04
ea24f818:	35 81       	ldd	r19, Z+5	; 0x05
ea24f81a:	62 17       	cp	r22, r18
ea24f81c:	73 07       	cpc	r23, r19
ea24f81e:	00 f4       	brcc	.+0      	; 0xea24f820 <_ZNK6StringixEj+0xc>
ea24f820:	80 81       	ld	r24, Z
ea24f822:	91 81       	ldd	r25, Z+1	; 0x01
ea24f824:	00 97       	sbiw	r24, 0x00	; 0
ea24f826:	01 f0       	breq	.+0      	; 0xea24f828 <_ZNK6StringixEj+0x14>
ea24f828:	fc 01       	movw	r30, r24
ea24f82a:	e6 0f       	add	r30, r22
ea24f82c:	f7 1f       	adc	r31, r23
ea24f82e:	80 81       	ld	r24, Z
ea24f830:	08 95       	ret
ea24f832:	80 e0       	ldi	r24, 0x00	; 0
ea24f834:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

d449f04a <_ZNK6String6charAtEj>:
d449f04a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String8getBytesEPhjj:

a893e098 <_ZNK6String8getBytesEPhjj>:
a893e098:	0f 93       	push	r16
a893e09a:	1f 93       	push	r17
a893e09c:	cf 93       	push	r28
a893e09e:	df 93       	push	r29
a893e0a0:	eb 01       	movw	r28, r22
a893e0a2:	41 15       	cp	r20, r1
a893e0a4:	51 05       	cpc	r21, r1
a893e0a6:	01 f0       	breq	.+0      	; 0xa893e0a8 <_ZNK6String8getBytesEPhjj+0x10>
a893e0a8:	20 97       	sbiw	r28, 0x00	; 0
a893e0aa:	01 f0       	breq	.+0      	; 0xa893e0ac <_ZNK6String8getBytesEPhjj+0x14>
a893e0ac:	fc 01       	movw	r30, r24
a893e0ae:	64 81       	ldd	r22, Z+4	; 0x04
a893e0b0:	75 81       	ldd	r23, Z+5	; 0x05
a893e0b2:	26 17       	cp	r18, r22
a893e0b4:	37 07       	cpc	r19, r23
a893e0b6:	00 f4       	brcc	.+0      	; 0xa893e0b8 <_ZNK6String8getBytesEPhjj+0x20>
a893e0b8:	62 1b       	sub	r22, r18
a893e0ba:	73 0b       	sbc	r23, r19
a893e0bc:	8a 01       	movw	r16, r20
a893e0be:	01 50       	subi	r16, 0x01	; 1
a893e0c0:	11 09       	sbc	r17, r1
a893e0c2:	60 17       	cp	r22, r16
a893e0c4:	71 07       	cpc	r23, r17
a893e0c6:	00 f4       	brcc	.+0      	; 0xa893e0c8 <_ZNK6String8getBytesEPhjj+0x30>
a893e0c8:	8b 01       	movw	r16, r22
a893e0ca:	fc 01       	movw	r30, r24
a893e0cc:	60 81       	ld	r22, Z
a893e0ce:	71 81       	ldd	r23, Z+1	; 0x01
a893e0d0:	62 0f       	add	r22, r18
a893e0d2:	73 1f       	adc	r23, r19
a893e0d4:	a8 01       	movw	r20, r16
a893e0d6:	ce 01       	movw	r24, r28
a893e0d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a893e0dc:	c0 0f       	add	r28, r16
a893e0de:	d1 1f       	adc	r29, r17
a893e0e0:	18 82       	st	Y, r1
a893e0e2:	df 91       	pop	r29
a893e0e4:	cf 91       	pop	r28
a893e0e6:	1f 91       	pop	r17
a893e0e8:	0f 91       	pop	r16
a893e0ea:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

5127c184 <_ZNK6String7indexOfEcj>:
5127c184:	cf 93       	push	r28
5127c186:	df 93       	push	r29
5127c188:	fc 01       	movw	r30, r24
5127c18a:	84 81       	ldd	r24, Z+4	; 0x04
5127c18c:	95 81       	ldd	r25, Z+5	; 0x05
5127c18e:	48 17       	cp	r20, r24
5127c190:	59 07       	cpc	r21, r25
5127c192:	00 f4       	brcc	.+0      	; 0x5127c194 <_ZNK6String7indexOfEcj+0x10>
5127c194:	c0 81       	ld	r28, Z
5127c196:	d1 81       	ldd	r29, Z+1	; 0x01
5127c198:	77 27       	eor	r23, r23
5127c19a:	67 fd       	sbrc	r22, 7
5127c19c:	70 95       	com	r23
5127c19e:	ce 01       	movw	r24, r28
5127c1a0:	84 0f       	add	r24, r20
5127c1a2:	95 1f       	adc	r25, r21
5127c1a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
5127c1a8:	00 97       	sbiw	r24, 0x00	; 0
5127c1aa:	01 f0       	breq	.+0      	; 0x5127c1ac <_ZNK6String7indexOfEcj+0x28>
5127c1ac:	8c 1b       	sub	r24, r28
5127c1ae:	9d 0b       	sbc	r25, r29
5127c1b0:	00 c0       	rjmp	.+0      	; 0x5127c1b2 <_ZNK6String7indexOfEcj+0x2e>
5127c1b2:	8f ef       	ldi	r24, 0xFF	; 255
5127c1b4:	9f ef       	ldi	r25, 0xFF	; 255
5127c1b6:	df 91       	pop	r29
5127c1b8:	cf 91       	pop	r28
5127c1ba:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

a24f8340 <_ZNK6String7indexOfEc>:
a24f8340:	40 e0       	ldi	r20, 0x00	; 0
a24f8342:	50 e0       	ldi	r21, 0x00	; 0
a24f8344:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String7indexOfERKS_j:

449f0688 <_ZNK6String7indexOfERKS_j>:
449f0688:	cf 93       	push	r28
449f068a:	df 93       	push	r29
449f068c:	fc 01       	movw	r30, r24
449f068e:	84 81       	ldd	r24, Z+4	; 0x04
449f0690:	95 81       	ldd	r25, Z+5	; 0x05
449f0692:	48 17       	cp	r20, r24
449f0694:	59 07       	cpc	r21, r25
449f0696:	00 f4       	brcc	.+0      	; 0x449f0698 <_ZNK6String7indexOfERKS_j+0x10>
449f0698:	c0 81       	ld	r28, Z
449f069a:	d1 81       	ldd	r29, Z+1	; 0x01
449f069c:	fb 01       	movw	r30, r22
449f069e:	60 81       	ld	r22, Z
449f06a0:	71 81       	ldd	r23, Z+1	; 0x01
449f06a2:	ce 01       	movw	r24, r28
449f06a4:	84 0f       	add	r24, r20
449f06a6:	95 1f       	adc	r25, r21
449f06a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
449f06ac:	00 97       	sbiw	r24, 0x00	; 0
449f06ae:	01 f0       	breq	.+0      	; 0x449f06b0 <_ZNK6String7indexOfERKS_j+0x28>
449f06b0:	8c 1b       	sub	r24, r28
449f06b2:	9d 0b       	sbc	r25, r29
449f06b4:	00 c0       	rjmp	.+0      	; 0x449f06b6 <_ZNK6String7indexOfERKS_j+0x2e>
449f06b6:	8f ef       	ldi	r24, 0xFF	; 255
449f06b8:	9f ef       	ldi	r25, 0xFF	; 255
449f06ba:	df 91       	pop	r29
449f06bc:	cf 91       	pop	r28
449f06be:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

893e0d48 <_ZNK6String7indexOfERKS_>:
893e0d48:	40 e0       	ldi	r20, 0x00	; 0
893e0d4a:	50 e0       	ldi	r21, 0x00	; 0
893e0d4c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

127c1a98 <_ZNK6String11lastIndexOfEcj>:
127c1a98:	df 92       	push	r13
127c1a9a:	ef 92       	push	r14
127c1a9c:	ff 92       	push	r15
127c1a9e:	0f 93       	push	r16
127c1aa0:	1f 93       	push	r17
127c1aa2:	cf 93       	push	r28
127c1aa4:	df 93       	push	r29
127c1aa6:	ec 01       	movw	r28, r24
127c1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
127c1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
127c1aac:	48 17       	cp	r20, r24
127c1aae:	59 07       	cpc	r21, r25
127c1ab0:	00 f0       	brcs	.+0      	; 0x127c1ab2 <_ZNK6String11lastIndexOfEcj+0x1a>
127c1ab2:	8f ef       	ldi	r24, 0xFF	; 255
127c1ab4:	9f ef       	ldi	r25, 0xFF	; 255
127c1ab6:	00 c0       	rjmp	.+0      	; 0x127c1ab8 <_ZNK6String11lastIndexOfEcj+0x20>
127c1ab8:	8a 01       	movw	r16, r20
127c1aba:	0f 5f       	subi	r16, 0xFF	; 255
127c1abc:	1f 4f       	sbci	r17, 0xFF	; 255
127c1abe:	e8 81       	ld	r30, Y
127c1ac0:	f9 81       	ldd	r31, Y+1	; 0x01
127c1ac2:	e0 0f       	add	r30, r16
127c1ac4:	f1 1f       	adc	r31, r17
127c1ac6:	d0 80       	ld	r13, Z
127c1ac8:	10 82       	st	Z, r1
127c1aca:	e8 80       	ld	r14, Y
127c1acc:	f9 80       	ldd	r15, Y+1	; 0x01
127c1ace:	77 27       	eor	r23, r23
127c1ad0:	67 fd       	sbrc	r22, 7
127c1ad2:	70 95       	com	r23
127c1ad4:	c7 01       	movw	r24, r14
127c1ad6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
127c1ada:	f7 01       	movw	r30, r14
127c1adc:	e0 0f       	add	r30, r16
127c1ade:	f1 1f       	adc	r31, r17
127c1ae0:	d0 82       	st	Z, r13
127c1ae2:	00 97       	sbiw	r24, 0x00	; 0
127c1ae4:	01 f0       	breq	.+0      	; 0x127c1ae6 <_ZNK6String11lastIndexOfEcj+0x4e>
127c1ae6:	28 81       	ld	r18, Y
127c1ae8:	39 81       	ldd	r19, Y+1	; 0x01
127c1aea:	82 1b       	sub	r24, r18
127c1aec:	93 0b       	sbc	r25, r19
127c1aee:	df 91       	pop	r29
127c1af0:	cf 91       	pop	r28
127c1af2:	1f 91       	pop	r17
127c1af4:	0f 91       	pop	r16
127c1af6:	ff 90       	pop	r15
127c1af8:	ef 90       	pop	r14
127c1afa:	df 90       	pop	r13
127c1afc:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

24f83596 <_ZNK6String11lastIndexOfEc>:
24f83596:	fc 01       	movw	r30, r24
24f83598:	44 81       	ldd	r20, Z+4	; 0x04
24f8359a:	55 81       	ldd	r21, Z+5	; 0x05
24f8359c:	41 50       	subi	r20, 0x01	; 1
24f8359e:	51 09       	sbc	r21, r1
24f835a0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

49f06b3a <_ZNK6String11lastIndexOfERKS_j>:
49f06b3a:	af 92       	push	r10
49f06b3c:	bf 92       	push	r11
49f06b3e:	cf 92       	push	r12
49f06b40:	df 92       	push	r13
49f06b42:	ef 92       	push	r14
49f06b44:	ff 92       	push	r15
49f06b46:	0f 93       	push	r16
49f06b48:	1f 93       	push	r17
49f06b4a:	cf 93       	push	r28
49f06b4c:	df 93       	push	r29
49f06b4e:	7b 01       	movw	r14, r22
49f06b50:	ea 01       	movw	r28, r20
49f06b52:	fb 01       	movw	r30, r22
49f06b54:	44 81       	ldd	r20, Z+4	; 0x04
49f06b56:	55 81       	ldd	r21, Z+5	; 0x05
49f06b58:	41 15       	cp	r20, r1
49f06b5a:	51 05       	cpc	r21, r1
49f06b5c:	01 f0       	breq	.+0      	; 0x49f06b5e <_ZNK6String11lastIndexOfERKS_j+0x24>
49f06b5e:	fc 01       	movw	r30, r24
49f06b60:	24 81       	ldd	r18, Z+4	; 0x04
49f06b62:	35 81       	ldd	r19, Z+5	; 0x05
49f06b64:	21 15       	cp	r18, r1
49f06b66:	31 05       	cpc	r19, r1
49f06b68:	01 f0       	breq	.+0      	; 0x49f06b6a <_ZNK6String11lastIndexOfERKS_j+0x30>
49f06b6a:	24 17       	cp	r18, r20
49f06b6c:	35 07       	cpc	r19, r21
49f06b6e:	00 f0       	brcs	.+0      	; 0x49f06b70 <_ZNK6String11lastIndexOfERKS_j+0x36>
49f06b70:	c2 17       	cp	r28, r18
49f06b72:	d3 07       	cpc	r29, r19
49f06b74:	00 f0       	brcs	.+0      	; 0x49f06b76 <_ZNK6String11lastIndexOfERKS_j+0x3c>
49f06b76:	e9 01       	movw	r28, r18
49f06b78:	21 97       	sbiw	r28, 0x01	; 1
49f06b7a:	fc 01       	movw	r30, r24
49f06b7c:	00 81       	ld	r16, Z
49f06b7e:	11 81       	ldd	r17, Z+1	; 0x01
49f06b80:	c8 01       	movw	r24, r16
49f06b82:	aa 24       	eor	r10, r10
49f06b84:	aa 94       	dec	r10
49f06b86:	bb 24       	eor	r11, r11
49f06b88:	ba 94       	dec	r11
49f06b8a:	68 01       	movw	r12, r16
49f06b8c:	cc 0e       	add	r12, r28
49f06b8e:	dd 1e       	adc	r13, r29
49f06b90:	c8 16       	cp	r12, r24
49f06b92:	d9 06       	cpc	r13, r25
49f06b94:	00 f0       	brcs	.+0      	; 0x49f06b96 <_ZNK6String11lastIndexOfERKS_j+0x5c>
49f06b96:	f7 01       	movw	r30, r14
49f06b98:	60 81       	ld	r22, Z
49f06b9a:	71 81       	ldd	r23, Z+1	; 0x01
49f06b9c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
49f06ba0:	00 97       	sbiw	r24, 0x00	; 0
49f06ba2:	01 f0       	breq	.+0      	; 0x49f06ba4 <_ZNK6String11lastIndexOfERKS_j+0x6a>
49f06ba4:	9c 01       	movw	r18, r24
49f06ba6:	20 1b       	sub	r18, r16
49f06ba8:	31 0b       	sbc	r19, r17
49f06baa:	c2 17       	cp	r28, r18
49f06bac:	d3 07       	cpc	r29, r19
49f06bae:	00 f4       	brcc	.+0      	; 0x49f06bb0 <_ZNK6String11lastIndexOfERKS_j+0x76>
49f06bb0:	95 01       	movw	r18, r10
49f06bb2:	01 96       	adiw	r24, 0x01	; 1
49f06bb4:	59 01       	movw	r10, r18
49f06bb6:	00 c0       	rjmp	.+0      	; 0x49f06bb8 <_ZNK6String11lastIndexOfERKS_j+0x7e>
49f06bb8:	8f ef       	ldi	r24, 0xFF	; 255
49f06bba:	9f ef       	ldi	r25, 0xFF	; 255
49f06bbc:	00 c0       	rjmp	.+0      	; 0x49f06bbe <_ZNK6String11lastIndexOfERKS_j+0x84>
49f06bbe:	c5 01       	movw	r24, r10
49f06bc0:	df 91       	pop	r29
49f06bc2:	cf 91       	pop	r28
49f06bc4:	1f 91       	pop	r17
49f06bc6:	0f 91       	pop	r16
49f06bc8:	ff 90       	pop	r15
49f06bca:	ef 90       	pop	r14
49f06bcc:	df 90       	pop	r13
49f06bce:	cf 90       	pop	r12
49f06bd0:	bf 90       	pop	r11
49f06bd2:	af 90       	pop	r10
49f06bd4:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

93e0d710 <_ZNK6String11lastIndexOfERKS_>:
93e0d710:	fc 01       	movw	r30, r24
93e0d712:	44 81       	ldd	r20, Z+4	; 0x04
93e0d714:	55 81       	ldd	r21, Z+5	; 0x05
93e0d716:	fb 01       	movw	r30, r22
93e0d718:	24 81       	ldd	r18, Z+4	; 0x04
93e0d71a:	35 81       	ldd	r19, Z+5	; 0x05
93e0d71c:	42 1b       	sub	r20, r18
93e0d71e:	53 0b       	sbc	r21, r19
93e0d720:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String9substringEjj:

4f835c69 <_ZNK6String9substringEjj>:
4f835c69:	bf 92       	push	r11
4f835c6b:	cf 92       	push	r12
4f835c6d:	df 92       	push	r13
4f835c6f:	ef 92       	push	r14
4f835c71:	ff 92       	push	r15
4f835c73:	0f 93       	push	r16
4f835c75:	1f 93       	push	r17
4f835c77:	cf 93       	push	r28
4f835c79:	df 93       	push	r29
4f835c7b:	6c 01       	movw	r12, r24
4f835c7d:	7b 01       	movw	r14, r22
4f835c7f:	ea 01       	movw	r28, r20
4f835c81:	89 01       	movw	r16, r18
4f835c83:	24 17       	cp	r18, r20
4f835c85:	35 07       	cpc	r19, r21
4f835c87:	00 f4       	brcc	.+0      	; 0x4f835c89 <_ZNK6String9substringEjj+0x20>
4f835c89:	8d 2f       	mov	r24, r29
4f835c8b:	e9 01       	movw	r28, r18
4f835c8d:	04 2f       	mov	r16, r20
4f835c8f:	18 2f       	mov	r17, r24
4f835c91:	60 e0       	ldi	r22, 0x00	; 0
4f835c93:	70 e0       	ldi	r23, 0x00	; 0
4f835c95:	c6 01       	movw	r24, r12
4f835c97:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4f835c9b:	d7 01       	movw	r26, r14
4f835c9d:	14 96       	adiw	r26, 0x04	; 4
4f835c9f:	8d 91       	ld	r24, X+
4f835ca1:	9c 91       	ld	r25, X
4f835ca3:	15 97       	sbiw	r26, 0x05	; 5
4f835ca5:	8c 17       	cp	r24, r28
4f835ca7:	9d 07       	cpc	r25, r29
4f835ca9:	00 f0       	brcs	.+0      	; 0x4f835cab <_ZNK6String9substringEjj+0x42>
4f835cab:	80 17       	cp	r24, r16
4f835cad:	91 07       	cpc	r25, r17
4f835caf:	00 f4       	brcc	.+0      	; 0x4f835cb1 <_ZNK6String9substringEjj+0x48>
4f835cb1:	8c 01       	movw	r16, r24
4f835cb3:	d7 01       	movw	r26, r14
4f835cb5:	ed 91       	ld	r30, X+
4f835cb7:	fc 91       	ld	r31, X
4f835cb9:	11 97       	sbiw	r26, 0x01	; 1
4f835cbb:	e0 0f       	add	r30, r16
4f835cbd:	f1 1f       	adc	r31, r17
4f835cbf:	b0 80       	ld	r11, Z
4f835cc1:	10 82       	st	Z, r1
4f835cc3:	6d 91       	ld	r22, X+
4f835cc5:	7c 91       	ld	r23, X
4f835cc7:	6c 0f       	add	r22, r28
4f835cc9:	7d 1f       	adc	r23, r29
4f835ccb:	c6 01       	movw	r24, r12
4f835ccd:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4f835cd1:	d7 01       	movw	r26, r14
4f835cd3:	ed 91       	ld	r30, X+
4f835cd5:	fc 91       	ld	r31, X
4f835cd7:	e0 0f       	add	r30, r16
4f835cd9:	f1 1f       	adc	r31, r17
4f835cdb:	b0 82       	st	Z, r11
4f835cdd:	c6 01       	movw	r24, r12
4f835cdf:	df 91       	pop	r29
4f835ce1:	cf 91       	pop	r28
4f835ce3:	1f 91       	pop	r17
4f835ce5:	0f 91       	pop	r16
4f835ce7:	ff 90       	pop	r15
4f835ce9:	ef 90       	pop	r14
4f835ceb:	df 90       	pop	r13
4f835ced:	cf 90       	pop	r12
4f835cef:	bf 90       	pop	r11
4f835cf1:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

9f06b95c <_ZNK6String9substringEj>:
9f06b95c:	cf 93       	push	r28
9f06b95e:	df 93       	push	r29
9f06b960:	ec 01       	movw	r28, r24
9f06b962:	fb 01       	movw	r30, r22
9f06b964:	24 81       	ldd	r18, Z+4	; 0x04
9f06b966:	35 81       	ldd	r19, Z+5	; 0x05
9f06b968:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
9f06b96c:	ce 01       	movw	r24, r28
9f06b96e:	df 91       	pop	r29
9f06b970:	cf 91       	pop	r28
9f06b972:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

3e0d72d0 <_ZN6String7replaceEcc>:
3e0d72d0:	dc 01       	movw	r26, r24
3e0d72d2:	ed 91       	ld	r30, X+
3e0d72d4:	fc 91       	ld	r31, X
3e0d72d6:	30 97       	sbiw	r30, 0x00	; 0
3e0d72d8:	01 f4       	brne	.+0      	; 0x3e0d72da <_ZN6String7replaceEcc+0xa>
3e0d72da:	08 95       	ret
3e0d72dc:	86 13       	cpse	r24, r22
3e0d72de:	00 c0       	rjmp	.+0      	; 0x3e0d72e0 <_ZN6String7replaceEcc+0x10>
3e0d72e0:	40 83       	st	Z, r20
3e0d72e2:	31 96       	adiw	r30, 0x01	; 1
3e0d72e4:	80 81       	ld	r24, Z
3e0d72e6:	81 11       	cpse	r24, r1
3e0d72e8:	00 c0       	rjmp	.+0      	; 0x3e0d72ea <_ZN6String7replaceEcc+0x1a>
3e0d72ea:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

7c1ae5bc <_ZN6String7replaceERKS_S1_>:
7c1ae5bc:	2f 92       	push	r2
7c1ae5be:	3f 92       	push	r3
7c1ae5c0:	4f 92       	push	r4
7c1ae5c2:	5f 92       	push	r5
7c1ae5c4:	6f 92       	push	r6
7c1ae5c6:	7f 92       	push	r7
7c1ae5c8:	8f 92       	push	r8
7c1ae5ca:	9f 92       	push	r9
7c1ae5cc:	af 92       	push	r10
7c1ae5ce:	bf 92       	push	r11
7c1ae5d0:	cf 92       	push	r12
7c1ae5d2:	df 92       	push	r13
7c1ae5d4:	ef 92       	push	r14
7c1ae5d6:	ff 92       	push	r15
7c1ae5d8:	0f 93       	push	r16
7c1ae5da:	1f 93       	push	r17
7c1ae5dc:	cf 93       	push	r28
7c1ae5de:	df 93       	push	r29
7c1ae5e0:	ec 01       	movw	r28, r24
7c1ae5e2:	5b 01       	movw	r10, r22
7c1ae5e4:	7a 01       	movw	r14, r20
7c1ae5e6:	4c 80       	ldd	r4, Y+4	; 0x04
7c1ae5e8:	5d 80       	ldd	r5, Y+5	; 0x05
7c1ae5ea:	41 14       	cp	r4, r1
7c1ae5ec:	51 04       	cpc	r5, r1
7c1ae5ee:	01 f4       	brne	.+0      	; 0x7c1ae5f0 <_ZN6String7replaceERKS_S1_+0x34>
7c1ae5f0:	00 c0       	rjmp	.+0      	; 0x7c1ae5f2 <_ZN6String7replaceERKS_S1_+0x36>
7c1ae5f2:	fb 01       	movw	r30, r22
7c1ae5f4:	64 80       	ldd	r6, Z+4	; 0x04
7c1ae5f6:	75 80       	ldd	r7, Z+5	; 0x05
7c1ae5f8:	61 14       	cp	r6, r1
7c1ae5fa:	71 04       	cpc	r7, r1
7c1ae5fc:	01 f4       	brne	.+0      	; 0x7c1ae5fe <_ZN6String7replaceERKS_S1_+0x42>
7c1ae5fe:	00 c0       	rjmp	.+0      	; 0x7c1ae600 <_ZN6String7replaceERKS_S1_+0x44>
7c1ae600:	fa 01       	movw	r30, r20
7c1ae602:	c4 80       	ldd	r12, Z+4	; 0x04
7c1ae604:	d5 80       	ldd	r13, Z+5	; 0x05
7c1ae606:	c6 18       	sub	r12, r6
7c1ae608:	d7 08       	sbc	r13, r7
7c1ae60a:	08 81       	ld	r16, Y
7c1ae60c:	19 81       	ldd	r17, Y+1	; 0x01
7c1ae60e:	c1 14       	cp	r12, r1
7c1ae610:	d1 04       	cpc	r13, r1
7c1ae612:	01 f4       	brne	.+0      	; 0x7c1ae614 <_ZN6String7replaceERKS_S1_+0x58>
7c1ae614:	f5 01       	movw	r30, r10
7c1ae616:	60 81       	ld	r22, Z
7c1ae618:	71 81       	ldd	r23, Z+1	; 0x01
7c1ae61a:	c8 01       	movw	r24, r16
7c1ae61c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae620:	ec 01       	movw	r28, r24
7c1ae622:	00 97       	sbiw	r24, 0x00	; 0
7c1ae624:	01 f4       	brne	.+0      	; 0x7c1ae626 <_ZN6String7replaceERKS_S1_+0x6a>
7c1ae626:	00 c0       	rjmp	.+0      	; 0x7c1ae628 <_ZN6String7replaceERKS_S1_+0x6c>
7c1ae628:	f7 01       	movw	r30, r14
7c1ae62a:	60 81       	ld	r22, Z
7c1ae62c:	71 81       	ldd	r23, Z+1	; 0x01
7c1ae62e:	44 81       	ldd	r20, Z+4	; 0x04
7c1ae630:	55 81       	ldd	r21, Z+5	; 0x05
7c1ae632:	ce 01       	movw	r24, r28
7c1ae634:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae638:	f7 01       	movw	r30, r14
7c1ae63a:	04 81       	ldd	r16, Z+4	; 0x04
7c1ae63c:	15 81       	ldd	r17, Z+5	; 0x05
7c1ae63e:	0c 0f       	add	r16, r28
7c1ae640:	1d 1f       	adc	r17, r29
7c1ae642:	00 c0       	rjmp	.+0      	; 0x7c1ae644 <_ZN6String7replaceERKS_S1_+0x88>
7c1ae644:	d7 fc       	sbrc	r13, 7
7c1ae646:	00 c0       	rjmp	.+0      	; 0x7c1ae648 <_ZN6String7replaceERKS_S1_+0x8c>
7c1ae648:	fb 01       	movw	r30, r22
7c1ae64a:	20 80       	ld	r2, Z
7c1ae64c:	31 80       	ldd	r3, Z+1	; 0x01
7c1ae64e:	42 01       	movw	r8, r4
7c1ae650:	00 c0       	rjmp	.+0      	; 0x7c1ae652 <_ZN6String7replaceERKS_S1_+0x96>
7c1ae652:	48 01       	movw	r8, r16
7c1ae654:	f5 01       	movw	r30, r10
7c1ae656:	60 81       	ld	r22, Z
7c1ae658:	71 81       	ldd	r23, Z+1	; 0x01
7c1ae65a:	c8 01       	movw	r24, r16
7c1ae65c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae660:	2c 01       	movw	r4, r24
7c1ae662:	00 97       	sbiw	r24, 0x00	; 0
7c1ae664:	01 f0       	breq	.+0      	; 0x7c1ae666 <_ZN6String7replaceERKS_S1_+0xaa>
7c1ae666:	32 01       	movw	r6, r4
7c1ae668:	60 1a       	sub	r6, r16
7c1ae66a:	71 0a       	sbc	r7, r17
7c1ae66c:	a3 01       	movw	r20, r6
7c1ae66e:	b8 01       	movw	r22, r16
7c1ae670:	c4 01       	movw	r24, r8
7c1ae672:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae676:	68 0c       	add	r6, r8
7c1ae678:	79 1c       	adc	r7, r9
7c1ae67a:	f7 01       	movw	r30, r14
7c1ae67c:	60 81       	ld	r22, Z
7c1ae67e:	71 81       	ldd	r23, Z+1	; 0x01
7c1ae680:	44 81       	ldd	r20, Z+4	; 0x04
7c1ae682:	55 81       	ldd	r21, Z+5	; 0x05
7c1ae684:	c3 01       	movw	r24, r6
7c1ae686:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae68a:	f7 01       	movw	r30, r14
7c1ae68c:	84 80       	ldd	r8, Z+4	; 0x04
7c1ae68e:	95 80       	ldd	r9, Z+5	; 0x05
7c1ae690:	86 0c       	add	r8, r6
7c1ae692:	97 1c       	adc	r9, r7
7c1ae694:	f5 01       	movw	r30, r10
7c1ae696:	04 81       	ldd	r16, Z+4	; 0x04
7c1ae698:	15 81       	ldd	r17, Z+5	; 0x05
7c1ae69a:	04 0d       	add	r16, r4
7c1ae69c:	15 1d       	adc	r17, r5
7c1ae69e:	8c 81       	ldd	r24, Y+4	; 0x04
7c1ae6a0:	9d 81       	ldd	r25, Y+5	; 0x05
7c1ae6a2:	8c 0d       	add	r24, r12
7c1ae6a4:	9d 1d       	adc	r25, r13
7c1ae6a6:	9d 83       	std	Y+5, r25	; 0x05
7c1ae6a8:	8c 83       	std	Y+4, r24	; 0x04
7c1ae6aa:	00 c0       	rjmp	.+0      	; 0x7c1ae6ac <_ZN6String7replaceERKS_S1_+0xf0>
7c1ae6ac:	b8 01       	movw	r22, r16
7c1ae6ae:	c4 01       	movw	r24, r8
7c1ae6b0:	df 91       	pop	r29
7c1ae6b2:	cf 91       	pop	r28
7c1ae6b4:	1f 91       	pop	r17
7c1ae6b6:	0f 91       	pop	r16
7c1ae6b8:	ff 90       	pop	r15
7c1ae6ba:	ef 90       	pop	r14
7c1ae6bc:	df 90       	pop	r13
7c1ae6be:	cf 90       	pop	r12
7c1ae6c0:	bf 90       	pop	r11
7c1ae6c2:	af 90       	pop	r10
7c1ae6c4:	9f 90       	pop	r9
7c1ae6c6:	8f 90       	pop	r8
7c1ae6c8:	7f 90       	pop	r7
7c1ae6ca:	6f 90       	pop	r6
7c1ae6cc:	5f 90       	pop	r5
7c1ae6ce:	4f 90       	pop	r4
7c1ae6d0:	3f 90       	pop	r3
7c1ae6d2:	2f 90       	pop	r2
7c1ae6d4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
7c1ae6d8:	b1 01       	movw	r22, r2
7c1ae6da:	c8 01       	movw	r24, r16
7c1ae6dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae6e0:	00 97       	sbiw	r24, 0x00	; 0
7c1ae6e2:	01 f0       	breq	.+0      	; 0x7c1ae6e4 <_ZN6String7replaceERKS_S1_+0x128>
7c1ae6e4:	8c 01       	movw	r16, r24
7c1ae6e6:	06 0d       	add	r16, r6
7c1ae6e8:	17 1d       	adc	r17, r7
7c1ae6ea:	8c 0c       	add	r8, r12
7c1ae6ec:	9d 1c       	adc	r9, r13
7c1ae6ee:	00 c0       	rjmp	.+0      	; 0x7c1ae6f0 <_ZN6String7replaceERKS_S1_+0x134>
7c1ae6f0:	84 14       	cp	r8, r4
7c1ae6f2:	95 04       	cpc	r9, r5
7c1ae6f4:	01 f4       	brne	.+0      	; 0x7c1ae6f6 <_ZN6String7replaceERKS_S1_+0x13a>
7c1ae6f6:	00 c0       	rjmp	.+0      	; 0x7c1ae6f8 <_ZN6String7replaceERKS_S1_+0x13c>
7c1ae6f8:	8a 81       	ldd	r24, Y+2	; 0x02
7c1ae6fa:	9b 81       	ldd	r25, Y+3	; 0x03
7c1ae6fc:	88 15       	cp	r24, r8
7c1ae6fe:	99 05       	cpc	r25, r9
7c1ae700:	00 f4       	brcc	.+0      	; 0x7c1ae702 <_ZN6String7replaceERKS_S1_+0x146>
7c1ae702:	b4 01       	movw	r22, r8
7c1ae704:	ce 01       	movw	r24, r28
7c1ae706:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae70a:	88 23       	and	r24, r24
7c1ae70c:	01 f0       	breq	.+0      	; 0x7c1ae70e <_ZN6String7replaceERKS_S1_+0x152>
7c1ae70e:	4c 81       	ldd	r20, Y+4	; 0x04
7c1ae710:	5d 81       	ldd	r21, Y+5	; 0x05
7c1ae712:	41 50       	subi	r20, 0x01	; 1
7c1ae714:	51 09       	sbc	r21, r1
7c1ae716:	57 fd       	sbrc	r21, 7
7c1ae718:	00 c0       	rjmp	.+0      	; 0x7c1ae71a <_ZN6String7replaceERKS_S1_+0x15e>
7c1ae71a:	b5 01       	movw	r22, r10
7c1ae71c:	ce 01       	movw	r24, r28
7c1ae71e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae722:	8c 01       	movw	r16, r24
7c1ae724:	97 fd       	sbrc	r25, 7
7c1ae726:	00 c0       	rjmp	.+0      	; 0x7c1ae728 <_ZN6String7replaceERKS_S1_+0x16c>
7c1ae728:	88 81       	ld	r24, Y
7c1ae72a:	99 81       	ldd	r25, Y+1	; 0x01
7c1ae72c:	f5 01       	movw	r30, r10
7c1ae72e:	24 81       	ldd	r18, Z+4	; 0x04
7c1ae730:	35 81       	ldd	r19, Z+5	; 0x05
7c1ae732:	20 0f       	add	r18, r16
7c1ae734:	31 1f       	adc	r19, r17
7c1ae736:	82 0f       	add	r24, r18
7c1ae738:	93 1f       	adc	r25, r19
7c1ae73a:	4c 81       	ldd	r20, Y+4	; 0x04
7c1ae73c:	5d 81       	ldd	r21, Y+5	; 0x05
7c1ae73e:	42 1b       	sub	r20, r18
7c1ae740:	53 0b       	sbc	r21, r19
7c1ae742:	bc 01       	movw	r22, r24
7c1ae744:	8c 0d       	add	r24, r12
7c1ae746:	9d 1d       	adc	r25, r13
7c1ae748:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae74c:	8c 81       	ldd	r24, Y+4	; 0x04
7c1ae74e:	9d 81       	ldd	r25, Y+5	; 0x05
7c1ae750:	8c 0d       	add	r24, r12
7c1ae752:	9d 1d       	adc	r25, r13
7c1ae754:	9d 83       	std	Y+5, r25	; 0x05
7c1ae756:	8c 83       	std	Y+4, r24	; 0x04
7c1ae758:	e8 81       	ld	r30, Y
7c1ae75a:	f9 81       	ldd	r31, Y+1	; 0x01
7c1ae75c:	e8 0f       	add	r30, r24
7c1ae75e:	f9 1f       	adc	r31, r25
7c1ae760:	10 82       	st	Z, r1
7c1ae762:	88 81       	ld	r24, Y
7c1ae764:	99 81       	ldd	r25, Y+1	; 0x01
7c1ae766:	f7 01       	movw	r30, r14
7c1ae768:	60 81       	ld	r22, Z
7c1ae76a:	71 81       	ldd	r23, Z+1	; 0x01
7c1ae76c:	44 81       	ldd	r20, Z+4	; 0x04
7c1ae76e:	55 81       	ldd	r21, Z+5	; 0x05
7c1ae770:	80 0f       	add	r24, r16
7c1ae772:	91 1f       	adc	r25, r17
7c1ae774:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae778:	a8 01       	movw	r20, r16
7c1ae77a:	00 c0       	rjmp	.+0      	; 0x7c1ae77c <_ZN6String7replaceERKS_S1_+0x1c0>
7c1ae77c:	df 91       	pop	r29
7c1ae77e:	cf 91       	pop	r28
7c1ae780:	1f 91       	pop	r17
7c1ae782:	0f 91       	pop	r16
7c1ae784:	ff 90       	pop	r15
7c1ae786:	ef 90       	pop	r14
7c1ae788:	df 90       	pop	r13
7c1ae78a:	cf 90       	pop	r12
7c1ae78c:	bf 90       	pop	r11
7c1ae78e:	af 90       	pop	r10
7c1ae790:	9f 90       	pop	r9
7c1ae792:	8f 90       	pop	r8
7c1ae794:	7f 90       	pop	r7
7c1ae796:	6f 90       	pop	r6
7c1ae798:	5f 90       	pop	r5
7c1ae79a:	4f 90       	pop	r4
7c1ae79c:	3f 90       	pop	r3
7c1ae79e:	2f 90       	pop	r2
7c1ae7a0:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

f835cd5e <_ZN6String11toLowerCaseEv>:
f835cd5e:	cf 93       	push	r28
f835cd60:	df 93       	push	r29
f835cd62:	fc 01       	movw	r30, r24
f835cd64:	c0 81       	ld	r28, Z
f835cd66:	d1 81       	ldd	r29, Z+1	; 0x01
f835cd68:	20 97       	sbiw	r28, 0x00	; 0
f835cd6a:	01 f0       	breq	.+0      	; 0xf835cd6c <_ZN6String11toLowerCaseEv+0xe>
f835cd6c:	88 81       	ld	r24, Y
f835cd6e:	88 23       	and	r24, r24
f835cd70:	01 f0       	breq	.+0      	; 0xf835cd72 <_ZN6String11toLowerCaseEv+0x14>
f835cd72:	99 27       	eor	r25, r25
f835cd74:	87 fd       	sbrc	r24, 7
f835cd76:	90 95       	com	r25
f835cd78:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f835cd7c:	89 93       	st	Y+, r24
f835cd7e:	00 c0       	rjmp	.+0      	; 0xf835cd80 <_ZN6String11toLowerCaseEv+0x22>
f835cd80:	df 91       	pop	r29
f835cd82:	cf 91       	pop	r28
f835cd84:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

f06b9ae4 <_ZN6String11toUpperCaseEv>:
f06b9ae4:	cf 93       	push	r28
f06b9ae6:	df 93       	push	r29
f06b9ae8:	fc 01       	movw	r30, r24
f06b9aea:	c0 81       	ld	r28, Z
f06b9aec:	d1 81       	ldd	r29, Z+1	; 0x01
f06b9aee:	20 97       	sbiw	r28, 0x00	; 0
f06b9af0:	01 f0       	breq	.+0      	; 0xf06b9af2 <_ZN6String11toUpperCaseEv+0xe>
f06b9af2:	88 81       	ld	r24, Y
f06b9af4:	88 23       	and	r24, r24
f06b9af6:	01 f0       	breq	.+0      	; 0xf06b9af8 <_ZN6String11toUpperCaseEv+0x14>
f06b9af8:	99 27       	eor	r25, r25
f06b9afa:	87 fd       	sbrc	r24, 7
f06b9afc:	90 95       	com	r25
f06b9afe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f06b9b02:	89 93       	st	Y+, r24
f06b9b04:	00 c0       	rjmp	.+0      	; 0xf06b9b06 <_ZN6String11toUpperCaseEv+0x22>
f06b9b06:	df 91       	pop	r29
f06b9b08:	cf 91       	pop	r28
f06b9b0a:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

e0d735f0 <_ZN6String4trimEv>:
e0d735f0:	af 92       	push	r10
e0d735f2:	bf 92       	push	r11
e0d735f4:	cf 92       	push	r12
e0d735f6:	df 92       	push	r13
e0d735f8:	ef 92       	push	r14
e0d735fa:	ff 92       	push	r15
e0d735fc:	0f 93       	push	r16
e0d735fe:	1f 93       	push	r17
e0d73600:	cf 93       	push	r28
e0d73602:	df 93       	push	r29
e0d73604:	7c 01       	movw	r14, r24
e0d73606:	dc 01       	movw	r26, r24
e0d73608:	cd 90       	ld	r12, X+
e0d7360a:	dc 90       	ld	r13, X
e0d7360c:	11 97       	sbiw	r26, 0x01	; 1
e0d7360e:	c1 14       	cp	r12, r1
e0d73610:	d1 04       	cpc	r13, r1
e0d73612:	01 f4       	brne	.+0      	; 0xe0d73614 <_ZN6String4trimEv+0x24>
e0d73614:	00 c0       	rjmp	.+0      	; 0xe0d73616 <_ZN6String4trimEv+0x26>
e0d73616:	14 96       	adiw	r26, 0x04	; 4
e0d73618:	cd 91       	ld	r28, X+
e0d7361a:	dc 91       	ld	r29, X
e0d7361c:	15 97       	sbiw	r26, 0x05	; 5
e0d7361e:	20 97       	sbiw	r28, 0x00	; 0
e0d73620:	01 f0       	breq	.+0      	; 0xe0d73622 <_ZN6String4trimEv+0x32>
e0d73622:	56 01       	movw	r10, r12
e0d73624:	85 01       	movw	r16, r10
e0d73626:	bf ef       	ldi	r27, 0xFF	; 255
e0d73628:	ab 1a       	sub	r10, r27
e0d7362a:	bb 0a       	sbc	r11, r27
e0d7362c:	f8 01       	movw	r30, r16
e0d7362e:	80 81       	ld	r24, Z
e0d73630:	99 27       	eor	r25, r25
e0d73632:	87 fd       	sbrc	r24, 7
e0d73634:	90 95       	com	r25
e0d73636:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e0d7363a:	89 2b       	or	r24, r25
e0d7363c:	01 f4       	brne	.+0      	; 0xe0d7363e <_ZN6String4trimEv+0x4e>
e0d7363e:	21 97       	sbiw	r28, 0x01	; 1
e0d73640:	cc 0d       	add	r28, r12
e0d73642:	dd 1d       	adc	r29, r13
e0d73644:	88 81       	ld	r24, Y
e0d73646:	99 27       	eor	r25, r25
e0d73648:	87 fd       	sbrc	r24, 7
e0d7364a:	90 95       	com	r25
e0d7364c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e0d73650:	89 2b       	or	r24, r25
e0d73652:	01 f4       	brne	.+0      	; 0xe0d73654 <_ZN6String4trimEv+0x64>
e0d73654:	ae 01       	movw	r20, r28
e0d73656:	4f 5f       	subi	r20, 0xFF	; 255
e0d73658:	5f 4f       	sbci	r21, 0xFF	; 255
e0d7365a:	40 1b       	sub	r20, r16
e0d7365c:	51 0b       	sbc	r21, r17
e0d7365e:	d7 01       	movw	r26, r14
e0d73660:	15 96       	adiw	r26, 0x05	; 5
e0d73662:	5c 93       	st	X, r21
e0d73664:	4e 93       	st	-X, r20
e0d73666:	14 97       	sbiw	r26, 0x04	; 4
e0d73668:	c0 16       	cp	r12, r16
e0d7366a:	d1 06       	cpc	r13, r17
e0d7366c:	00 f4       	brcc	.+0      	; 0xe0d7366e <_ZN6String4trimEv+0x7e>
e0d7366e:	b8 01       	movw	r22, r16
e0d73670:	c6 01       	movw	r24, r12
e0d73672:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e0d73676:	00 c0       	rjmp	.+0      	; 0xe0d73678 <_ZN6String4trimEv+0x88>
e0d73678:	c0 17       	cp	r28, r16
e0d7367a:	d1 07       	cpc	r29, r17
e0d7367c:	00 f0       	brcs	.+0      	; 0xe0d7367e <_ZN6String4trimEv+0x8e>
e0d7367e:	21 97       	sbiw	r28, 0x01	; 1
e0d73680:	00 c0       	rjmp	.+0      	; 0xe0d73682 <_ZN6String4trimEv+0x92>
e0d73682:	d7 01       	movw	r26, r14
e0d73684:	ed 91       	ld	r30, X+
e0d73686:	fc 91       	ld	r31, X
e0d73688:	11 97       	sbiw	r26, 0x01	; 1
e0d7368a:	14 96       	adiw	r26, 0x04	; 4
e0d7368c:	8d 91       	ld	r24, X+
e0d7368e:	9c 91       	ld	r25, X
e0d73690:	15 97       	sbiw	r26, 0x05	; 5
e0d73692:	e8 0f       	add	r30, r24
e0d73694:	f9 1f       	adc	r31, r25
e0d73696:	10 82       	st	Z, r1
e0d73698:	df 91       	pop	r29
e0d7369a:	cf 91       	pop	r28
e0d7369c:	1f 91       	pop	r17
e0d7369e:	0f 91       	pop	r16
e0d736a0:	ff 90       	pop	r15
e0d736a2:	ef 90       	pop	r14
e0d736a4:	df 90       	pop	r13
e0d736a6:	cf 90       	pop	r12
e0d736a8:	bf 90       	pop	r11
e0d736aa:	af 90       	pop	r10
e0d736ac:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

c1ae6c9e <_ZNK6String5toIntEv>:
c1ae6c9e:	fc 01       	movw	r30, r24
c1ae6ca0:	80 81       	ld	r24, Z
c1ae6ca2:	91 81       	ldd	r25, Z+1	; 0x01
c1ae6ca4:	00 97       	sbiw	r24, 0x00	; 0
c1ae6ca6:	01 f0       	breq	.+0      	; 0xc1ae6ca8 <_ZNK6String5toIntEv+0xa>
c1ae6ca8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
c1ae6cac:	60 e0       	ldi	r22, 0x00	; 0
c1ae6cae:	70 e0       	ldi	r23, 0x00	; 0
c1ae6cb0:	cb 01       	movw	r24, r22
c1ae6cb2:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006a8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000105e  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.startup.main 0000001a  00000000  00000000  0000173a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY

Disassembly of section .text.startup.main:

00000000 <main>:
#include <Arduino.h>

int main(void)
{
	init();
   0:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
   4:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   8:	c0 e0       	ldi	r28, 0x00	; 0
   a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <main+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <main>
  18:	00 c0       	rjmp	.+0      	; 0x1a <__zero_reg__+0x19>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004bc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000aaa  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Znwj   00000004  00000000  00000000  00000f9a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Znaj   00000004  00000000  00000000  00000f9e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZdlPv  00000004  00000000  00000000  00000fa2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZdaPv  00000004  00000000  00000000  00000fa6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__cxa_guard_acquire 00000012  00000000  00000000  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__cxa_guard_release 00000008  00000000  00000000  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.__cxa_guard_abort 00000002  00000000  00000000  00000fc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.__cxa_pure_virtual 00000002  00000000  00000000  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .comment      00000012  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Znwj:

00000000 <_Znwj>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Znwj>

Disassembly of section .text._Znaj:

00000000 <_Znaj>:
   4:	0c 94       	Address 0x00000004 is out of bounds.
.word	0xffff	; ????
	...

Disassembly of section .text._ZdlPv:

0000000c <_ZdlPv>:
   c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZdaPv:

0000001c <_ZdaPv>:
  1c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.__cxa_guard_acquire:

0000003c <__cxa_guard_acquire>:
  3c:	fc 01       	movw	r30, r24
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	20 81       	ld	r18, Z
  44:	22 23       	and	r18, r18
  46:	01 f0       	breq	.+0      	; 0x48 <__cxa_guard_acquire+0xc>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

0000008a <__cxa_guard_release>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
  90:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

0000011c <__cxa_guard_abort>:
 11c:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

0000023a <__cxa_pure_virtual>:
 23a:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a2c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010e3  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_16 00000094  00000000  00000000  00001b43  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.millis  00000018  00000000  00000000  00001bd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.micros  00000046  00000000  00000000  00001bef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.delay   0000004c  00000000  00000000  00001c35  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delayMicroseconds 00000016  00000000  00000000  00001c81  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.init    00000076  00000000  00000000  00001c97  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss.timer0_fract 00000001  00000000  00000000  00001d0d  2**0
                  ALLOC
 12 .bss.timer0_millis 00000004  00000000  00000000  00001d0d  2**0
                  ALLOC
 13 .bss.timer0_overflow_count 00000004  00000000  00000000  00001d0d  2**0
                  ALLOC
 14 .comment      00000012  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	1f 92       	push	r1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
	sbi(TCCR0A, WGM00);
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
	sbi(TCCR0B, CS00);
  14:	bf 93       	push	r27
  16:	80 91 00 00 	lds	r24, 0x0000

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  26:	30 91 00 00 	lds	r19, 0x0000

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	23 e0       	ldi	r18, 0x03	; 3
  2c:	23 0f       	add	r18, r19
  2e:	2d 37       	cpi	r18, 0x7D	; 125
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	00 f4       	brcc	.+0      	; 0x32 <__vector_16+0x32>
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	a1 1d       	adc	r26, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	b1 1d       	adc	r27, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <__vector_16+0x3a>
  3a:	26 e8       	ldi	r18, 0x86	; 134
  3c:	23 0f       	add	r18, r19
  3e:	02 96       	adiw	r24, 0x02	; 2

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	a1 1d       	adc	r26, r1
  42:	b1 1d       	adc	r27, r1
  44:	20 93 00 00 	sts	0x0000, r18
  48:	80 93 00 00 	sts	0x0000, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4c:	90 93 00 00 	sts	0x0000, r25
  50:	a0 93 00 00 	sts	0x0000, r26
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  54:	b0 93 00 00 	sts	0x0000, r27
  58:	80 91 00 00 	lds	r24, 0x0000
  5c:	90 91 00 00 	lds	r25, 0x0000
	sbi(ADCSRA, ADPS1);
  60:	a0 91 00 00 	lds	r26, 0x0000
	sbi(ADCSRA, ADPS0);
  64:	b0 91 00 00 	lds	r27, 0x0000
  68:	01 96       	adiw	r24, 0x01	; 1

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  6a:	a1 1d       	adc	r26, r1
  6c:	b1 1d       	adc	r27, r1
  6e:	80 93 00 00 	sts	0x0000, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  72:	90 93 00 00 	sts	0x0000, r25
  76:	a0 93 00 00 	sts	0x0000, r26
  7a:	b0 93 00 00 	sts	0x0000, r27
  7e:	bf 91       	pop	r27
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	3f 91       	pop	r19
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

Disassembly of section .text.millis:

00000094 <millis>:
  94:	2f b7       	in	r18, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 00 00 	lds	r22, 0x0000
  9c:	70 91 00 00 	lds	r23, 0x0000
  a0:	80 91 00 00 	lds	r24, 0x0000
  a4:	90 91 00 00 	lds	r25, 0x0000
  a8:	2f bf       	out	0x3f, r18	; 63
  aa:	08 95       	ret

Disassembly of section .text.micros:

00000140 <micros>:
 140:	3f b7       	in	r19, 0x3f	; 63
 142:	f8 94       	cli
 144:	80 91 00 00 	lds	r24, 0x0000
 148:	90 91 00 00 	lds	r25, 0x0000
 14c:	a0 91 00 00 	lds	r26, 0x0000
 150:	b0 91 00 00 	lds	r27, 0x0000
 154:	26 b5       	in	r18, 0x26	; 38
 156:	a8 9b       	sbis	0x15, 0	; 21
 158:	00 c0       	rjmp	.+0      	; 0x15a <micros+0x1a>
 15a:	2f 3f       	cpi	r18, 0xFF	; 255
 15c:	01 f0       	breq	.+0      	; 0x15e <micros+0x1e>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	3f bf       	out	0x3f, r19	; 63
 166:	66 27       	eor	r22, r22
 168:	78 2f       	mov	r23, r24
 16a:	89 2f       	mov	r24, r25
 16c:	9a 2f       	mov	r25, r26
 16e:	62 0f       	add	r22, r18
 170:	71 1d       	adc	r23, r1
 172:	81 1d       	adc	r24, r1
 174:	91 1d       	adc	r25, r1
 176:	42 e0       	ldi	r20, 0x02	; 2
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	88 1f       	adc	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	4a 95       	dec	r20
 182:	01 f4       	brne	.+0      	; 0x184 <micros+0x44>
 184:	08 95       	ret

Disassembly of section .text.delay:

000002c6 <delay>:
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
 2d6:	0e 94 00 00 	call	0	; 0x0 <timer0_fract>
 2da:	eb 01       	movw	r28, r22
 2dc:	c1 14       	cp	r12, r1
 2de:	d1 04       	cpc	r13, r1
 2e0:	e1 04       	cpc	r14, r1
 2e2:	f1 04       	cpc	r15, r1
 2e4:	01 f0       	breq	.+0      	; 0x2e6 <delay+0x20>
 2e6:	0e 94 00 00 	call	0	; 0x0 <timer0_fract>
 2ea:	6c 1b       	sub	r22, r28
 2ec:	7d 0b       	sbc	r23, r29
 2ee:	68 3e       	cpi	r22, 0xE8	; 232
 2f0:	73 40       	sbci	r23, 0x03	; 3
 2f2:	00 f0       	brcs	.+0      	; 0x2f4 <delay+0x2e>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	c8 1a       	sub	r12, r24
 2f8:	d1 08       	sbc	r13, r1
 2fa:	e1 08       	sbc	r14, r1
 2fc:	f1 08       	sbc	r15, r1
 2fe:	c8 51       	subi	r28, 0x18	; 24
 300:	dc 4f       	sbci	r29, 0xFC	; 252
 302:	00 c0       	rjmp	.+0      	; 0x304 <delay+0x3e>
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

000005d8 <delayMicroseconds>:
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	01 f0       	breq	.+0      	; 0x5de <delayMicroseconds+0x6>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	02 97       	sbiw	r24, 0x02	; 2
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	01 f4       	brne	.+0      	; 0x5ec <delayMicroseconds+0x14>
 5ec:	08 95       	ret

Disassembly of section .text.init:

00000bc6 <init>:
 bc6:	78 94       	sei
 bc8:	84 b5       	in	r24, 0x24	; 36
 bca:	82 60       	ori	r24, 0x02	; 2
 bcc:	84 bd       	out	0x24, r24	; 36
 bce:	84 b5       	in	r24, 0x24	; 36
 bd0:	81 60       	ori	r24, 0x01	; 1
 bd2:	84 bd       	out	0x24, r24	; 36
 bd4:	85 b5       	in	r24, 0x25	; 37
 bd6:	82 60       	ori	r24, 0x02	; 2
 bd8:	85 bd       	out	0x25, r24	; 37
 bda:	85 b5       	in	r24, 0x25	; 37
 bdc:	81 60       	ori	r24, 0x01	; 1
 bde:	85 bd       	out	0x25, r24	; 37
 be0:	ee e6       	ldi	r30, 0x6E	; 110
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	81 60       	ori	r24, 0x01	; 1
 be8:	80 83       	st	Z, r24
 bea:	e1 e8       	ldi	r30, 0x81	; 129
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	10 82       	st	Z, r1
 bf0:	80 81       	ld	r24, Z
 bf2:	82 60       	ori	r24, 0x02	; 2
 bf4:	80 83       	st	Z, r24
 bf6:	80 81       	ld	r24, Z
 bf8:	81 60       	ori	r24, 0x01	; 1
 bfa:	80 83       	st	Z, r24
 bfc:	e0 e8       	ldi	r30, 0x80	; 128
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	80 81       	ld	r24, Z
 c02:	81 60       	ori	r24, 0x01	; 1
 c04:	80 83       	st	Z, r24
 c06:	e1 eb       	ldi	r30, 0xB1	; 177
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	80 81       	ld	r24, Z
 c0c:	84 60       	ori	r24, 0x04	; 4
 c0e:	80 83       	st	Z, r24
 c10:	e0 eb       	ldi	r30, 0xB0	; 176
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	80 81       	ld	r24, Z
 c16:	81 60       	ori	r24, 0x01	; 1
 c18:	80 83       	st	Z, r24
 c1a:	ea e7       	ldi	r30, 0x7A	; 122
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	80 81       	ld	r24, Z
 c20:	84 60       	ori	r24, 0x04	; 4
 c22:	80 83       	st	Z, r24
 c24:	80 81       	ld	r24, Z
 c26:	82 60       	ori	r24, 0x02	; 2
 c28:	80 83       	st	Z, r24
 c2a:	80 81       	ld	r24, Z
 c2c:	81 60       	ori	r24, 0x01	; 1
 c2e:	80 83       	st	Z, r24
 c30:	80 81       	ld	r24, Z
 c32:	80 68       	ori	r24, 0x80	; 128
 c34:	80 83       	st	Z, r24
 c36:	10 92 c1 00 	sts	0x00C1, r1
 c3a:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008dc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001085  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  00001995  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 0000003a  00000000  00000000  0000199b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000000be  00000000  00000000  000019d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  00001a93  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY

Disassembly of section .text.analogReference:

00000000 <analogReference>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	80 93 00 00 	sts	0x0000, r24
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000006 <analogRead>:
   6:	8e 30       	cpi	r24, 0x0E	; 14
   8:	00 f0       	brcs	.+0      	; 0xa <analogRead+0x4>
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	8e 50       	subi	r24, 0x0E	; 14
   c:	87 70       	andi	r24, 0x07	; 7
   e:	20 91 00 00 	lds	r18, 0x0000
	if (val == 0)
  12:	90 e4       	ldi	r25, 0x40	; 64
	{
		digitalWrite(pin, LOW);
  14:	29 9f       	mul	r18, r25
  16:	90 01       	movw	r18, r0
	}
	else if (val == 255)
  18:	11 24       	eor	r1, r1
  1a:	82 2b       	or	r24, r18
  1c:	80 93 7c 00 	sts	0x007C, r24
	{
		digitalWrite(pin, HIGH);
  20:	80 91 7a 00 	lds	r24, 0x007A
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  24:	80 64       	ori	r24, 0x40	; 64
  26:	80 93 7a 00 	sts	0x007A, r24
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
  2a:	80 91 7a 00 	lds	r24, 0x007A
	}
	else
	{
		switch(digitalPinToTimer(pin))
  2e:	86 fd       	sbrc	r24, 6
  30:	00 c0       	rjmp	.+0      	; 0x32 <analogRead+0x2c>
  32:	80 91 78 00 	lds	r24, 0x0078
  36:	20 91 79 00 	lds	r18, 0x0079
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	92 2b       	or	r25, r18
  3e:	08 95       	ret

Disassembly of section .text.analogWrite:

00000046 <analogWrite>:
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  46:	1f 93       	push	r17
  48:	cf 93       	push	r28
				OCR0B = val; // set pwm duty
  4a:	df 93       	push	r29
				break;
  4c:	18 2f       	mov	r17, r24
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  4e:	eb 01       	movw	r28, r22
  50:	61 e0       	ldi	r22, 0x01	; 1
  52:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  56:	20 97       	sbiw	r28, 0x00	; 0
  58:	01 f4       	brne	.+0      	; 0x5a <analogWrite+0x14>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  5a:	60 e0       	ldi	r22, 0x00	; 0
  5c:	00 c0       	rjmp	.+0      	; 0x5e <analogWrite+0x18>
  5e:	cf 3f       	cpi	r28, 0xFF	; 255
  60:	d1 05       	cpc	r29, r1
  62:	01 f4       	brne	.+0      	; 0x64 <analogWrite+0x1e>
				OCR1B = val; // set pwm duty
  64:	61 e0       	ldi	r22, 0x01	; 1
  66:	81 2f       	mov	r24, r17
  68:	df 91       	pop	r29
  6a:	cf 91       	pop	r28
				break;
  6c:	1f 91       	pop	r17
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  6e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  72:	e1 2f       	mov	r30, r17
				OCR0A = val; // set pwm duty
  74:	f0 e0       	ldi	r31, 0x00	; 0
				break;
  76:	e0 50       	subi	r30, 0x00	; 0
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	e4 91       	lpm	r30, Z
  7c:	e3 30       	cpi	r30, 0x03	; 3
  7e:	01 f0       	breq	.+0      	; 0x80 <analogWrite+0x3a>
  80:	00 f4       	brcc	.+0      	; 0x82 <analogWrite+0x3c>
				OCR1A = val; // set pwm duty
  82:	e1 30       	cpi	r30, 0x01	; 1
  84:	01 f0       	breq	.+0      	; 0x86 <analogWrite+0x40>
  86:	e2 30       	cpi	r30, 0x02	; 2
  88:	01 f4       	brne	.+0      	; 0x8a <analogWrite+0x44>
				break;
  8a:	84 b5       	in	r24, 0x24	; 36
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	84 bd       	out	0x24, r24	; 36
  90:	c8 bd       	out	0x28, r28	; 40
  92:	00 c0       	rjmp	.+0      	; 0x94 <analogWrite+0x4e>
  94:	e6 30       	cpi	r30, 0x06	; 6
				OCR2A = val; // set pwm duty
  96:	01 f0       	breq	.+0      	; 0x98 <analogWrite+0x52>
  98:	e7 30       	cpi	r30, 0x07	; 7
				break;
  9a:	01 f0       	breq	.+0      	; 0x9c <analogWrite+0x56>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  9c:	e4 30       	cpi	r30, 0x04	; 4
  9e:	01 f4       	brne	.+0      	; 0xa0 <analogWrite+0x5a>
  a0:	80 91 80 00 	lds	r24, 0x0080
  a4:	80 62       	ori	r24, 0x20	; 32
				OCR2B = val; // set pwm duty
  a6:	80 93 80 00 	sts	0x0080, r24
				break;
  aa:	d0 93 8b 00 	sts	0x008B, r29
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
  ae:	c0 93 8a 00 	sts	0x008A, r28
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <analogWrite+0x6e>
  b4:	84 b5       	in	r24, 0x24	; 36
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	84 bd       	out	0x24, r24	; 36
  ba:	c7 bd       	out	0x27, r28	; 39
  bc:	00 c0       	rjmp	.+0      	; 0xbe <analogWrite+0x78>
  be:	80 91 80 00 	lds	r24, 0x0080
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 93 80 00 	sts	0x0080, r24
  c8:	d0 93 89 00 	sts	0x0089, r29
  cc:	c0 93 88 00 	sts	0x0088, r28
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <analogWrite+0x8c>
  d2:	80 91 b0 00 	lds	r24, 0x00B0
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 93 b0 00 	sts	0x00B0, r24
  dc:	c0 93 b3 00 	sts	0x00B3, r28
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <analogWrite+0x9c>
  e2:	80 91 b0 00 	lds	r24, 0x00B0
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 93 b0 00 	sts	0x00B0, r24
  ec:	c0 93 b4 00 	sts	0x00B4, r28
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <analogWrite+0xac>
  f2:	c0 38       	cpi	r28, 0x80	; 128
  f4:	d1 05       	cpc	r29, r1
  f6:	04 f0       	brlt	.+0      	; 0xf8 <analogWrite+0xb2>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <analogWrite+0xb4>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <analogWrite+0xb6>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b28  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001221  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.turnOffPWM 00000052  00000000  00000000  00001d7d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pinMode 00000072  00000000  00000000  00001dcf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 0000006c  00000000  00000000  00001e41  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 00000052  00000000  00000000  00001ead  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data.digital_pin_to_timer_PGM 00000014  00000000  00000000  00001eff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .progmem.data.digital_pin_to_bit_mask_PGM 00000014  00000000  00000000  00001f13  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .progmem.data.digital_pin_to_port_PGM 00000014  00000000  00000000  00001f27  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .progmem.data.port_to_input_PGM 0000000a  00000000  00000000  00001f3b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.data.port_to_output_PGM 0000000a  00000000  00000000  00001f45  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.port_to_mode_PGM 0000000a  00000000  00000000  00001f4f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .comment      00000012  00000000  00000000  00001f59  2**0
                  CONTENTS, READONLY

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	83 30       	cpi	r24, 0x03	; 3
   2:	01 f0       	breq	.+0      	; 0x4 <turnOffPWM+0x4>
	uint8_t timer = digitalPinToTimer(pin);
   4:	00 f4       	brcc	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	81 30       	cpi	r24, 0x01	; 1
   8:	01 f0       	breq	.+0      	; 0xa <turnOffPWM+0xa>
   a:	82 30       	cpi	r24, 0x02	; 2
   c:	01 f0       	breq	.+0      	; 0xe <turnOffPWM+0xe>
   e:	08 95       	ret
	uint8_t bit = digitalPinToBitMask(pin);
  10:	86 30       	cpi	r24, 0x06	; 6
  12:	01 f0       	breq	.+0      	; 0x14 <turnOffPWM+0x14>
  14:	87 30       	cpi	r24, 0x07	; 7
  16:	01 f0       	breq	.+0      	; 0x18 <turnOffPWM+0x18>
	uint8_t port = digitalPinToPort(pin);
  18:	84 30       	cpi	r24, 0x04	; 4
  1a:	01 f4       	brne	.+0      	; 0x1c <turnOffPWM+0x1c>
  1c:	80 91 80 00 	lds	r24, 0x0080

	if (port == NOT_A_PIN) return LOW;
  20:	8f 7d       	andi	r24, 0xDF	; 223
  22:	00 c0       	rjmp	.+0      	; 0x24 <turnOffPWM+0x24>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	80 91 80 00 	lds	r24, 0x0080
  28:	8f 77       	andi	r24, 0x7F	; 127

	if (*portInputRegister(port) & bit) return HIGH;
  2a:	80 93 80 00 	sts	0x0080, r24
  2e:	08 95       	ret
  30:	84 b5       	in	r24, 0x24	; 36
  32:	8f 77       	andi	r24, 0x7F	; 127
  34:	00 c0       	rjmp	.+0      	; 0x36 <turnOffPWM+0x36>
  36:	84 b5       	in	r24, 0x24	; 36
  38:	8f 7d       	andi	r24, 0xDF	; 223
  3a:	84 bd       	out	0x24, r24	; 36
  3c:	08 95       	ret
  3e:	80 91 b0 00 	lds	r24, 0x00B0
  42:	8f 77       	andi	r24, 0x7F	; 127
  44:	00 c0       	rjmp	.+0      	; 0x46 <turnOffPWM+0x46>
  46:	80 91 b0 00 	lds	r24, 0x00B0
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  4a:	8f 7d       	andi	r24, 0xDF	; 223
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	80 93 b0 00 	sts	0x00B0, r24
  50:	08 95       	ret

Disassembly of section .text.pinMode:

00000052 <pinMode>:
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	fc 01       	movw	r30, r24
  5a:	e0 50       	subi	r30, 0x00	; 0
  5c:	f0 40       	sbci	r31, 0x00	; 0
  5e:	24 91       	lpm	r18, Z
  60:	fc 01       	movw	r30, r24
  62:	e0 50       	subi	r30, 0x00	; 0
  64:	f0 40       	sbci	r31, 0x00	; 0
  66:	84 91       	lpm	r24, Z
  68:	88 23       	and	r24, r24
  6a:	01 f0       	breq	.+0      	; 0x6c <pinMode+0x1a>
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	88 0f       	add	r24, r24
  70:	99 1f       	adc	r25, r25
  72:	fc 01       	movw	r30, r24
  74:	e0 50       	subi	r30, 0x00	; 0
  76:	f0 40       	sbci	r31, 0x00	; 0
  78:	a5 91       	lpm	r26, Z+
  7a:	b4 91       	lpm	r27, Z
  7c:	80 50       	subi	r24, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	c5 91       	lpm	r28, Z+
  84:	d4 91       	lpm	r29, Z
  86:	9f b7       	in	r25, 0x3f	; 63
  88:	61 11       	cpse	r22, r1
  8a:	00 c0       	rjmp	.+0      	; 0x8c <pinMode+0x3a>
  8c:	f8 94       	cli
  8e:	8c 91       	ld	r24, X
  90:	20 95       	com	r18
  92:	82 23       	and	r24, r18
  94:	8c 93       	st	X, r24
  96:	88 81       	ld	r24, Y
  98:	82 23       	and	r24, r18
  9a:	00 c0       	rjmp	.+0      	; 0x9c <pinMode+0x4a>
  9c:	62 30       	cpi	r22, 0x02	; 2
  9e:	01 f4       	brne	.+0      	; 0xa0 <pinMode+0x4e>
  a0:	f8 94       	cli
  a2:	8c 91       	ld	r24, X
  a4:	32 2f       	mov	r19, r18
  a6:	30 95       	com	r19
  a8:	83 23       	and	r24, r19
  aa:	8c 93       	st	X, r24
  ac:	88 81       	ld	r24, Y
  ae:	82 2b       	or	r24, r18
  b0:	88 83       	st	Y, r24
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <pinMode+0x62>
  b4:	f8 94       	cli
  b6:	8c 91       	ld	r24, X
  b8:	82 2b       	or	r24, r18
  ba:	8c 93       	st	X, r24
  bc:	9f bf       	out	0x3f, r25	; 63
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000116 <digitalWrite>:
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	e0 50       	subi	r30, 0x00	; 0
 12c:	f0 40       	sbci	r31, 0x00	; 0
 12e:	84 91       	lpm	r24, Z
 130:	f9 01       	movw	r30, r18
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	f0 40       	sbci	r31, 0x00	; 0
 136:	14 91       	lpm	r17, Z
 138:	f9 01       	movw	r30, r18
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	f0 40       	sbci	r31, 0x00	; 0
 13e:	04 91       	lpm	r16, Z
 140:	00 23       	and	r16, r16
 142:	01 f0       	breq	.+0      	; 0x144 <digitalWrite+0x2e>
 144:	88 23       	and	r24, r24
 146:	01 f0       	breq	.+0      	; 0x148 <digitalWrite+0x32>
 148:	69 83       	std	Y+1, r22	; 0x01
 14a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 14e:	69 81       	ldd	r22, Y+1	; 0x01
 150:	e0 2f       	mov	r30, r16
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	f0 40       	sbci	r31, 0x00	; 0
 15c:	a5 91       	lpm	r26, Z+
 15e:	b4 91       	lpm	r27, Z
 160:	9f b7       	in	r25, 0x3f	; 63
 162:	f8 94       	cli
 164:	8c 91       	ld	r24, X
 166:	61 11       	cpse	r22, r1
 168:	00 c0       	rjmp	.+0      	; 0x16a <digitalWrite+0x54>
 16a:	10 95       	com	r17
 16c:	81 23       	and	r24, r17
 16e:	00 c0       	rjmp	.+0      	; 0x170 <digitalWrite+0x5a>
 170:	81 2b       	or	r24, r17
 172:	8c 93       	st	X, r24
 174:	9f bf       	out	0x3f, r25	; 63
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

Disassembly of section .text.digitalRead:

00000298 <digitalRead>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	e0 50       	subi	r30, 0x00	; 0
 2a4:	f0 40       	sbci	r31, 0x00	; 0
 2a6:	84 91       	lpm	r24, Z
 2a8:	f9 01       	movw	r30, r18
 2aa:	e0 50       	subi	r30, 0x00	; 0
 2ac:	f0 40       	sbci	r31, 0x00	; 0
 2ae:	d4 91       	lpm	r29, Z
 2b0:	f9 01       	movw	r30, r18
 2b2:	e0 50       	subi	r30, 0x00	; 0
 2b4:	f0 40       	sbci	r31, 0x00	; 0
 2b6:	c4 91       	lpm	r28, Z
 2b8:	cc 23       	and	r28, r28
 2ba:	01 f0       	breq	.+0      	; 0x2bc <digitalRead+0x24>
 2bc:	81 11       	cpse	r24, r1
 2be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2c2:	ec 2f       	mov	r30, r28
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	e0 50       	subi	r30, 0x00	; 0
 2cc:	f0 40       	sbci	r31, 0x00	; 0
 2ce:	a5 91       	lpm	r26, Z+
 2d0:	b4 91       	lpm	r27, Z
 2d2:	2c 91       	ld	r18, X
 2d4:	2d 23       	and	r18, r29
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 f4       	brne	.+0      	; 0x2dc <digitalRead+0x44>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <digitalRead+0x48>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000798  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001048  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 0000010a  00000000  00000000  00001814  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	fc 01       	movw	r30, r24
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
  18:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
  1a:	fc 01       	movw	r30, r24
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	74 91       	lpm	r23, Z
	uint8_t stateMask = (state ? bit : 0);
  22:	61 11       	cpse	r22, r1
  24:	00 c0       	rjmp	.+0      	; 0x26 <pulseIn+0x26>
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	00 c0       	rjmp	.+0      	; 0x2a <pulseIn+0x2a>
  2a:	cd 2f       	mov	r28, r29
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  2c:	da 01       	movw	r26, r20
  2e:	c9 01       	movw	r24, r18
  30:	bf 70       	andi	r27, 0x0F	; 15
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  32:	67 2f       	mov	r22, r23
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	66 0f       	add	r22, r22
  38:	77 1f       	adc	r23, r23
  3a:	60 50       	subi	r22, 0x00	; 0
  3c:	70 40       	sbci	r23, 0x00	; 0
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  3e:	00 e0       	ldi	r16, 0x00	; 0
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	98 01       	movw	r18, r16
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  44:	fb 01       	movw	r30, r22
  46:	e5 90       	lpm	r14, Z+
  48:	f4 90       	lpm	r15, Z
  4a:	f7 01       	movw	r30, r14
  4c:	40 81       	ld	r20, Z
  4e:	4d 23       	and	r20, r29
  50:	4c 13       	cpse	r20, r28
  52:	00 c0       	rjmp	.+0      	; 0x54 <pulseIn+0x54>
		if (numloops++ == maxloops)
  54:	68 01       	movw	r12, r16
  56:	79 01       	movw	r14, r18
  58:	4f ef       	ldi	r20, 0xFF	; 255
  5a:	c4 1a       	sub	r12, r20
  5c:	d4 0a       	sbc	r13, r20
  5e:	e4 0a       	sbc	r14, r20
  60:	f4 0a       	sbc	r15, r20
  62:	08 17       	cp	r16, r24
  64:	19 07       	cpc	r17, r25
  66:	2a 07       	cpc	r18, r26
  68:	3b 07       	cpc	r19, r27
  6a:	01 f4       	brne	.+0      	; 0x6c <pulseIn+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <pulseIn+0x6e>
  6e:	97 01       	movw	r18, r14
  70:	86 01       	movw	r16, r12
  72:	00 c0       	rjmp	.+0      	; 0x74 <pulseIn+0x74>
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  74:	68 01       	movw	r12, r16
  76:	79 01       	movw	r14, r18
  78:	ff ef       	ldi	r31, 0xFF	; 255
  7a:	cf 1a       	sub	r12, r31
  7c:	df 0a       	sbc	r13, r31
  7e:	ef 0a       	sbc	r14, r31
  80:	ff 0a       	sbc	r15, r31
  82:	08 17       	cp	r16, r24
  84:	19 07       	cpc	r17, r25
  86:	2a 07       	cpc	r18, r26
  88:	3b 07       	cpc	r19, r27
  8a:	01 f0       	breq	.+0      	; 0x8c <pulseIn+0x8c>
  8c:	97 01       	movw	r18, r14
  8e:	86 01       	movw	r16, r12
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  90:	fb 01       	movw	r30, r22
  92:	e5 90       	lpm	r14, Z+
  94:	f4 90       	lpm	r15, Z
  96:	f7 01       	movw	r30, r14
  98:	40 81       	ld	r20, Z
  9a:	4d 23       	and	r20, r29
  9c:	4c 13       	cpse	r20, r28
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <pulseIn+0xa0>
  a0:	80 1b       	sub	r24, r16
  a2:	91 0b       	sbc	r25, r17
  a4:	a2 0b       	sbc	r26, r18
  a6:	b3 0b       	sbc	r27, r19
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	a9 01       	movw	r20, r18
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  ae:	fb 01       	movw	r30, r22
  b0:	e5 90       	lpm	r14, Z+
  b2:	f4 90       	lpm	r15, Z
  b4:	f7 01       	movw	r30, r14
  b6:	f0 80       	ld	r15, Z
  b8:	fd 22       	and	r15, r29
  ba:	fc 12       	cpse	r15, r28
  bc:	00 c0       	rjmp	.+0      	; 0xbe <pulseIn+0xbe>
		if (numloops++ == maxloops)
  be:	28 17       	cp	r18, r24
  c0:	39 07       	cpc	r19, r25
  c2:	4a 07       	cpc	r20, r26
  c4:	5b 07       	cpc	r21, r27
  c6:	01 f0       	breq	.+0      	; 0xc8 <pulseIn+0xc8>
			return 0;
		width++;
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	4f 4f       	sbci	r20, 0xFF	; 255
  ce:	5f 4f       	sbci	r21, 0xFF	; 255
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <pulseIn+0xd2>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  d2:	a5 e1       	ldi	r26, 0x15	; 21
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  da:	60 5f       	subi	r22, 0xF0	; 240
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	8f 4f       	sbci	r24, 0xFF	; 255
  e0:	9f 4f       	sbci	r25, 0xFF	; 255
  e2:	24 e0       	ldi	r18, 0x04	; 4
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	77 95       	ror	r23
  ea:	67 95       	ror	r22
  ec:	2a 95       	dec	r18
  ee:	01 f4       	brne	.+0      	; 0xf0 <pulseIn+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <pulseIn+0xf2>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	cb 01       	movw	r24, r22
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	ff 90       	pop	r15
 102:	ef 90       	pop	r14
 104:	df 90       	pop	r13
 106:	cf 90       	pop	r12
 108:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000107f  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftIn 0000006a  00000000  00000000  0000186f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftOut 0000007e  00000000  00000000  000018d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000012  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	d8 2e       	mov	r13, r24
  12:	e6 2e       	mov	r14, r22
  14:	c4 2e       	mov	r12, r20
  16:	c7 e0       	ldi	r28, 0x07	; 7
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	f1 2c       	mov	r15, r1
  1c:	07 e0       	ldi	r16, 0x07	; 7
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	61 e0       	ldi	r22, 0x01	; 1
  22:	8e 2d       	mov	r24, r14
  24:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  28:	8d 2d       	mov	r24, r13
  2a:	c1 10       	cpse	r12, r1
  2c:	00 c0       	rjmp	.+0      	; 0x2e <shiftIn+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
			digitalWrite(dataPin, !!(val & (1 << i)));
  32:	98 01       	movw	r18, r16
  34:	2c 1b       	sub	r18, r28
  36:	3d 0b       	sbc	r19, r29
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  3e:	2c 2f       	mov	r18, r28
  40:	00 c0       	rjmp	.+0      	; 0x42 <shiftIn+0x42>
  42:	88 0f       	add	r24, r24
  44:	2a 95       	dec	r18
  46:	02 f4       	brpl	.+0      	; 0x48 <shiftIn+0x48>
  48:	f8 2a       	or	r15, r24
  4a:	60 e0       	ldi	r22, 0x00	; 0
  4c:	8e 2d       	mov	r24, r14
  4e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  52:	21 97       	sbiw	r28, 0x01	; 1
  54:	00 f4       	brcc	.+0      	; 0x56 <shiftIn+0x56>
			
		digitalWrite(clockPin, HIGH);
  56:	8f 2d       	mov	r24, r15
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
		digitalWrite(clockPin, LOW);		
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	df 90       	pop	r13
  66:	cf 90       	pop	r12
  68:	08 95       	ret

Disassembly of section .text.shiftOut:

0000006a <shiftOut>:
	}
}
  6a:	bf 92       	push	r11
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	0f 93       	push	r16
  76:	1f 93       	push	r17
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	c8 2e       	mov	r12, r24
  7e:	d6 2e       	mov	r13, r22
  80:	b4 2e       	mov	r11, r20
  82:	c7 e0       	ldi	r28, 0x07	; 7
  84:	d0 e0       	ldi	r29, 0x00	; 0
  86:	02 2f       	mov	r16, r18
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	87 e0       	ldi	r24, 0x07	; 7
  8c:	e8 2e       	mov	r14, r24
  8e:	f1 2c       	mov	r15, r1
  90:	b1 10       	cpse	r11, r1
  92:	00 c0       	rjmp	.+0      	; 0x94 <shiftOut+0x2a>
  94:	f7 01       	movw	r30, r14
  96:	ec 1b       	sub	r30, r28
  98:	fd 0b       	sbc	r31, r29
  9a:	b8 01       	movw	r22, r16
  9c:	00 c0       	rjmp	.+0      	; 0x9e <shiftOut+0x34>
  9e:	75 95       	asr	r23
  a0:	67 95       	ror	r22
  a2:	ea 95       	dec	r30
  a4:	02 f4       	brpl	.+0      	; 0xa6 <shiftOut+0x3c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <shiftOut+0x3e>
  a8:	b8 01       	movw	r22, r16
  aa:	0c 2e       	mov	r0, r28
  ac:	00 c0       	rjmp	.+0      	; 0xae <shiftOut+0x44>
  ae:	75 95       	asr	r23
  b0:	67 95       	ror	r22
  b2:	0a 94       	dec	r0
  b4:	02 f4       	brpl	.+0      	; 0xb6 <shiftOut+0x4c>
  b6:	61 70       	andi	r22, 0x01	; 1
  b8:	77 27       	eor	r23, r23
  ba:	8c 2d       	mov	r24, r12
  bc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	8d 2d       	mov	r24, r13
  c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	8d 2d       	mov	r24, r13
  cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	00 f4       	brcc	.+0      	; 0xd4 <shiftOut+0x6a>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	ff 90       	pop	r15
  de:	ef 90       	pop	r14
  e0:	df 90       	pop	r13
  e2:	cf 90       	pop	r12
  e4:	bf 90       	pop	r11
  e6:	08 95       	ret
